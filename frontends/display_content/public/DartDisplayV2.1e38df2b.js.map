{"mappings":"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","sources":["<anon>","killer.js"],"sourcesContent":["// killer.js - Killer Game Component (Controller Support & Assassin Theme, Main Display Buttons Removed, Enhanced Visibility)\n// Assumes React, GameOverScreen, IconPlaceholder, GAME_MODES are available globally\nconst KillerGame = ({ gameMode, onGameEnd, socket, gameState, clientPlayerId, displayRole })=>{\n    // --- Controller Specific State ---\n    const [actingPlayerId, setActingPlayerId] = React.useState(null); // For choosing numbers\n    const [controllerView, setControllerView] = React.useState('NUMBER_SELECTION'); // Initial view\n    // --- 1. Initial Game State Validation ---\n    if (!gameState || typeof gameState !== 'object' || gameState.mode !== 'KILLER' || !Array.isArray(gameState.participants) || !Array.isArray(gameState.KILLER_NUMBERS_TO_CHOOSE_FROM) || typeof gameState.KILLER_LIVES_START !== 'number') {\n        console.warn(\"KillerGame: Received incomplete or invalid gameState:\", gameState ? JSON.stringify(gameState).substring(0, 300) : \"null\");\n        return React.createElement('div', {\n            className: \"p-8 text-center text-yellow-400 animate-pulse font-sans\"\n        }, \"Loading Killer Game...\");\n    }\n    // --- 2. Game Over Condition (Main Display & Controller) ---\n    // For the main display, show the game over screen if the game is over.\n    if (displayRole !== 'controller' && gameState.gameOver && gameState.winner) {\n        if (typeof GameOverScreen !== 'undefined') return React.createElement(GameOverScreen, {\n            winner: gameState.winner,\n            onDismiss: ()=>onGameEnd(false)\n        });\n        else // Fallback if GameOverScreen component is not available\n        return React.createElement('div', {\n            className: \"p-8 text-center text-green-400 text-4xl font-sans\"\n        }, `Game Over! Winner: ${gameState.winner?.name || 'Unknown'}`);\n    }\n    // --- 3. Destructure Game State Properties ---\n    const { participants = [], history, KILLER_NUMBERS_TO_CHOOSE_FROM = [], KILLER_LIVES_START = 3 } = gameState;\n    // --- 4. Game Logic Helpers & Derived State ---\n    const allNumbersChosen = participants.every((p)=>p.killer_number !== null);\n    const activeKillers = participants.filter((p)=>p.killer_is_killer && !p.killer_is_eliminated);\n    const actingPlayer = actingPlayerId ? participants.find((p)=>p.id === actingPlayerId) : null;\n    // Determine if the undo action is available.\n    const canUndo = history && Array.isArray(history) && history.length > 1;\n    const getPlayerDisplayName = (participant)=>participant?.name || \"UNKNOWN TARGET\";\n    // --- Effect to transition controller view when all numbers are chosen ---\n    React.useEffect(()=>{\n        if (allNumbersChosen && controllerView === 'NUMBER_SELECTION' && !gameState.gameOver) {\n            setControllerView('ACTION_MENU');\n            setActingPlayerId(null); // Clear acting player after numbers are done\n        }\n        if (!allNumbersChosen && controllerView !== 'NUMBER_SELECTION' && !gameState.gameOver) // If numbers become un-chosen (e.g. undo), revert to number selection\n        setControllerView('NUMBER_SELECTION');\n    }, [\n        allNumbersChosen,\n        controllerView,\n        gameState.gameOver\n    ]);\n    // --- 5. Event Handlers ---\n    // Handles a player choosing their number (via controller).\n    const handleChooseNumberForPlayer = (chosenNumber)=>{\n        if (socket && actingPlayer && !actingPlayer.killer_is_eliminated && !actingPlayer.killer_number) {\n            socket.emit('killerChooseNumber', {\n                playerId: actingPlayer.id,\n                chosenNumber: chosenNumber\n            });\n            setActingPlayerId(null); // Return to player selection list\n        } else console.warn(\"Controller: Cannot choose number. Conditions not met for acting player.\", {\n            actingPlayerDetails: actingPlayer\n        });\n    };\n    // Handles a player becoming a killer (via controller).\n    const handlePlayerSpecificBecomeKiller = (playerIdToBecomeKiller)=>{\n        const player = participants.find((p)=>p.id === playerIdToBecomeKiller);\n        if (socket && player && allNumbersChosen && player.killer_number && !player.killer_is_killer && !player.killer_is_eliminated) socket.emit('killerBecomeKiller', {\n            playerId: player.id\n        });\n        else console.warn(\"Controller: Cannot make player a killer. Conditions not met.\", {\n            playerDetails: player,\n            allNumbersChosen\n        });\n    };\n    const CONTROLLER_DEVICE_ACTION_ID = \"CONTROLLER_DEVICE_ACTION\"; // Identifier for actions taken by controller device itself\n    // Handles removing a life from a player (via controller).\n    const handleControllerRemoveLifeForPlayer = (targetPlayerId)=>{\n        if (socket) {\n            const target = participants.find((p)=>p.id === targetPlayerId);\n            if (target && !target.killer_is_eliminated && activeKillers.length > 0) {\n                console.log(`Controller: Emitting killerRemoveLife for target ${targetPlayerId} from ${CONTROLLER_DEVICE_ACTION_ID} (Killer Phase Mode)`);\n                socket.emit('killerRemoveLife', {\n                    fromPlayerId: CONTROLLER_DEVICE_ACTION_ID,\n                    targetPlayerId: targetPlayerId\n                });\n            } else console.warn(\"Controller (Manage Lives): Target invalid, or no active killers.\", {\n                targetPlayerId,\n                targetDetails: target,\n                activeKillersCount: activeKillers.length\n            });\n        } else console.warn(\"Controller (Manage Lives): Socket not available.\");\n    };\n    // Handles undo action (via controller).\n    const handleUndo = ()=>{\n        if (socket && canUndo) {\n            socket.emit('undoLastAction');\n            // If undoing makes numbers unchosen, switch controller view back.\n            if (controllerView === 'ACTION_MENU' && activeKillers.length === 0 && !allNumbersChosen) setControllerView('NUMBER_SELECTION');\n        }\n    };\n    // Handles ending the game (via controller).\n    // This function is kept for potential direct calls, though the button is removed.\n    const handleEndGameController = ()=>{\n        if (socket) socket.emit('forceEndGame'); // Inform server to end the game.\n        onGameEnd(true); // true indicates a manual end by a player.\n    };\n    // --- 6. UI Constants ---\n    const assassinIcon = \"\\uD83D\\uDD2A\";\n    const targetIcon = \"\\uD83C\\uDFAF\";\n    const skullIcon = \"\\uD83D\\uDC80\";\n    // --- 7. Main Display View Rendering ---\n    const renderMainDisplayViewKiller = ()=>{\n        let mainPromptText = \"OBSERVE THE SHADOWS...\";\n        if (!allNumbersChosen) mainPromptText = \"ALL PLAYERS MUST SELECT THEIR MARK!\";\n        else if (activeKillers.length === 0) mainPromptText = \"ALL MARKS CLAIMED. AWAIT THE KILLER PROTOCOL.\";\n        else if (activeKillers.length > 0) {\n            const killerNames = activeKillers.map((k)=>getPlayerDisplayName(k)).join(' & ');\n            mainPromptText = React.createElement('span', {\n                className: \"text-red-400 font-bold\"\n            }, `${killerNames.toUpperCase()} ${activeKillers.length > 1 ? \"ARE\" : \"IS\"} THE KILLER.`);\n        }\n        if (gameState.gameOver && gameState.winner) mainPromptText = React.createElement('span', {\n            className: \"text-green-400 font-bold\"\n        }, `GAME OVER! WINNER: ${getPlayerDisplayName(gameState.winner)}`);\n        const useLargeScale = participants.length <= 4;\n        const basePlayerNameSize = \"text-7xl\";\n        const basePlayerStatusSize = \"text-6xl\";\n        const baseLifeIconSize = \"text-[10rem]\";\n        const basePlayerNumberSize = \"text-[12rem]\";\n        const baseQuestionMarkSize = \"text-8xl\";\n        const baseCardPaddingVertical = \"py-10\";\n        const baseCardPaddingHorizontal = \"px-4\";\n        const baseNameMarginBottom = \"mb-6\";\n        const baseLivesNumberMarginTop = \"mt-6\";\n        const baseLivesSpacing = \"space-x-4\";\n        const smallerPlayerNameSize = \"text-5xl\";\n        const smallerPlayerStatusSize = \"text-4xl\";\n        const smallerLifeIconSize = \"text-[7rem]\";\n        const smallerPlayerNumberSize = \"text-[9rem]\";\n        const smallerQuestionMarkSize = \"text-6xl\";\n        const smallerCardPaddingVertical = \"py-8\";\n        const smallerCardPaddingHorizontal = \"px-3\";\n        const smallerNameMarginBottom = \"mb-4\";\n        const smallerLivesNumberMarginTop = \"mt-4\";\n        const smallerLivesSpacing = \"space-x-3\";\n        const cardPadding = `${useLargeScale ? baseCardPaddingHorizontal : smallerCardPaddingHorizontal} ${useLargeScale ? baseCardPaddingVertical : smallerCardPaddingVertical}`;\n        const playerNameSize = useLargeScale ? basePlayerNameSize : smallerPlayerNameSize;\n        const playerStatusSize = useLargeScale ? basePlayerStatusSize : smallerPlayerStatusSize;\n        const lifeIconSize = useLargeScale ? baseLifeIconSize : smallerLifeIconSize;\n        const playerNumberSize = useLargeScale ? basePlayerNumberSize : smallerPlayerNumberSize;\n        const questionMarkSize = useLargeScale ? baseQuestionMarkSize : smallerQuestionMarkSize;\n        const nameMarginBottom = useLargeScale ? baseNameMarginBottom : smallerNameMarginBottom;\n        const livesNumberMarginTop = useLargeScale ? baseLivesNumberMarginTop : smallerLivesNumberMarginTop;\n        const livesSpacing = useLargeScale ? baseLivesSpacing : smallerLivesSpacing;\n        const cardMinHeight = useLargeScale ? \"min-h-[28rem]\" : \"min-h-[22rem]\";\n        return React.createElement('div', {\n            className: \"killer-game-area container mx-auto px-1 sm:px-2 py-4 text-white flex flex-col items-center h-screen bg-slate-900 font-sans\"\n        }, React.createElement('h2', {\n            className: \"text-6xl md:text-7xl font-black game-title-font text-red-500 text-center mb-4 sm:mb-6\"\n        }, typeof GAME_MODES !== 'undefined' && GAME_MODES.KILLER ? GAME_MODES.KILLER.name : gameMode?.name || \"Killer\"), React.createElement('p', {\n            className: \"text-2xl md:text-3xl text-gray-300 mb-6 md:mb-8 text-center min-h-[3.5rem]\"\n        }, mainPromptText), React.createElement('div', {\n            className: `w-full max-w-full space-y-5 md:space-y-6 flex-grow overflow-y-auto custom-scrollbar pb-4`\n        }, participants.map((p_target)=>{\n            const isAssassin = p_target.killer_is_killer && !p_target.killer_is_eliminated;\n            const isEliminated = p_target.killer_is_eliminated;\n            const cardBaseClasses = `killer-player-card ${cardPadding} ${cardMinHeight} rounded-xl transition-all duration-300 ease-in-out relative overflow-hidden shadow-lg flex flex-col justify-around`;\n            const assassinCardClasses = isAssassin ? \"bg-gradient-to-br from-red-700 via-red-800 to-red-900 ring-4 ring-offset-2 ring-offset-red-800 ring-red-500 shadow-xl shadow-red-600/50\" : \"bg-slate-800 border-2 border-slate-700 hover:border-slate-600\";\n            const eliminatedCardClasses = isEliminated ? \"opacity-40 filter grayscale\" : \"\";\n            const nameColor = isAssassin ? \"text-red-100\" : isEliminated ? \"text-slate-500\" : \"text-slate-100\";\n            const numberColor = isAssassin ? \"text-red-200\" : isEliminated ? \"text-slate-600\" : \"text-sky-300\";\n            let playerStatusText = \"TARGET\";\n            let playerStatusColor = \"text-sky-400\";\n            if (isEliminated) {\n                playerStatusText = \"ELIMINATED\";\n                playerStatusColor = \"text-slate-500\";\n            } else if (isAssassin) {\n                playerStatusText = \"KILLER\";\n                playerStatusColor = \"text-red-400\";\n            }\n            const eliminatedStampClasses = isEliminated ? `absolute inset-0 flex items-center justify-center text-red-600 ${useLargeScale ? 'text-8xl sm:text-9xl' : 'text-7xl sm:text-8xl'} font-black tracking-wider opacity-70 transform -rotate-12 pointer-events-none z-10` : \"hidden\";\n            return React.createElement('div', {\n                key: p_target.id,\n                className: `${cardBaseClasses} ${assassinCardClasses} ${eliminatedCardClasses}`\n            }, React.createElement('div', {\n                className: eliminatedStampClasses,\n                style: {\n                    textShadow: '2px 2px 4px rgba(0,0,0,0.5)'\n                }\n            }, \"ELIMINATED\"), React.createElement('div', {\n                className: `relative z-0 flex flex-col ${isEliminated ? 'pointer-events-none' : ''}`\n            }, React.createElement('div', {\n                className: `flex items-baseline justify-start w-full ${nameMarginBottom}`\n            }, React.createElement('h3', {\n                className: `font-bold ${nameColor} ${playerNameSize} mr-8 leading-none`\n            }, getPlayerDisplayName(p_target)), !isEliminated && React.createElement('p', {\n                className: `${playerStatusColor} ${playerStatusSize} leading-none`\n            }, isAssassin ? React.createElement('span', {\n                className: \"mr-1\"\n            }, assassinIcon) : null, playerStatusText)), React.createElement('div', {\n                className: `flex items-center w-full ${livesNumberMarginTop}`\n            }, React.createElement('div', {\n                className: \"w-3/5 flex justify-center items-center\"\n            }, React.createElement('div', {\n                className: `flex items-center ${livesSpacing}`\n            }, [\n                ...Array(KILLER_LIVES_START)\n            ].map((_, i)=>{\n                const lifeLost = i < KILLER_LIVES_START - (p_target.killer_lives || 0);\n                const currentIcon = lifeLost ? skullIcon : targetIcon;\n                return React.createElement('span', {\n                    key: `life-${p_target.id}-${i}`,\n                    className: `${lifeIconSize} ${lifeLost ? 'text-slate-600 opacity-70' : isAssassin ? 'text-red-300 animate-pulse' : 'text-green-400'}`\n                }, currentIcon);\n            }))), !isEliminated && React.createElement('div', {\n                className: \"w-2/5 flex justify-center items-center\"\n            }, React.createElement('p', {\n                className: `font-black leading-none ${numberColor} ${playerNumberSize}`\n            }, p_target.killer_number || React.createElement('span', {\n                className: `text-slate-500 ${questionMarkSize}`\n            }, \"?\"))))));\n        })));\n    };\n    // --- 8. Controller View Rendering Function ---\n    const renderControllerViewKiller = ()=>{\n        // MODIFIED: Button Styles for consistency and touch-friendliness\n        const largeButtonBase = \"w-full text-xl font-bold rounded-lg shadow-md my-2 transition-transform hover:scale-105 active:scale-95 flex items-center justify-center text-center leading-tight disabled:opacity-50 disabled:cursor-not-allowed\";\n        const playerListButtonClass = `${largeButtonBase} py-5 bg-sky-600 hover:bg-sky-500 text-white`;\n        const actionButtonClass = `${largeButtonBase} py-5 bg-green-600 hover:bg-green-500 text-white`;\n        const destructiveButtonClass = `${largeButtonBase} py-4 text-lg bg-red-600 hover:bg-red-500 text-white`; // For Make Killer\n        const navButtonClass = `${largeButtonBase} py-3 text-lg bg-blue-600 hover:bg-blue-500 text-white`;\n        const undoButtonClass = `${largeButtonBase} py-4 text-lg bg-yellow-500 hover:bg-yellow-600 text-black`;\n        const numberChoiceButtonClass = \"aspect-square text-3xl rounded-lg font-bold transition-all p-2 shadow-lg hover:scale-105 active:scale-95 flex items-center justify-center\"; // Made larger and square\n        const titleClass = \"text-2xl md:text-3xl game-title-font text-yellow-300 font-semibold text-center mb-2 leading-tight\";\n        const subTitleClass = \"text-base md:text-lg text-center text-slate-300 mb-3\";\n        if (gameState.gameOver) return React.createElement('div', {\n            className: \"flex flex-col items-center justify-center h-full p-3 text-center bg-slate-800 text-slate-100 font-sans rounded-lg\"\n        }, React.createElement('h3', {\n            className: `${titleClass} text-red-400`\n        }, \"GAME OVER\"), gameState.winner && React.createElement('p', {\n            className: `${subTitleClass} text-xl mt-1`\n        }, `Winner: ${getPlayerDisplayName(gameState.winner)}`), React.createElement('button', {\n            onClick: ()=>onGameEnd(false),\n            className: `${largeButtonBase} py-4 bg-slate-500 hover:bg-slate-600 mt-4`\n        }, \"Close Controller\"));\n        if (controllerView === 'NUMBER_SELECTION') {\n            if (!actingPlayer) return React.createElement('div', {\n                className: \"flex flex-col h-full p-3 space-y-2 bg-slate-800 text-slate-100 font-sans rounded-lg\"\n            }, React.createElement('h3', {\n                className: titleClass\n            }, \"Choose Player's Mark\"), React.createElement('p', {\n                className: subTitleClass\n            }, \"Select a player to choose their number.\"), React.createElement('div', {\n                className: \"w-full max-w-sm mx-auto flex-grow overflow-y-auto custom-scrollbar pr-1\"\n            }, participants.map((p)=>{\n                if (p.killer_number) return React.createElement('div', {\n                    key: p.id,\n                    className: `${playerListButtonClass} opacity-70 flex justify-between items-center`\n                }, React.createElement('span', null, getPlayerDisplayName(p)), React.createElement('span', {\n                    className: \"text-2xl font-black ml-2\"\n                }, p.killer_number));\n                return React.createElement('button', {\n                    key: p.id,\n                    onClick: ()=>setActingPlayerId(p.id),\n                    className: playerListButtonClass,\n                    disabled: p.killer_is_eliminated\n                }, getPlayerDisplayName(p), p.killer_is_eliminated ? \" (Eliminated)\" : \"\");\n            })), canUndo && React.createElement('button', {\n                onClick: handleUndo,\n                className: `${undoButtonClass} mt-auto`\n            }, \"\\u21A9\\uFE0F Undo\"));\n            else return React.createElement('div', {\n                className: \"flex flex-col h-full p-2 bg-slate-800 text-slate-100 font-sans rounded-lg\"\n            }, React.createElement('h3', {\n                className: titleClass\n            }, `Set Mark for ${getPlayerDisplayName(actingPlayer)}`), React.createElement('div', {\n                className: \"grid grid-cols-5 gap-2 my-auto w-full max-w-xs mx-auto\"\n            }, KILLER_NUMBERS_TO_CHOOSE_FROM.map((num)=>{\n                const isTakenByOther = participants.some((p)=>p.id !== actingPlayerId && p.killer_number === num);\n                return React.createElement('button', {\n                    key: num,\n                    onClick: ()=>handleChooseNumberForPlayer(num),\n                    disabled: isTakenByOther,\n                    className: `${numberChoiceButtonClass} ${isTakenByOther ? 'bg-slate-700 text-slate-500 cursor-not-allowed opacity-60' : 'bg-sky-600 hover:bg-sky-500 text-white'}`\n                }, num);\n            })), React.createElement('button', {\n                onClick: ()=>setActingPlayerId(null),\n                className: `${navButtonClass} mt-2`\n            }, \"\\u2190 Back to Player List\"));\n        }\n        if (controllerView === 'ACTION_MENU') return React.createElement('div', {\n            className: \"flex flex-col items-center justify-center h-full p-3 space-y-3 bg-slate-800 text-slate-100 font-sans rounded-lg\"\n        }, React.createElement('h3', {\n            className: titleClass\n        }, \"Killer Actions\"), React.createElement('div', {\n            className: \"w-full max-w-sm space-y-3\"\n        }, React.createElement('button', {\n            onClick: ()=>setControllerView('BECOME_KILLER_SELECTION'),\n            className: actionButtonClass\n        }, assassinIcon + \" Designate Killers\"), React.createElement('button', {\n            onClick: ()=>setControllerView('MANAGE_LIVES'),\n            className: actionButtonClass,\n            disabled: activeKillers.length === 0\n        }, targetIcon + \" Manage Lives\", activeKillers.length === 0 ? \" (No Killers Yet)\" : \"\"), canUndo && React.createElement('button', {\n            onClick: handleUndo,\n            className: undoButtonClass\n        }, \"\\u21A9\\uFE0F Undo Last Action\")));\n        if (controllerView === 'BECOME_KILLER_SELECTION') return React.createElement('div', {\n            className: \"flex flex-col h-full p-2 bg-slate-800 text-slate-100 font-sans overflow-y-auto custom-scrollbar rounded-lg\"\n        }, React.createElement('h3', {\n            className: titleClass\n        }, \"Designate Killers\"), React.createElement('div', {\n            className: \"space-y-2 flex-grow mb-2 w-full max-w-md mx-auto\"\n        }, participants.map((p)=>{\n            const canBecomeKiller = p.killer_number && !p.killer_is_killer && !p.killer_is_eliminated;\n            return React.createElement('div', {\n                key: p.id,\n                className: `p-3 rounded-lg shadow flex justify-between items-center ${p.killer_is_killer ? 'bg-red-800/60' : 'bg-slate-700'}`\n            }, React.createElement('span', {\n                className: `text-lg ${p.killer_is_killer ? 'text-red-200 font-bold' : 'text-slate-100'}`\n            }, getPlayerDisplayName(p), p.killer_is_killer ? ` ${assassinIcon} IS KILLER` : p.killer_is_eliminated ? \" (Eliminated)\" : ` (#${p.killer_number || '?'})`), canBecomeKiller && React.createElement('button', {\n                onClick: ()=>handlePlayerSpecificBecomeKiller(p.id),\n                className: `${destructiveButtonClass} text-sm py-2 px-4 ml-2` // Adjusted padding\n            }, \"Make Killer\"));\n        })), React.createElement('button', {\n            onClick: ()=>setControllerView('ACTION_MENU'),\n            className: `${navButtonClass} mt-auto w-full max-w-xs mx-auto`\n        }, \"\\u2190 Back to Actions\"));\n        if (controllerView === 'MANAGE_LIVES') {\n            if (activeKillers.length === 0 && !gameState.gameOver) {\n                setControllerView('ACTION_MENU');\n                return React.createElement('div', {\n                    className: \"p-4 text-center bg-slate-800 text-slate-100 font-sans rounded-lg\"\n                }, \"No active killers. Returning to menu...\");\n            }\n            return React.createElement('div', {\n                className: \"flex flex-col h-full p-2 bg-slate-800 text-slate-100 font-sans overflow-y-auto custom-scrollbar rounded-lg\"\n            }, React.createElement('h3', {\n                className: titleClass\n            }, \"Manage Player Lives\"), React.createElement('p', {\n                className: subTitleClass\n            }, \"Tap a life (\\uD83C\\uDFAF) to remove it. Killers can attack anyone.\"), React.createElement('div', {\n                className: \"space-y-2 flex-grow mb-2 w-full max-w-md mx-auto\"\n            }, participants.map((p)=>{\n                const isEliminated = p.killer_is_eliminated;\n                const isKiller = p.killer_is_killer && !isEliminated;\n                const currentLives = typeof p.killer_lives === 'number' ? p.killer_lives : KILLER_LIVES_START;\n                return React.createElement('div', {\n                    key: p.id,\n                    className: `p-3 rounded-lg shadow ${isEliminated ? 'bg-slate-700 opacity-60' : isKiller ? 'bg-red-900/50 border border-red-700' : 'bg-slate-700 border border-slate-600'}`\n                }, React.createElement('p', {\n                    className: `text-xl font-semibold mb-1.5 ${isEliminated ? 'text-slate-400 line-through' : isKiller ? 'text-red-300' : 'text-sky-300'}`\n                }, getPlayerDisplayName(p) + (isKiller ? ` ${assassinIcon}` : \"\") + (isEliminated ? \" (\\uD83D\\uDC80 ELIMINATED)\" : ` (#${p.killer_number})`)), !isEliminated && React.createElement('div', {\n                    className: \"flex justify-center items-center space-x-2 sm:space-x-3 mt-2\"\n                }, [\n                    ...Array(KILLER_LIVES_START)\n                ].map((_, i)=>{\n                    const isLifeActive = i < currentLives;\n                    const icon = isLifeActive ? targetIcon : skullIcon;\n                    const canTapToLoseLife = isLifeActive && !isEliminated && activeKillers.length > 0;\n                    return React.createElement('button', {\n                        key: `life-ctrl-${p.id}-${i}`,\n                        onClick: ()=>{\n                            if (canTapToLoseLife) handleControllerRemoveLifeForPlayer(p.id);\n                        },\n                        disabled: !canTapToLoseLife,\n                        className: `text-5xl sm:text-6xl p-1.5 rounded transition-transform duration-100 ${canTapToLoseLife ? 'hover:scale-110 active:scale-95 cursor-pointer' : 'cursor-not-allowed'} ${isLifeActive ? isKiller ? 'text-red-300 hover:text-red-200' : 'text-green-400 hover:text-green-300' : 'text-slate-600 opacity-70'}`\n                    }, icon);\n                })));\n            })), React.createElement('button', {\n                onClick: ()=>setControllerView('ACTION_MENU'),\n                className: `${navButtonClass} mt-auto w-full max-w-xs mx-auto`\n            }, \"\\u2190 Back to Actions\"));\n        }\n        return React.createElement('div', {\n            className: \"p-4 text-center bg-slate-800 text-slate-100 h-full flex flex-col justify-center items-center rounded-lg\"\n        }, React.createElement('p', {\n            className: \"text-xl\"\n        }, \"Loading Controller Interface...\"), React.createElement('button', {\n            onClick: ()=>{\n                setControllerView('NUMBER_SELECTION');\n                setActingPlayerId(null);\n            },\n            className: `${navButtonClass} mt-4 w-auto px-6`\n        }, \"Reset View\") // Made reset view button more specific\n        );\n    };\n    // --- 10. Conditional Rendering Based on displayRole ---\n    if (displayRole === 'controller') return renderControllerViewKiller();\n    else return renderMainDisplayViewKiller();\n};\n\n//# sourceMappingURL=DartDisplayV2.1e38df2b.js.map\n","// killer.js - Killer Game Component (Controller Support & Assassin Theme, Main Display Buttons Removed, Enhanced Visibility)\r\n\r\n// Assumes React, GameOverScreen, IconPlaceholder, GAME_MODES are available globally\r\n\r\nconst KillerGame = ({ gameMode, onGameEnd, socket, gameState, clientPlayerId, displayRole }) => {\r\n    // --- Controller Specific State ---\r\n    const [actingPlayerId, setActingPlayerId] = React.useState(null); // For choosing numbers\r\n    const [controllerView, setControllerView] = React.useState('NUMBER_SELECTION'); // Initial view\r\n\r\n    // --- 1. Initial Game State Validation ---\r\n    if (!gameState || typeof gameState !== 'object' || gameState.mode !== 'KILLER' ||\r\n        !Array.isArray(gameState.participants) ||\r\n        !Array.isArray(gameState.KILLER_NUMBERS_TO_CHOOSE_FROM) ||\r\n        typeof gameState.KILLER_LIVES_START !== 'number') {\r\n        console.warn(\"KillerGame: Received incomplete or invalid gameState:\", gameState ? JSON.stringify(gameState).substring(0,300) : \"null\");\r\n        return React.createElement('div', { className: \"p-8 text-center text-yellow-400 animate-pulse font-sans\" }, \"Loading Killer Game...\");\r\n    }\r\n\r\n    // --- 2. Game Over Condition (Main Display & Controller) ---\r\n    // For the main display, show the game over screen if the game is over.\r\n    if (displayRole !== 'controller' && gameState.gameOver && gameState.winner) {\r\n        if (typeof GameOverScreen !== 'undefined') {\r\n            return React.createElement(GameOverScreen, { winner: gameState.winner, onDismiss: () => onGameEnd(false) });\r\n        } else {\r\n            // Fallback if GameOverScreen component is not available\r\n            return React.createElement('div', {className: \"p-8 text-center text-green-400 text-4xl font-sans\"}, `Game Over! Winner: ${gameState.winner?.name || 'Unknown'}`);\r\n        }\r\n    }\r\n    \r\n    // --- 3. Destructure Game State Properties ---\r\n    const { \r\n        participants = [], \r\n        history, \r\n        KILLER_NUMBERS_TO_CHOOSE_FROM = [], \r\n        KILLER_LIVES_START = 3 \r\n    } = gameState;\r\n\r\n    // --- 4. Game Logic Helpers & Derived State ---\r\n    const allNumbersChosen = participants.every(p => p.killer_number !== null);\r\n    const activeKillers = participants.filter(p => p.killer_is_killer && !p.killer_is_eliminated);\r\n    const actingPlayer = actingPlayerId ? participants.find(p => p.id === actingPlayerId) : null;\r\n    // Determine if the undo action is available.\r\n    const canUndo = history && Array.isArray(history) && history.length > 1;\r\n    const getPlayerDisplayName = (participant) => participant?.name || \"UNKNOWN TARGET\";\r\n\r\n    // --- Effect to transition controller view when all numbers are chosen ---\r\n    React.useEffect(() => {\r\n        if (allNumbersChosen && controllerView === 'NUMBER_SELECTION' && !gameState.gameOver) {\r\n            setControllerView('ACTION_MENU');\r\n            setActingPlayerId(null); // Clear acting player after numbers are done\r\n        }\r\n        if (!allNumbersChosen && controllerView !== 'NUMBER_SELECTION' && !gameState.gameOver) {\r\n            // If numbers become un-chosen (e.g. undo), revert to number selection\r\n            setControllerView('NUMBER_SELECTION');\r\n        }\r\n    }, [allNumbersChosen, controllerView, gameState.gameOver]);\r\n\r\n\r\n    // --- 5. Event Handlers ---\r\n    // Handles a player choosing their number (via controller).\r\n    const handleChooseNumberForPlayer = (chosenNumber) => { \r\n        if (socket && actingPlayer && !actingPlayer.killer_is_eliminated && !actingPlayer.killer_number) { \r\n            socket.emit('killerChooseNumber', { playerId: actingPlayer.id, chosenNumber: chosenNumber });\r\n            setActingPlayerId(null); // Return to player selection list\r\n        } else {\r\n            console.warn(\"Controller: Cannot choose number. Conditions not met for acting player.\", {actingPlayerDetails: actingPlayer});\r\n        }\r\n    };\r\n\r\n    // Handles a player becoming a killer (via controller).\r\n    const handlePlayerSpecificBecomeKiller = (playerIdToBecomeKiller) => {\r\n        const player = participants.find(p => p.id === playerIdToBecomeKiller);\r\n        if (socket && player && allNumbersChosen && player.killer_number && \r\n            !player.killer_is_killer && !player.killer_is_eliminated) {\r\n            socket.emit('killerBecomeKiller', { playerId: player.id });\r\n        } else {\r\n            console.warn(\"Controller: Cannot make player a killer. Conditions not met.\", {playerDetails: player, allNumbersChosen});\r\n        }\r\n    };\r\n    \r\n    const CONTROLLER_DEVICE_ACTION_ID = \"CONTROLLER_DEVICE_ACTION\"; // Identifier for actions taken by controller device itself\r\n\r\n    // Handles removing a life from a player (via controller).\r\n    const handleControllerRemoveLifeForPlayer = (targetPlayerId) => {\r\n        if (socket) {\r\n            const target = participants.find(p => p.id === targetPlayerId);\r\n            if (target && !target.killer_is_eliminated && activeKillers.length > 0) { \r\n                console.log(`Controller: Emitting killerRemoveLife for target ${targetPlayerId} from ${CONTROLLER_DEVICE_ACTION_ID} (Killer Phase Mode)`);\r\n                socket.emit('killerRemoveLife', { fromPlayerId: CONTROLLER_DEVICE_ACTION_ID, targetPlayerId: targetPlayerId });\r\n            } else {\r\n                console.warn(\"Controller (Manage Lives): Target invalid, or no active killers.\", {targetPlayerId, targetDetails: target, activeKillersCount: activeKillers.length});\r\n            }\r\n        } else {\r\n            console.warn(\"Controller (Manage Lives): Socket not available.\");\r\n        }\r\n    };\r\n    \r\n    // Handles undo action (via controller).\r\n    const handleUndo = () => { \r\n        if (socket && canUndo) {\r\n            socket.emit('undoLastAction');\r\n            // If undoing makes numbers unchosen, switch controller view back.\r\n            if (controllerView === 'ACTION_MENU' && activeKillers.length === 0 && !allNumbersChosen) {\r\n                 setControllerView('NUMBER_SELECTION'); \r\n            }\r\n        }\r\n    };\r\n\r\n    // Handles ending the game (via controller).\r\n    // This function is kept for potential direct calls, though the button is removed.\r\n    const handleEndGameController = () => {\r\n        if (socket) {\r\n            socket.emit('forceEndGame'); // Inform server to end the game.\r\n        }\r\n        onGameEnd(true); // true indicates a manual end by a player.\r\n    };\r\n\r\n    // --- 6. UI Constants ---\r\n    const assassinIcon = \"🔪\";\r\n    const targetIcon = \"🎯\"; \r\n    const skullIcon = \"💀\";   \r\n\r\n    // --- 7. Main Display View Rendering ---\r\n    const renderMainDisplayViewKiller = () => {\r\n        let mainPromptText = \"OBSERVE THE SHADOWS...\";\r\n        if (!allNumbersChosen) {\r\n            mainPromptText = \"ALL PLAYERS MUST SELECT THEIR MARK!\";\r\n        } else if (activeKillers.length === 0) {\r\n             mainPromptText = \"ALL MARKS CLAIMED. AWAIT THE KILLER PROTOCOL.\";\r\n        } else if (activeKillers.length > 0) {\r\n            const killerNames = activeKillers.map(k => getPlayerDisplayName(k)).join(' & ');\r\n            mainPromptText = React.createElement('span', { className: \"text-red-400 font-bold\" }, `${killerNames.toUpperCase()} ${activeKillers.length > 1 ? \"ARE\" : \"IS\"} THE KILLER.`);\r\n        }\r\n        if (gameState.gameOver && gameState.winner) { \r\n            mainPromptText = React.createElement('span', { className: \"text-green-400 font-bold\" }, `GAME OVER! WINNER: ${getPlayerDisplayName(gameState.winner)}`);\r\n        }\r\n\r\n        const useLargeScale = participants.length <= 4; \r\n        const basePlayerNameSize = \"text-7xl\";\r\n        const basePlayerStatusSize = \"text-6xl\";\r\n        const baseLifeIconSize = \"text-[10rem]\"; \r\n        const basePlayerNumberSize = \"text-[12rem]\"; \r\n        const baseQuestionMarkSize = \"text-8xl\";\r\n        const baseCardPaddingVertical = \"py-10\"; \r\n        const baseCardPaddingHorizontal = \"px-4\";\r\n        const baseNameMarginBottom = \"mb-6\";\r\n        const baseLivesNumberMarginTop = \"mt-6\";\r\n        const baseLivesSpacing = \"space-x-4\";\r\n        const smallerPlayerNameSize = \"text-5xl\";\r\n        const smallerPlayerStatusSize = \"text-4xl\";\r\n        const smallerLifeIconSize = \"text-[7rem]\";\r\n        const smallerPlayerNumberSize = \"text-[9rem]\";\r\n        const smallerQuestionMarkSize = \"text-6xl\";\r\n        const smallerCardPaddingVertical = \"py-8\";\r\n        const smallerCardPaddingHorizontal = \"px-3\";\r\n        const smallerNameMarginBottom = \"mb-4\";\r\n        const smallerLivesNumberMarginTop = \"mt-4\";\r\n        const smallerLivesSpacing = \"space-x-3\";\r\n        const cardPadding = `${useLargeScale ? baseCardPaddingHorizontal : smallerCardPaddingHorizontal} ${useLargeScale ? baseCardPaddingVertical : smallerCardPaddingVertical}`;\r\n        const playerNameSize = useLargeScale ? basePlayerNameSize : smallerPlayerNameSize;\r\n        const playerStatusSize = useLargeScale ? basePlayerStatusSize : smallerPlayerStatusSize;\r\n        const lifeIconSize = useLargeScale ? baseLifeIconSize : smallerLifeIconSize;\r\n        const playerNumberSize = useLargeScale ? basePlayerNumberSize : smallerPlayerNumberSize;\r\n        const questionMarkSize = useLargeScale ? baseQuestionMarkSize : smallerQuestionMarkSize;\r\n        const nameMarginBottom = useLargeScale ? baseNameMarginBottom : smallerNameMarginBottom;\r\n        const livesNumberMarginTop = useLargeScale ? baseLivesNumberMarginTop : smallerLivesNumberMarginTop;\r\n        const livesSpacing = useLargeScale ? baseLivesSpacing : smallerLivesSpacing;\r\n        const cardMinHeight = useLargeScale ? \"min-h-[28rem]\" : \"min-h-[22rem]\";\r\n\r\n        return (\r\n            React.createElement('div', { className: \"killer-game-area container mx-auto px-1 sm:px-2 py-4 text-white flex flex-col items-center h-screen bg-slate-900 font-sans\" },\r\n                React.createElement('h2', { className: \"text-6xl md:text-7xl font-black game-title-font text-red-500 text-center mb-4 sm:mb-6\" }, \r\n                    (typeof GAME_MODES !== 'undefined' && GAME_MODES.KILLER) ? GAME_MODES.KILLER.name : (gameMode?.name || \"Killer\")\r\n                ),\r\n                React.createElement('p', { className: \"text-2xl md:text-3xl text-gray-300 mb-6 md:mb-8 text-center min-h-[3.5rem]\" }, \r\n                    mainPromptText\r\n                ),\r\n                React.createElement('div', { className: `w-full max-w-full space-y-5 md:space-y-6 flex-grow overflow-y-auto custom-scrollbar pb-4`}, \r\n                    participants.map((p_target) => { \r\n                        const isAssassin = p_target.killer_is_killer && !p_target.killer_is_eliminated;\r\n                        const isEliminated = p_target.killer_is_eliminated;\r\n                        const cardBaseClasses = `killer-player-card ${cardPadding} ${cardMinHeight} rounded-xl transition-all duration-300 ease-in-out relative overflow-hidden shadow-lg flex flex-col justify-around`; \r\n                        const assassinCardClasses = isAssassin ? \"bg-gradient-to-br from-red-700 via-red-800 to-red-900 ring-4 ring-offset-2 ring-offset-red-800 ring-red-500 shadow-xl shadow-red-600/50\" : \"bg-slate-800 border-2 border-slate-700 hover:border-slate-600\";\r\n                        const eliminatedCardClasses = isEliminated ? \"opacity-40 filter grayscale\" : \"\"; \r\n                        const nameColor = isAssassin ? \"text-red-100\" : (isEliminated ? \"text-slate-500\" : \"text-slate-100\"); \r\n                        const numberColor = isAssassin ? \"text-red-200\" : (isEliminated ? \"text-slate-600\" : \"text-sky-300\");\r\n                        let playerStatusText = \"TARGET\";\r\n                        let playerStatusColor = \"text-sky-400\"; \r\n                        if (isEliminated) {\r\n                            playerStatusText = \"ELIMINATED\";\r\n                            playerStatusColor = \"text-slate-500\";\r\n                        } else if (isAssassin) {\r\n                            playerStatusText = \"KILLER\";\r\n                            playerStatusColor = \"text-red-400\"; \r\n                        }\r\n                        const eliminatedStampClasses = isEliminated \r\n                            ? `absolute inset-0 flex items-center justify-center text-red-600 ${useLargeScale ? 'text-8xl sm:text-9xl' : 'text-7xl sm:text-8xl'} font-black tracking-wider opacity-70 transform -rotate-12 pointer-events-none z-10` \r\n                            : \"hidden\";\r\n                        \r\n                        return ( \r\n                            React.createElement('div', { key: p_target.id,\r\n                                 className: `${cardBaseClasses} ${assassinCardClasses} ${eliminatedCardClasses}`},\r\n                                React.createElement('div', {className: eliminatedStampClasses, style: { textShadow: '2px 2px 4px rgba(0,0,0,0.5)' }}, \"ELIMINATED\"),\r\n                                React.createElement('div', {className: `relative z-0 flex flex-col ${isEliminated ? 'pointer-events-none' : ''}`}, \r\n                                    React.createElement('div', { className: `flex items-baseline justify-start w-full ${nameMarginBottom}` }, \r\n                                        React.createElement('h3', { className: `font-bold ${nameColor} ${playerNameSize} mr-8 leading-none` }, \r\n                                            getPlayerDisplayName(p_target)\r\n                                        ),\r\n                                        !isEliminated && React.createElement('p', { className: `${playerStatusColor} ${playerStatusSize} leading-none` }, \r\n                                            isAssassin ? React.createElement('span', { className: \"mr-1\" }, assassinIcon) : null,\r\n                                            playerStatusText\r\n                                        )\r\n                                    ),\r\n                                    React.createElement('div', { className: `flex items-center w-full ${livesNumberMarginTop}` }, \r\n                                        React.createElement('div', { className: \"w-3/5 flex justify-center items-center\" }, \r\n                                            React.createElement('div', {className: `flex items-center ${livesSpacing}`}, \r\n                                                [...Array(KILLER_LIVES_START)].map((_, i) => {\r\n                                                    const lifeLost = i < (KILLER_LIVES_START - (p_target.killer_lives || 0));\r\n                                                    const currentIcon = lifeLost ? skullIcon : targetIcon; \r\n                                                    return (\r\n                                                        React.createElement('span', {\r\n                                                            key: `life-${p_target.id}-${i}`,\r\n                                                            className: `${lifeIconSize} ${lifeLost ? 'text-slate-600 opacity-70' : (isAssassin ? 'text-red-300 animate-pulse' : 'text-green-400')}` \r\n                                                        }, currentIcon)\r\n                                                    );\r\n                                                })\r\n                                            )\r\n                                        ),\r\n                                        !isEliminated && React.createElement('div', { className: \"w-2/5 flex justify-center items-center\" }, \r\n                                            React.createElement('p', { \r\n                                                className: `font-black leading-none ${numberColor} ${playerNumberSize}` \r\n                                            },\r\n                                                p_target.killer_number || React.createElement('span', {className: `text-slate-500 ${questionMarkSize}`}, \"?\") \r\n                                            )\r\n                                        )\r\n                                    )\r\n                                )\r\n                            )\r\n                        );\r\n                    })\r\n                )\r\n            )\r\n        );\r\n    };\r\n\r\n\r\n    // --- 8. Controller View Rendering Function ---\r\n    const renderControllerViewKiller = () => {\r\n        // MODIFIED: Button Styles for consistency and touch-friendliness\r\n        const largeButtonBase = \"w-full text-xl font-bold rounded-lg shadow-md my-2 transition-transform hover:scale-105 active:scale-95 flex items-center justify-center text-center leading-tight disabled:opacity-50 disabled:cursor-not-allowed\";\r\n        const playerListButtonClass = `${largeButtonBase} py-5 bg-sky-600 hover:bg-sky-500 text-white`;\r\n        const actionButtonClass = `${largeButtonBase} py-5 bg-green-600 hover:bg-green-500 text-white`;\r\n        const destructiveButtonClass = `${largeButtonBase} py-4 text-lg bg-red-600 hover:bg-red-500 text-white`; // For Make Killer\r\n        const navButtonClass = `${largeButtonBase} py-3 text-lg bg-blue-600 hover:bg-blue-500 text-white`;\r\n        const undoButtonClass = `${largeButtonBase} py-4 text-lg bg-yellow-500 hover:bg-yellow-600 text-black`;\r\n        \r\n        const numberChoiceButtonClass = \"aspect-square text-3xl rounded-lg font-bold transition-all p-2 shadow-lg hover:scale-105 active:scale-95 flex items-center justify-center\"; // Made larger and square\r\n\r\n        const titleClass = \"text-2xl md:text-3xl game-title-font text-yellow-300 font-semibold text-center mb-2 leading-tight\";\r\n        const subTitleClass = \"text-base md:text-lg text-center text-slate-300 mb-3\";\r\n        \r\n        if (gameState.gameOver){\r\n             return React.createElement('div', { className: \"flex flex-col items-center justify-center h-full p-3 text-center bg-slate-800 text-slate-100 font-sans rounded-lg\" }, \r\n                React.createElement('h3', { className: `${titleClass} text-red-400` }, \"GAME OVER\"),\r\n                gameState.winner && React.createElement('p', {className: `${subTitleClass} text-xl mt-1`}, `Winner: ${getPlayerDisplayName(gameState.winner)}`),\r\n                React.createElement('button', {\r\n                    onClick: () => onGameEnd(false), \r\n                    className: `${largeButtonBase} py-4 bg-slate-500 hover:bg-slate-600 mt-4`\r\n                }, \"Close Controller\")\r\n            );\r\n        }\r\n\r\n        if (controllerView === 'NUMBER_SELECTION') {\r\n            if (!actingPlayer) { \r\n                return React.createElement('div', { className: \"flex flex-col h-full p-3 space-y-2 bg-slate-800 text-slate-100 font-sans rounded-lg\" }, \r\n                    React.createElement('h3', { className: titleClass }, \"Choose Player's Mark\"),\r\n                    React.createElement('p', { className: subTitleClass }, \"Select a player to choose their number.\"),\r\n                    React.createElement('div', {className: \"w-full max-w-sm mx-auto flex-grow overflow-y-auto custom-scrollbar pr-1\"},\r\n                        participants.map(p => {\r\n                            if (p.killer_number) { \r\n                                return React.createElement('div', { key: p.id, className: `${playerListButtonClass} opacity-70 flex justify-between items-center`},\r\n                                    React.createElement('span', null, getPlayerDisplayName(p)),\r\n                                    React.createElement('span', {className: \"text-2xl font-black ml-2\"}, p.killer_number)\r\n                                );\r\n                            }\r\n                            return React.createElement('button', {\r\n                                key: p.id, onClick: () => setActingPlayerId(p.id),\r\n                                className: playerListButtonClass,\r\n                                disabled: p.killer_is_eliminated\r\n                            }, getPlayerDisplayName(p), p.killer_is_eliminated ? \" (Eliminated)\" : \"\");\r\n                        })\r\n                    ),\r\n                    canUndo && React.createElement('button', { onClick: handleUndo, className: `${undoButtonClass} mt-auto`}, \"↩️ Undo\")\r\n                    // REMOVED: End Game button\r\n                );\r\n            } else { \r\n                return React.createElement('div', { className: \"flex flex-col h-full p-2 bg-slate-800 text-slate-100 font-sans rounded-lg\" }, \r\n                    React.createElement('h3', { className: titleClass }, `Set Mark for ${getPlayerDisplayName(actingPlayer)}`),\r\n                    React.createElement('div', { className: \"grid grid-cols-5 gap-2 my-auto w-full max-w-xs mx-auto\" }, // Increased gap\r\n                        KILLER_NUMBERS_TO_CHOOSE_FROM.map(num => {\r\n                            const isTakenByOther = participants.some(p => p.id !== actingPlayerId && p.killer_number === num);\r\n                            return React.createElement('button', {\r\n                                key: num, onClick: () => handleChooseNumberForPlayer(num),\r\n                                disabled: isTakenByOther,\r\n                                className: `${numberChoiceButtonClass} ${isTakenByOther ? 'bg-slate-700 text-slate-500 cursor-not-allowed opacity-60' : 'bg-sky-600 hover:bg-sky-500 text-white'}`\r\n                            }, num);\r\n                        })\r\n                    ),\r\n                    React.createElement('button', { onClick: () => setActingPlayerId(null), className: `${navButtonClass} mt-2`}, \"← Back to Player List\")\r\n                );\r\n            }\r\n        }\r\n\r\n        if (controllerView === 'ACTION_MENU') {\r\n            return React.createElement('div', { className: \"flex flex-col items-center justify-center h-full p-3 space-y-3 bg-slate-800 text-slate-100 font-sans rounded-lg\" }, \r\n                React.createElement('h3', { className: titleClass }, \"Killer Actions\"),\r\n                React.createElement('div', {className: \"w-full max-w-sm space-y-3\"},\r\n                    React.createElement('button', { onClick: () => setControllerView('BECOME_KILLER_SELECTION'), className: actionButtonClass }, assassinIcon + \" Designate Killers\"),\r\n                    React.createElement('button', { \r\n                        onClick: () => setControllerView('MANAGE_LIVES'), \r\n                        className: actionButtonClass,\r\n                        disabled: activeKillers.length === 0 \r\n                    }, targetIcon + \" Manage Lives\", activeKillers.length === 0 ? \" (No Killers Yet)\" : \"\"),\r\n                    canUndo && React.createElement('button', { onClick: handleUndo, className: undoButtonClass}, \"↩️ Undo Last Action\")\r\n                    // REMOVED: End Game button\r\n                )\r\n            );\r\n        }\r\n        \r\n        if (controllerView === 'BECOME_KILLER_SELECTION') {\r\n            return React.createElement('div', { className: \"flex flex-col h-full p-2 bg-slate-800 text-slate-100 font-sans overflow-y-auto custom-scrollbar rounded-lg\" }, \r\n                React.createElement('h3', { className: titleClass }, \"Designate Killers\"),\r\n                React.createElement('div', { className: \"space-y-2 flex-grow mb-2 w-full max-w-md mx-auto\" },\r\n                    participants.map(p => {\r\n                        const canBecomeKiller = p.killer_number && !p.killer_is_killer && !p.killer_is_eliminated;\r\n                        return React.createElement('div', {key: p.id, className: `p-3 rounded-lg shadow flex justify-between items-center ${p.killer_is_killer ? 'bg-red-800/60' : 'bg-slate-700'}`}, \r\n                            React.createElement('span', {className: `text-lg ${p.killer_is_killer ? 'text-red-200 font-bold' : 'text-slate-100'}`}, \r\n                                getPlayerDisplayName(p), \r\n                                p.killer_is_killer ? ` ${assassinIcon} IS KILLER` : (p.killer_is_eliminated ? \" (Eliminated)\" : ` (#${p.killer_number || '?'})`)\r\n                            ),\r\n                            canBecomeKiller && React.createElement('button', {\r\n                                onClick: () => handlePlayerSpecificBecomeKiller(p.id),\r\n                                className: `${destructiveButtonClass} text-sm py-2 px-4 ml-2` // Adjusted padding\r\n                            }, \"Make Killer\")\r\n                        );\r\n                    })\r\n                ),\r\n                React.createElement('button', { onClick: () => setControllerView('ACTION_MENU'), className: `${navButtonClass} mt-auto w-full max-w-xs mx-auto`}, \"← Back to Actions\")\r\n            );\r\n        }\r\n\r\n        if (controllerView === 'MANAGE_LIVES') {\r\n            if (activeKillers.length === 0 && !gameState.gameOver) { \r\n                 setControllerView('ACTION_MENU'); \r\n                 return React.createElement('div', {className: \"p-4 text-center bg-slate-800 text-slate-100 font-sans rounded-lg\"}, \"No active killers. Returning to menu...\"); \r\n            }\r\n            return React.createElement('div', { className: \"flex flex-col h-full p-2 bg-slate-800 text-slate-100 font-sans overflow-y-auto custom-scrollbar rounded-lg\" }, \r\n                React.createElement('h3', { className: titleClass }, \"Manage Player Lives\"),\r\n                React.createElement('p', { className: subTitleClass }, \"Tap a life (🎯) to remove it. Killers can attack anyone.\"),\r\n                React.createElement('div', { className: \"space-y-2 flex-grow mb-2 w-full max-w-md mx-auto\" },\r\n                    participants.map(p => {\r\n                        const isEliminated = p.killer_is_eliminated;\r\n                        const isKiller = p.killer_is_killer && !isEliminated;\r\n                        const currentLives = typeof p.killer_lives === 'number' ? p.killer_lives : KILLER_LIVES_START;\r\n\r\n                        return React.createElement('div', { \r\n                            key: p.id, \r\n                            className: `p-3 rounded-lg shadow ${isEliminated ? 'bg-slate-700 opacity-60' : (isKiller ? 'bg-red-900/50 border border-red-700' : 'bg-slate-700 border border-slate-600')}` \r\n                        },\r\n                            React.createElement('p', { \r\n                                className: `text-xl font-semibold mb-1.5 ${isEliminated ? 'text-slate-400 line-through' : (isKiller ? 'text-red-300' : 'text-sky-300')}` \r\n                            }, \r\n                                getPlayerDisplayName(p) + (isKiller ? ` ${assassinIcon}` : \"\") + (isEliminated ? \" (💀 ELIMINATED)\" : ` (#${p.killer_number})`)\r\n                            ),\r\n                            !isEliminated && React.createElement('div', { className: \"flex justify-center items-center space-x-2 sm:space-x-3 mt-2\" }, // Increased spacing\r\n                                [...Array(KILLER_LIVES_START)].map((_, i) => {\r\n                                    const isLifeActive = i < currentLives; \r\n                                    const icon = isLifeActive ? targetIcon : skullIcon;\r\n                                    const canTapToLoseLife = isLifeActive && !isEliminated && activeKillers.length > 0;\r\n\r\n                                    return React.createElement('button', {\r\n                                        key: `life-ctrl-${p.id}-${i}`,\r\n                                        onClick: () => { if(canTapToLoseLife) handleControllerRemoveLifeForPlayer(p.id); },\r\n                                        disabled: !canTapToLoseLife,\r\n                                        className: `text-5xl sm:text-6xl p-1.5 rounded transition-transform duration-100 ${ // Increased size and padding\r\n                                            canTapToLoseLife ? 'hover:scale-110 active:scale-95 cursor-pointer' : 'cursor-not-allowed'\r\n                                        } ${isLifeActive ? (isKiller ? 'text-red-300 hover:text-red-200' : 'text-green-400 hover:text-green-300') : 'text-slate-600 opacity-70'}`\r\n                                    }, icon);\r\n                                })\r\n                            )\r\n                        );\r\n                    })\r\n                ),\r\n                React.createElement('button', { onClick: () => setControllerView('ACTION_MENU'), className: `${navButtonClass} mt-auto w-full max-w-xs mx-auto`}, \"← Back to Actions\")\r\n            );\r\n        }\r\n        \r\n        return React.createElement('div', {className: \"p-4 text-center bg-slate-800 text-slate-100 h-full flex flex-col justify-center items-center rounded-lg\"}, \r\n             React.createElement('p', {className: \"text-xl\"}, \"Loading Controller Interface...\"),\r\n             React.createElement('button', {onClick: () => { setControllerView('NUMBER_SELECTION'); setActingPlayerId(null);}, className: `${navButtonClass} mt-4 w-auto px-6`}, \"Reset View\") // Made reset view button more specific\r\n        );\r\n    };\r\n\r\n    // --- 10. Conditional Rendering Based on displayRole ---\r\n    if (displayRole === 'controller') {\r\n        return renderControllerViewKiller();\r\n    } else {\r\n        return renderMainDisplayViewKiller(); \r\n    }\r\n};\r\n"],"names":["KillerGame","gameMode","onGameEnd","socket","gameState","clientPlayerId","displayRole","actingPlayerId","setActingPlayerId","React","useState","controllerView","setControllerView","mode","Array","isArray","participants","KILLER_NUMBERS_TO_CHOOSE_FROM","KILLER_LIVES_START","console","warn","JSON","stringify","substring","createElement","className","gameOver","winner","GameOverScreen","onDismiss","name","history","allNumbersChosen","every","p","killer_number","activeKillers","filter","killer_is_killer","killer_is_eliminated","actingPlayer","find","id","canUndo","length","getPlayerDisplayName","participant","useEffect","handleChooseNumberForPlayer","chosenNumber","emit","playerId","actingPlayerDetails","handlePlayerSpecificBecomeKiller","playerIdToBecomeKiller","player","playerDetails","CONTROLLER_DEVICE_ACTION_ID","handleControllerRemoveLifeForPlayer","targetPlayerId","target","log","fromPlayerId","targetDetails","activeKillersCount","handleUndo","assassinIcon","targetIcon","skullIcon","renderControllerViewKiller","largeButtonBase","playerListButtonClass","actionButtonClass","destructiveButtonClass","navButtonClass","undoButtonClass","titleClass","subTitleClass","onClick","map","key","disabled","num","isTakenByOther","some","canBecomeKiller","isEliminated","isKiller","currentLives","killer_lives","_","i","isLifeActive","canTapToLoseLife","renderMainDisplayViewKiller","mainPromptText","killerNames","k","join","toUpperCase","useLargeScale","cardPadding","playerNameSize","playerStatusSize","lifeIconSize","playerNumberSize","questionMarkSize","nameMarginBottom","livesNumberMarginTop","livesSpacing","cardMinHeight","GAME_MODES","KILLER","p_target","isAssassin","cardBaseClasses","playerStatusText","playerStatusColor","eliminatedStampClasses","style","textShadow","lifeLost"],"version":3,"file":"DartDisplayV2.1e38df2b.js.map"}