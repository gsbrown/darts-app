{"mappings":"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","sources":["<anon>","golf.js"],"sourcesContent":["// golf.js - Golf Game Component (Enhanced UI, Controller Support, Main Display Buttons Removed)\n// Ensure React, Keypad, GameOverScreen, IconPlaceholder are available globally\nconst GolfGame = ({ gameMode, onGameEnd, socket, gameState, displayRole })=>{\n    // --- 1. Initial Game State Validation ---\n    if (!gameState || typeof gameState !== 'object' || gameState.mode !== 'GOLF' || !Array.isArray(gameState.participants) || typeof gameState.currentHole !== 'number') {\n        console.error(\"GolfGame: Invalid or incomplete gameState\", gameState);\n        return React.createElement('div', {\n            className: \"p-8 text-center text-red-500 text-2xl font-sans\"\n        }, \"Loading Golf Game State or Invalid State...\");\n    }\n    // --- 2. Game Over Condition ---\n    // For the main display, show the game over screen if the game is over.\n    if (displayRole !== 'controller' && gameState.gameOver && gameState.winner) {\n        if (typeof GameOverScreen !== 'undefined') return React.createElement(GameOverScreen, {\n            winner: gameState.winner,\n            onDismiss: ()=>onGameEnd(false)\n        });\n        else {\n            // Fallback if GameOverScreen component is not available\n            console.warn(\"GameOverScreen component not available to GolfGame for main display.\");\n            return React.createElement('div', {\n                className: \"p-8 text-center text-green-400 text-4xl font-sans\"\n            }, `Game Over! Winner: ${gameState.winner.name}`);\n        }\n    }\n    // --- 3. Destructure Game State Properties ---\n    const { participants = [], currentHole, numHoles = 18, golfTurnOrder = [], golfCurrentTurnOrderIndex = 0, promptForGolfScore, showKeypadForGolf, golfHonorsHolderIndex, history } = gameState;\n    const PAR_FOR_HOLE = 3; // Standard par for a hole in darts golf\n    // --- 4. Current Player and Undo Logic ---\n    const currentOverallParticipantIndex = golfTurnOrder[golfCurrentTurnOrderIndex];\n    const currentParticipant = participants[currentOverallParticipantIndex];\n    // Undo is possible if not actively showing keypad, and history exists.\n    const canUndo = history && Array.isArray(history) && history.length > 1 && !showKeypadForGolf;\n    // --- 5. Helper Functions ---\n    // Generates the display name for a participant.\n    // For controller, it can specify the team member if it's their turn.\n    const getPlayerDisplayName = (participant, forController = false)=>{\n        if (!participant || typeof participant.name !== 'string') return \"Unknown\";\n        let name = participant.name;\n        // For controller, show specific team player if it's their turn to be prompted or for keypad title\n        if (forController && participant.type === 'team' && participant.players && currentParticipant && participant.id === currentParticipant.id) {\n            let teamPlayerOrderIndex = -1;\n            if (promptForGolfScore && promptForGolfScore.participantIndex === currentOverallParticipantIndex) teamPlayerOrderIndex = promptForGolfScore.playerInTeamOrderIndex;\n            else if (showKeypadForGolf && showKeypadForGolf.participantIndex === currentOverallParticipantIndex) teamPlayerOrderIndex = showKeypadForGolf.playerInTeamOrderIndex;\n            if (teamPlayerOrderIndex !== -1 && participant.players[teamPlayerOrderIndex]) {\n                const teamPlayerName = participant.players[teamPlayerOrderIndex];\n                name = `${participant.name} (${teamPlayerName})`;\n            } else if (teamPlayerOrderIndex !== -1) name = `${participant.name} (Player ${teamPlayerOrderIndex + 1})`;\n        }\n        return name;\n    };\n    // Gets the order of team players for display on the main scorecard.\n    // Rotates the order so the current shooter for the hole is listed first.\n    const getTeamPlayerOrderForDisplay = (participant)=>{\n        if (!participant || participant.type !== 'team' || !Array.isArray(participant.players) || participant.players.length === 0) return [];\n        const currentTeamPlayerIndex = participant.golfCurrentPlayerInTeamDisplayIndex !== undefined ? participant.golfCurrentPlayerInTeamDisplayIndex : 0;\n        let orderedPlayers = [\n            ...participant.golfPlayerOrderInternal || participant.players\n        ];\n        const rotatedOrder = [\n            ...orderedPlayers.slice(currentTeamPlayerIndex),\n            ...orderedPlayers.slice(0, currentTeamPlayerIndex)\n        ];\n        return rotatedOrder;\n    };\n    // Calculates the subtotal score for a range of holes (e.g., front 9 or back 9).\n    const getHoleSubtotal = (scores, startHole, endHole)=>{\n        let subtotal = 0;\n        if (scores && Array.isArray(scores)) {\n            for(let i = startHole - 1; i < endHole && i < scores.length; i++)if (scores[i] !== null && typeof scores[i] === 'number') subtotal += scores[i];\n        }\n        return subtotal;\n    };\n    // --- 6. Event Handlers ---\n    // Handles click to enter score (typically from controller).\n    const handleEnterScoreClick = ()=>{\n        if (socket && currentParticipant && promptForGolfScore && promptForGolfScore.participantIndex === currentOverallParticipantIndex) socket.emit('golfRequestScoreEntry');\n    };\n    // Handles score submission from keypad (typically from controller).\n    const handleKeypadSubmit = (score)=>{\n        if (socket && currentParticipant && showKeypadForGolf && showKeypadForGolf.participantIndex === currentOverallParticipantIndex) {\n            const numericScore = parseInt(score, 10);\n            // Score must be between 1 and 6.\n            if (!isNaN(numericScore) && numericScore >= 1 && numericScore <= 6) socket.emit('golfSubmitScore', {\n                score: numericScore\n            });\n            else {\n                console.error(\"Invalid score for Golf. Please enter a number between 1 and 6.\");\n                // Alert for controller if score is invalid.\n                if (displayRole === 'controller' && typeof alert === 'function') // Using a more robust way to show messages in controller if alert is not ideal\n                // For now, sticking to alert as per original, but a custom modal would be better.\n                alert(\"Score must be 1-6.\");\n            }\n        }\n    };\n    // Handles keypad cancellation (typically from controller).\n    const handleKeypadCancel = ()=>{\n        if (socket && showKeypadForGolf) socket.emit('golfCancelScoreEntry');\n    };\n    // Handles undo action (typically from controller).\n    const handleUndo = ()=>{\n        if (socket && canUndo) socket.emit('undoLastAction');\n    };\n    // Handles ending the game (typically from controller).\n    const handleEndGameController = ()=>{\n        if (socket) socket.emit('forceEndGame'); // Inform server to end the game.\n        onGameEnd(true); // true indicates a manual end by a player.\n    };\n    // --- 7. UI Configuration & Dynamic Sizing (Main Display) ---\n    // Variables for dynamic font sizes and padding, adjusted based on the number of players.\n    const numActivePlayers = participants.length;\n    let titleFontSize, holeInfoFontSize, turnIndicatorFontSize, scoreCellFontSize, totalCellFontSize, playerNameFontSize, teamPlayerListFontSize, headerFontSize, holeNumberHeaderFontSize, /* bottomButtonFontSize, // Removed as buttons are gone from main display */ cellPaddingY, cellPaddingX, honorsEmojiSize, scoreIconSize, turnIndicatorSectionPadding;\n    // Apply different styles based on the number of active players to optimize layout.\n    if (numActivePlayers <= 2) {\n        titleFontSize = \"text-6xl xl:text-7xl\";\n        holeInfoFontSize = \"text-4xl xl:text-5xl\";\n        turnIndicatorFontSize = \"text-3xl xl:text-4xl\";\n        scoreCellFontSize = \"text-7xl xl:text-8xl\";\n        totalCellFontSize = \"text-8xl xl:text-9xl font-bold\";\n        playerNameFontSize = \"text-4xl xl:text-5xl font-bold\";\n        teamPlayerListFontSize = \"text-3xl xl:text-4xl\";\n        headerFontSize = \"text-3xl xl:text-4xl font-bold\";\n        holeNumberHeaderFontSize = \"text-2xl xl:text-3xl\"; /* bottomButtonFontSize = \"text-xl\"; */ \n        cellPaddingY = \"py-4 sm:py-5\";\n        cellPaddingX = \"px-2 sm:px-3\";\n        honorsEmojiSize = \"text-4xl\";\n        scoreIconSize = \"text-4xl\";\n        turnIndicatorSectionPadding = \"p-4 md:p-5\";\n    } else if (numActivePlayers <= 4) {\n        titleFontSize = \"text-5xl xl:text-6xl\";\n        holeInfoFontSize = \"text-3xl xl:text-4xl\";\n        turnIndicatorFontSize = \"text-2xl xl:text-3xl\";\n        scoreCellFontSize = \"text-6xl xl:text-7xl\";\n        totalCellFontSize = \"text-6xl xl:text-7xl font-bold\";\n        playerNameFontSize = \"text-3xl xl:text-4xl font-bold\";\n        teamPlayerListFontSize = \"text-2xl xl:text-3xl\";\n        headerFontSize = \"text-2xl xl:text-3xl font-bold\";\n        holeNumberHeaderFontSize = \"text-xl xl:text-2xl\"; /* bottomButtonFontSize = \"text-lg\"; */ \n        cellPaddingY = \"py-3 sm:py-4\";\n        cellPaddingX = \"px-1 sm:px-2\";\n        honorsEmojiSize = \"text-3xl\";\n        scoreIconSize = \"text-3xl\";\n        turnIndicatorSectionPadding = \"p-3 md:p-4\";\n    } else {\n        titleFontSize = \"text-4xl xl:text-5xl\";\n        holeInfoFontSize = \"text-2xl xl:text-3xl\";\n        turnIndicatorFontSize = \"text-xl xl:text-2xl\";\n        scoreCellFontSize = \"text-5xl xl:text-6xl\";\n        totalCellFontSize = \"text-5xl xl:text-6xl font-bold\";\n        playerNameFontSize = \"text-2xl xl:text-3xl font-bold\";\n        teamPlayerListFontSize = \"text-xl xl:text-2xl\";\n        headerFontSize = \"text-xl xl:text-2xl font-bold\";\n        holeNumberHeaderFontSize = \"text-lg xl:text-xl\"; /* bottomButtonFontSize = \"text-base\"; */ \n        cellPaddingY = \"py-2 sm:py-3\";\n        cellPaddingX = \"px-1 sm:px-1.5\";\n        honorsEmojiSize = \"text-2xl\";\n        scoreIconSize = \"text-2xl\";\n        turnIndicatorSectionPadding = \"p-2 sm:p-3\";\n    }\n    const cellBorderClass = \"border border-gray-600\";\n    // --- 8. Main Display View Rendering Function ---\n    const renderMainDisplayViewGolf = ()=>{\n        return React.createElement('div', {\n            className: \"golf-game-area w-full px-1 py-2 flex flex-col h-screen bg-slate-900 text-slate-100 font-sans\"\n        }, // Game Title\n        React.createElement('h2', {\n            className: `${titleFontSize} font-black game-title-font text-green-400 text-center mb-1 sm:mb-2 shrink-0 flex items-center justify-center`\n        }, React.createElement('span', {\n            className: \"mr-3 text-5xl\"\n        }, \"\\u26F3\"), gameMode?.name || \"Golf\", React.createElement('span', {\n            className: \"ml-3 text-5xl\"\n        }, \"\\uD83C\\uDFCC\\uFE0F\")), // Current Hole Information\n        React.createElement('h3', {\n            className: `${holeInfoFontSize} font-bold text-sky-300 text-center mb-2 sm:mb-3 shrink-0`\n        }, `Hole ${currentHole} `, React.createElement('span', {\n            className: \"text-3xl sm:text-4xl text-sky-500\"\n        }, `/ ${numHoles}`)), // Turn Indicator (On the tee)\n        currentParticipant && !gameState.gameOver && React.createElement('div', {\n            className: `flex flex-row items-center justify-between mb-2 sm:mb-3 ${turnIndicatorSectionPadding} bg-gradient-to-r from-blue-700 via-indigo-600 to-blue-700 rounded-xl shadow-2xl shrink-0 ring-2 ring-yellow-300`\n        }, React.createElement('p', {\n            className: `${turnIndicatorFontSize} text-white flex items-center`\n        }, currentOverallParticipantIndex === golfHonorsHolderIndex && React.createElement('span', {\n            className: `mr-2 ${honorsEmojiSize} animate-pulse text-yellow-300`\n        }, \"\\uD83C\\uDFC6\"), React.createElement('span', {\n            className: \"mr-2 text-3xl\"\n        }, \"\\u26F3\\uFE0F\"), React.createElement('span', {\n            className: \"font-semibold\"\n        }, \"On the tee: \"), React.createElement('span', {\n            className: `ml-2 font-bold ${currentOverallParticipantIndex === golfHonorsHolderIndex ? 'text-yellow-300' : 'text-lime-300'}`\n        }, getPlayerDisplayName(currentParticipant)))), // Player Scorecards Area\n        React.createElement('div', {\n            className: \"flex-grow overflow-auto custom-scrollbar pb-4\"\n        }, participants.map((p, pIdx)=>{\n            const outScore = getHoleSubtotal(p.golfScores, 1, 9);\n            const inScore = getHoleSubtotal(p.golfScores, 10, 18);\n            const isCurrentTurnOverall = pIdx === currentOverallParticipantIndex;\n            const hasHonorsCurrentTurn = pIdx === golfHonorsHolderIndex && !gameState.gameOver;\n            // Card styling based on current turn and honors.\n            let cardBg = 'bg-slate-800';\n            let cardRing = '';\n            let cardShadow = 'shadow-xl';\n            if (isCurrentTurnOverall && !gameState.gameOver) {\n                cardBg = 'bg-sky-700';\n                cardRing = 'ring-4 ring-yellow-400';\n                cardShadow = 'shadow-yellow-400/40 shadow-2xl';\n            }\n            const teamPlayersDisplay = getTeamPlayerOrderForDisplay(p);\n            return React.createElement('div', {\n                key: p.id || pIdx,\n                className: `participant-scorecard-block ${cardBg} ${cardRing} ${cardShadow} rounded-xl mb-3 sm:mb-4 p-3 sm:p-4 ${cellBorderClass} transition-all duration-300`\n            }, // Player Name and Team Members (if applicable)\n            React.createElement('div', {\n                className: `mb-2 ${playerNameFontSize} ${hasHonorsCurrentTurn ? 'text-yellow-300' : 'text-white'} flex items-center`\n            }, hasHonorsCurrentTurn && React.createElement('span', {\n                className: `mr-2 ${honorsEmojiSize} animate-bounce`\n            }, \"\\uD83C\\uDFC6\"), getPlayerDisplayName(p), p.type === 'team' && teamPlayersDisplay.length > 0 && React.createElement('div', {\n                className: `${teamPlayerListFontSize} text-gray-400 ml-3 mt-1`\n            }, teamPlayersDisplay.map((playerName, playerIdx_display)=>React.createElement('span', {\n                    key: `${p.id}-playerdisplay-${playerIdx_display}`,\n                    className: `block ${playerIdx_display === 0 ? 'font-semibold text-sky-300' : ''}`\n                }, playerName)))), // Scorecard Tables (Front 9 and Back 9)\n            React.createElement('div', {\n                className: \"space-y-3\"\n            }, // Front 9 Table\n            React.createElement('table', {\n                className: \"min-w-full table-fixed border-collapse\"\n            }, React.createElement('colgroup', null, [\n                ...Array(9)\n            ].map((_, i)=>React.createElement('col', {\n                    key: `f9-col-h${i + 1}`,\n                    style: {\n                        width: '8.8%'\n                    }\n                })), React.createElement('col', {\n                style: {\n                    width: '10.8%'\n                }\n            })), React.createElement('thead', {\n                className: \"bg-slate-700\"\n            }, React.createElement('tr', null, [\n                ...Array(9)\n            ].map((_, i)=>React.createElement('th', {\n                    key: `f9-h${i + 1}`,\n                    className: `${cellPaddingY} ${cellPaddingX} text-center ${headerFontSize} text-gray-300 ${holeNumberHeaderFontSize} ${cellBorderClass}`\n                }, i + 1)), React.createElement('th', {\n                className: `${cellPaddingY} ${cellPaddingX} text-center ${headerFontSize} text-yellow-300 ${cellBorderClass} bg-slate-600`\n            }, \"OUT\"))), React.createElement('tbody', {\n                className: \"bg-slate-800/[.5]\"\n            }, React.createElement('tr', null, [\n                ...Array(9)\n            ].map((_, i)=>{\n                const holeIndex = i;\n                const actualHoleNumber = holeIndex + 1;\n                const score = p.golfScores[holeIndex];\n                let scoreColor = 'text-gray-100';\n                let scoreIcon = null;\n                let scoreClasses = '';\n                if (score === 1) {\n                    scoreColor = 'text-red-400 font-extrabold';\n                    scoreIcon = React.createElement('span', {\n                        className: `ml-1 ${scoreIconSize}`\n                    }, \"\\uD83C\\uDF89\");\n                } else if (score === PAR_FOR_HOLE - 1) {\n                    scoreColor = 'text-green-400 font-bold';\n                    scoreIcon = React.createElement('span', {\n                        className: `ml-1 ${scoreIconSize}`\n                    }, \"\\uD83D\\uDC26\");\n                } else if (score === PAR_FOR_HOLE) scoreColor = 'text-white';\n                else if (score === PAR_FOR_HOLE + 1) {\n                    scoreColor = 'text-sky-400';\n                    scoreIcon = React.createElement('span', {\n                        className: `ml-1 ${scoreIconSize}`\n                    }, \"\\uD83D\\uDE25\");\n                } else if (score > PAR_FOR_HOLE + 1) {\n                    scoreColor = 'text-orange-400 font-semibold';\n                    scoreIcon = React.createElement('span', {\n                        className: `ml-1 ${scoreIconSize}`\n                    }, \"\\uD83D\\uDE2B\");\n                }\n                if (currentHole === actualHoleNumber && isCurrentTurnOverall && !showKeypadForGolf && displayRole !== 'controller') scoreClasses += 'bg-sky-600/50 ring-2 ring-sky-400';\n                return React.createElement('td', {\n                    key: `s${pIdx}-h${actualHoleNumber}-front`,\n                    className: `${cellPaddingY} ${cellPaddingX} text-center align-middle ${scoreCellFontSize} ${scoreColor} ${scoreClasses} ${cellBorderClass}`\n                }, score !== null ? score : '-', scoreIcon);\n            }), React.createElement('td', {\n                className: `${cellPaddingY} ${cellPaddingX} text-center align-middle ${totalCellFontSize} text-yellow-300 ${cellBorderClass} bg-slate-700`\n            }, outScore)))), // Back 9 Table\n            React.createElement('table', {\n                className: \"min-w-full table-fixed border-collapse\"\n            }, React.createElement('colgroup', null, [\n                ...Array(9)\n            ].map((_, i)=>React.createElement('col', {\n                    key: `b9-col-h${i + 10}`,\n                    style: {\n                        width: '8%'\n                    }\n                })), React.createElement('col', {\n                style: {\n                    width: '10%'\n                }\n            }), React.createElement('col', {\n                style: {\n                    width: '10%'\n                }\n            })), React.createElement('thead', {\n                className: \"bg-slate-700\"\n            }, React.createElement('tr', null, [\n                ...Array(9)\n            ].map((_, i)=>React.createElement('th', {\n                    key: `b9-h${i + 10}`,\n                    className: `${cellPaddingY} ${cellPaddingX} text-center ${headerFontSize} text-gray-300 ${holeNumberHeaderFontSize} ${cellBorderClass}`\n                }, i + 10)), React.createElement('th', {\n                className: `${cellPaddingY} ${cellPaddingX} text-center ${headerFontSize} text-yellow-400 ${cellBorderClass} bg-slate-600`\n            }, \"IN\"), React.createElement('th', {\n                className: `${cellPaddingY} ${cellPaddingX} text-center ${headerFontSize} text-green-300 ${cellBorderClass} bg-slate-600`\n            }, \"TOTAL\"))), React.createElement('tbody', {\n                className: \"bg-slate-800/[.5]\"\n            }, React.createElement('tr', null, [\n                ...Array(9)\n            ].map((_, i)=>{\n                const holeIndex = i + 9;\n                const actualHoleNumber = holeIndex + 1;\n                const score = p.golfScores[holeIndex];\n                let scoreColor = 'text-gray-100';\n                let scoreIcon = null;\n                let scoreClasses = '';\n                if (score === 1) {\n                    scoreColor = 'text-red-400 font-extrabold';\n                    scoreIcon = React.createElement('span', {\n                        className: `ml-1 ${scoreIconSize}`\n                    }, \"\\uD83C\\uDF89\");\n                } else if (score === PAR_FOR_HOLE - 1) {\n                    scoreColor = 'text-green-400 font-bold';\n                    scoreIcon = React.createElement('span', {\n                        className: `ml-1 ${scoreIconSize}`\n                    }, \"\\uD83D\\uDC26\");\n                } else if (score === PAR_FOR_HOLE) scoreColor = 'text-white';\n                else if (score === PAR_FOR_HOLE + 1) {\n                    scoreColor = 'text-sky-400';\n                    scoreIcon = React.createElement('span', {\n                        className: `ml-1 ${scoreIconSize}`\n                    }, \"\\uD83D\\uDE25\");\n                } else if (score > PAR_FOR_HOLE + 1) {\n                    scoreColor = 'text-orange-400 font-semibold';\n                    scoreIcon = React.createElement('span', {\n                        className: `ml-1 ${scoreIconSize}`\n                    }, \"\\uD83D\\uDE2B\");\n                }\n                if (currentHole === actualHoleNumber && isCurrentTurnOverall && !showKeypadForGolf && displayRole !== 'controller') scoreClasses += 'bg-sky-600/50 ring-2 ring-sky-400';\n                return React.createElement('td', {\n                    key: `s${pIdx}-h${actualHoleNumber}-back`,\n                    className: `${cellPaddingY} ${cellPaddingX} text-center align-middle ${scoreCellFontSize} ${scoreColor} ${scoreClasses} ${cellBorderClass}`\n                }, score !== null ? score : '-', scoreIcon);\n            }), React.createElement('td', {\n                className: `${cellPaddingY} ${cellPaddingX} text-center align-middle ${totalCellFontSize} text-yellow-400 ${cellBorderClass} bg-slate-700`\n            }, inScore), React.createElement('td', {\n                className: `${cellPaddingY} ${cellPaddingX} text-center align-middle ${totalCellFontSize} text-green-300 ${cellBorderClass} bg-slate-700`\n            }, p.golfTotalScore))))));\n        })));\n    };\n    // --- 9. Controller View Rendering Function ---\n    const renderControllerViewGolf = ()=>{\n        // MODIFIED: Button styles for consistency and touch-friendliness\n        const largeButtonBase = \"w-full text-xl font-bold rounded-lg shadow-md my-2 transition-transform hover:scale-105 active:scale-95 flex items-center justify-center text-center leading-tight\";\n        const enterScoreButtonClass = `${largeButtonBase} py-6 bg-green-500 hover:bg-green-600 text-white`;\n        const undoButtonClass = `${largeButtonBase} py-4 text-lg bg-yellow-500 hover:bg-yellow-600 text-black`;\n        const closeControllerButtonClass = `${largeButtonBase} py-4 text-lg bg-slate-500 hover:bg-slate-600 text-white`;\n        const controllerInfoTextClass = \"text-base text-center text-slate-300 mb-1\";\n        const controllerPlayerNameClass = \"text-2xl game-title-font text-yellow-300 font-semibold text-center mb-1 leading-tight\";\n        const controllerHoleInfoClass = \"text-4xl font-black text-sky-300 my-2 text-center p-3 rounded bg-slate-700 shadow-lg\";\n        const ActualKeypadComponent = window.Keypad;\n        if (!currentParticipant && !gameState.gameOver) return React.createElement('div', {\n            className: \"flex items-center justify-center h-full p-4 bg-slate-800 rounded-lg\"\n        }, React.createElement('p', {\n            className: controllerInfoTextClass\n        }, \"Waiting for player data...\"));\n        if (gameState.gameOver) return React.createElement('div', {\n            className: \"flex flex-col items-center justify-center h-full p-4 bg-slate-800 rounded-lg space-y-3\"\n        }, React.createElement('p', {\n            className: `${controllerInfoTextClass} font-semibold text-2xl text-green-400`\n        }, \"Game Over!\"), React.createElement('button', {\n            onClick: ()=>onGameEnd(false),\n            className: closeControllerButtonClass\n        }, \"Close Controller\"));\n        const isMyTurnForScorePrompt = promptForGolfScore && promptForGolfScore.participantIndex === currentOverallParticipantIndex;\n        const isMyTurnForKeypad = showKeypadForGolf && showKeypadForGolf.participantIndex === currentOverallParticipantIndex;\n        const honorsHolderName = participants[golfHonorsHolderIndex] ? getPlayerDisplayName(participants[golfHonorsHolderIndex], true) : \"N/A\";\n        return React.createElement('div', {\n            className: \"flex flex-col items-center justify-around h-full p-3 space-y-3 bg-slate-800 rounded-lg\"\n        }, // Player and Hole Info\n        React.createElement('div', {\n            className: \"text-center w-full\"\n        }, React.createElement('h3', {\n            className: controllerPlayerNameClass\n        }, `Player: ${getPlayerDisplayName(currentParticipant, true)}`), React.createElement('p', {\n            className: controllerHoleInfoClass\n        }, `Hole ${currentHole}`), React.createElement('p', {\n            className: `${controllerInfoTextClass} text-sm`\n        }, \"Honors: \", React.createElement('span', {\n            className: \"font-semibold text-yellow-200\"\n        }, honorsHolderName), currentOverallParticipantIndex === golfHonorsHolderIndex && React.createElement('span', {\n            className: \"ml-1\"\n        }, \"\\uD83C\\uDFC6\"))), // Action Buttons / Keypad Area\n        React.createElement('div', {\n            className: \"w-full max-w-xs space-y-3\"\n        }, isMyTurnForScorePrompt && !isMyTurnForKeypad && React.createElement('button', {\n            onClick: handleEnterScoreClick,\n            className: enterScoreButtonClass\n        }, `\\u{26F3} Enter Score for Hole ${currentHole}`), isMyTurnForKeypad && ActualKeypadComponent && React.createElement(ActualKeypadComponent, {\n            onSubmit: handleKeypadSubmit,\n            onCancel: handleKeypadCancel,\n            title: `Score - Hole ${currentHole}`,\n            numericOnly: true,\n            maxLength: 1,\n            allowedChars: \"123456\"\n        }, React.createElement('p', {\n            className: \"text-xs text-center text-slate-400 mb-1\"\n        }, `Enter strokes for ${getPlayerDisplayName(currentParticipant, true)} (1-6).`)), !isMyTurnForScorePrompt && !isMyTurnForKeypad && !gameState.gameOver && React.createElement('p', {\n            className: `${controllerInfoTextClass} text-lg`\n        }, \"Waiting for other players...\"), // Undo button\n        canUndo && !isMyTurnForKeypad && React.createElement('button', {\n            onClick: handleUndo,\n            className: `${undoButtonClass} ${!canUndo ? 'opacity-50 cursor-not-allowed' : ''}`\n        }, \"\\u21A9\\uFE0F Undo Last\")));\n    };\n    // --- 10. Conditional Rendering Based on displayRole ---\n    if (displayRole === 'controller') return renderControllerViewGolf();\n    else return renderMainDisplayViewGolf();\n};\n\n//# sourceMappingURL=DartDisplayV2.a81a46f7.js.map\n","// golf.js - Golf Game Component (Enhanced UI, Controller Support, Main Display Buttons Removed)\r\n\r\n// Ensure React, Keypad, GameOverScreen, IconPlaceholder are available globally\r\n\r\nconst GolfGame = ({ gameMode, onGameEnd, socket, gameState, displayRole }) => { // Added displayRole\r\n    // --- 1. Initial Game State Validation ---\r\n    if (!gameState || typeof gameState !== 'object' || gameState.mode !== 'GOLF' ||\r\n        !Array.isArray(gameState.participants) || typeof gameState.currentHole !== 'number') {\r\n        console.error(\"GolfGame: Invalid or incomplete gameState\", gameState);\r\n        return React.createElement('div', { className: \"p-8 text-center text-red-500 text-2xl font-sans\" }, \"Loading Golf Game State or Invalid State...\");\r\n    }\r\n\r\n    // --- 2. Game Over Condition ---\r\n    // For the main display, show the game over screen if the game is over.\r\n    if (displayRole !== 'controller' && gameState.gameOver && gameState.winner) {\r\n        if (typeof GameOverScreen !== 'undefined') {\r\n            return React.createElement(GameOverScreen, { winner: gameState.winner, onDismiss: () => onGameEnd(false) });\r\n        } else {\r\n            // Fallback if GameOverScreen component is not available\r\n            console.warn(\"GameOverScreen component not available to GolfGame for main display.\");\r\n            return React.createElement('div', {className: \"p-8 text-center text-green-400 text-4xl font-sans\"}, `Game Over! Winner: ${gameState.winner.name}`);\r\n        }\r\n    }\r\n\r\n    // --- 3. Destructure Game State Properties ---\r\n    const {\r\n        participants = [],\r\n        currentHole,\r\n        numHoles = 18,\r\n        golfTurnOrder = [],\r\n        golfCurrentTurnOrderIndex = 0,\r\n        promptForGolfScore, // { participantIndex, playerInTeamOrderIndex, currentHole }\r\n        showKeypadForGolf,   // { participantIndex, playerInTeamOrderIndex, currentHole }\r\n        golfHonorsHolderIndex,\r\n        history\r\n    } = gameState;\r\n\r\n    const PAR_FOR_HOLE = 3; // Standard par for a hole in darts golf\r\n\r\n    // --- 4. Current Player and Undo Logic ---\r\n    const currentOverallParticipantIndex = golfTurnOrder[golfCurrentTurnOrderIndex];\r\n    const currentParticipant = participants[currentOverallParticipantIndex];\r\n    // Undo is possible if not actively showing keypad, and history exists.\r\n    const canUndo = history && Array.isArray(history) && history.length > 1 && !showKeypadForGolf;\r\n\r\n    // --- 5. Helper Functions ---\r\n    // Generates the display name for a participant.\r\n    // For controller, it can specify the team member if it's their turn.\r\n    const getPlayerDisplayName = (participant, forController = false) => {\r\n        if (!participant || typeof participant.name !== 'string') return \"Unknown\";\r\n        let name = participant.name;\r\n        // For controller, show specific team player if it's their turn to be prompted or for keypad title\r\n        if (forController && participant.type === 'team' && participant.players && currentParticipant && participant.id === currentParticipant.id) {\r\n            let teamPlayerOrderIndex = -1;\r\n            if (promptForGolfScore && promptForGolfScore.participantIndex === currentOverallParticipantIndex) {\r\n                teamPlayerOrderIndex = promptForGolfScore.playerInTeamOrderIndex;\r\n            } else if (showKeypadForGolf && showKeypadForGolf.participantIndex === currentOverallParticipantIndex) {\r\n                teamPlayerOrderIndex = showKeypadForGolf.playerInTeamOrderIndex;\r\n            }\r\n\r\n            if (teamPlayerOrderIndex !== -1 && participant.players[teamPlayerOrderIndex]) {\r\n                const teamPlayerName = participant.players[teamPlayerOrderIndex];\r\n                name = `${participant.name} (${teamPlayerName})`;\r\n            } else if (teamPlayerOrderIndex !== -1) {\r\n                 name = `${participant.name} (Player ${teamPlayerOrderIndex + 1})`;\r\n            }\r\n        }\r\n        return name;\r\n    };\r\n\r\n    // Gets the order of team players for display on the main scorecard.\r\n    // Rotates the order so the current shooter for the hole is listed first.\r\n    const getTeamPlayerOrderForDisplay = (participant) => {\r\n        if (!participant || participant.type !== 'team' || !Array.isArray(participant.players) || participant.players.length === 0) {\r\n            return [];\r\n        }\r\n        const currentTeamPlayerIndex = participant.golfCurrentPlayerInTeamDisplayIndex !== undefined ? participant.golfCurrentPlayerInTeamDisplayIndex : 0;\r\n        let orderedPlayers = [...(participant.golfPlayerOrderInternal || participant.players)];\r\n        const rotatedOrder = [...orderedPlayers.slice(currentTeamPlayerIndex), ...orderedPlayers.slice(0, currentTeamPlayerIndex)];\r\n        return rotatedOrder;\r\n    };\r\n\r\n    // Calculates the subtotal score for a range of holes (e.g., front 9 or back 9).\r\n    const getHoleSubtotal = (scores, startHole, endHole) => {\r\n        let subtotal = 0;\r\n        if (scores && Array.isArray(scores)) {\r\n            for (let i = startHole - 1; i < endHole && i < scores.length; i++) {\r\n                if (scores[i] !== null && typeof scores[i] === 'number') {\r\n                    subtotal += scores[i];\r\n                }\r\n            }\r\n        }\r\n        return subtotal;\r\n    };\r\n\r\n    // --- 6. Event Handlers ---\r\n    // Handles click to enter score (typically from controller).\r\n    const handleEnterScoreClick = () => {\r\n        if (socket && currentParticipant && promptForGolfScore &&\r\n            promptForGolfScore.participantIndex === currentOverallParticipantIndex) {\r\n            socket.emit('golfRequestScoreEntry');\r\n        }\r\n    };\r\n\r\n    // Handles score submission from keypad (typically from controller).\r\n    const handleKeypadSubmit = (score) => {\r\n        if (socket && currentParticipant && showKeypadForGolf &&\r\n            showKeypadForGolf.participantIndex === currentOverallParticipantIndex) {\r\n            const numericScore = parseInt(score, 10);\r\n            // Score must be between 1 and 6.\r\n            if (!isNaN(numericScore) && numericScore >= 1 && numericScore <= 6) {\r\n                socket.emit('golfSubmitScore', { score: numericScore });\r\n            } else {\r\n                console.error(\"Invalid score for Golf. Please enter a number between 1 and 6.\");\r\n                // Alert for controller if score is invalid.\r\n                if (displayRole === 'controller' && typeof alert === 'function') { // Check if alert is available\r\n                    // Using a more robust way to show messages in controller if alert is not ideal\r\n                    // For now, sticking to alert as per original, but a custom modal would be better.\r\n                    alert(\"Score must be 1-6.\");\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    // Handles keypad cancellation (typically from controller).\r\n    const handleKeypadCancel = () => {\r\n        if (socket && showKeypadForGolf) socket.emit('golfCancelScoreEntry');\r\n    };\r\n\r\n    // Handles undo action (typically from controller).\r\n    const handleUndo = () => {\r\n        if (socket && canUndo) socket.emit('undoLastAction');\r\n    };\r\n\r\n    // Handles ending the game (typically from controller).\r\n    const handleEndGameController = () => {\r\n        if (socket) {\r\n            socket.emit('forceEndGame'); // Inform server to end the game.\r\n        }\r\n        onGameEnd(true); // true indicates a manual end by a player.\r\n    };\r\n\r\n    // --- 7. UI Configuration & Dynamic Sizing (Main Display) ---\r\n    // Variables for dynamic font sizes and padding, adjusted based on the number of players.\r\n    const numActivePlayers = participants.length;\r\n    let titleFontSize, holeInfoFontSize, turnIndicatorFontSize, scoreCellFontSize,\r\n        totalCellFontSize, playerNameFontSize, teamPlayerListFontSize, headerFontSize,\r\n        holeNumberHeaderFontSize, /* bottomButtonFontSize, // Removed as buttons are gone from main display */\r\n        cellPaddingY, cellPaddingX, honorsEmojiSize, scoreIconSize, turnIndicatorSectionPadding;\r\n\r\n    // Apply different styles based on the number of active players to optimize layout.\r\n    if (numActivePlayers <= 2) {\r\n        titleFontSize = \"text-6xl xl:text-7xl\"; holeInfoFontSize = \"text-4xl xl:text-5xl\"; turnIndicatorFontSize = \"text-3xl xl:text-4xl\"; scoreCellFontSize = \"text-7xl xl:text-8xl\"; totalCellFontSize = \"text-8xl xl:text-9xl font-bold\"; playerNameFontSize = \"text-4xl xl:text-5xl font-bold\"; teamPlayerListFontSize = \"text-3xl xl:text-4xl\"; headerFontSize = \"text-3xl xl:text-4xl font-bold\"; holeNumberHeaderFontSize = \"text-2xl xl:text-3xl\"; /* bottomButtonFontSize = \"text-xl\"; */ cellPaddingY = \"py-4 sm:py-5\"; cellPaddingX = \"px-2 sm:px-3\"; honorsEmojiSize = \"text-4xl\"; scoreIconSize = \"text-4xl\"; turnIndicatorSectionPadding = \"p-4 md:p-5\";\r\n    } else if (numActivePlayers <= 4) {\r\n        titleFontSize = \"text-5xl xl:text-6xl\"; holeInfoFontSize = \"text-3xl xl:text-4xl\"; turnIndicatorFontSize = \"text-2xl xl:text-3xl\"; scoreCellFontSize = \"text-6xl xl:text-7xl\"; totalCellFontSize = \"text-6xl xl:text-7xl font-bold\"; playerNameFontSize = \"text-3xl xl:text-4xl font-bold\"; teamPlayerListFontSize = \"text-2xl xl:text-3xl\"; headerFontSize = \"text-2xl xl:text-3xl font-bold\"; holeNumberHeaderFontSize = \"text-xl xl:text-2xl\"; /* bottomButtonFontSize = \"text-lg\"; */ cellPaddingY = \"py-3 sm:py-4\"; cellPaddingX = \"px-1 sm:px-2\"; honorsEmojiSize = \"text-3xl\"; scoreIconSize = \"text-3xl\"; turnIndicatorSectionPadding = \"p-3 md:p-4\";\r\n    } else { // 5+ players\r\n        titleFontSize = \"text-4xl xl:text-5xl\"; holeInfoFontSize = \"text-2xl xl:text-3xl\"; turnIndicatorFontSize = \"text-xl xl:text-2xl\"; scoreCellFontSize = \"text-5xl xl:text-6xl\"; totalCellFontSize = \"text-5xl xl:text-6xl font-bold\"; playerNameFontSize = \"text-2xl xl:text-3xl font-bold\"; teamPlayerListFontSize = \"text-xl xl:text-2xl\"; headerFontSize = \"text-xl xl:text-2xl font-bold\"; holeNumberHeaderFontSize = \"text-lg xl:text-xl\"; /* bottomButtonFontSize = \"text-base\"; */ cellPaddingY = \"py-2 sm:py-3\"; cellPaddingX = \"px-1 sm:px-1.5\"; honorsEmojiSize = \"text-2xl\"; scoreIconSize = \"text-2xl\"; turnIndicatorSectionPadding = \"p-2 sm:p-3\";\r\n    }\r\n    const cellBorderClass = \"border border-gray-600\";\r\n\r\n    // --- 8. Main Display View Rendering Function ---\r\n    const renderMainDisplayViewGolf = () => {\r\n        return (\r\n            React.createElement('div', { className: \"golf-game-area w-full px-1 py-2 flex flex-col h-screen bg-slate-900 text-slate-100 font-sans\" },\r\n                // Game Title\r\n                React.createElement('h2', { className: `${titleFontSize} font-black game-title-font text-green-400 text-center mb-1 sm:mb-2 shrink-0 flex items-center justify-center` },\r\n                    React.createElement('span', {className: \"mr-3 text-5xl\"}, \"⛳\"),\r\n                    gameMode?.name || \"Golf\",\r\n                    React.createElement('span', {className: \"ml-3 text-5xl\"}, \"🏌️\")\r\n                ),\r\n                // Current Hole Information\r\n                React.createElement('h3', { className: `${holeInfoFontSize} font-bold text-sky-300 text-center mb-2 sm:mb-3 shrink-0` },\r\n                     `Hole ${currentHole} `, React.createElement('span', { className: \"text-3xl sm:text-4xl text-sky-500\" }, `/ ${numHoles}`)\r\n                ),\r\n\r\n                // Turn Indicator (On the tee)\r\n                currentParticipant && !gameState.gameOver && (\r\n                    React.createElement('div', {\r\n                        className: `flex flex-row items-center justify-between mb-2 sm:mb-3 ${turnIndicatorSectionPadding} bg-gradient-to-r from-blue-700 via-indigo-600 to-blue-700 rounded-xl shadow-2xl shrink-0 ring-2 ring-yellow-300`\r\n                    },\r\n                        React.createElement('p', {\r\n                            className: `${turnIndicatorFontSize} text-white flex items-center`\r\n                        },\r\n                            currentOverallParticipantIndex === golfHonorsHolderIndex &&\r\n                                React.createElement('span', { className: `mr-2 ${honorsEmojiSize} animate-pulse text-yellow-300` }, \"🏆\"), // Honors icon\r\n                            React.createElement('span', {className: \"mr-2 text-3xl\"}, \"⛳️\"),\r\n                            React.createElement('span', {className: \"font-semibold\"}, \"On the tee: \"),\r\n                            React.createElement('span', { className: `ml-2 font-bold ${currentOverallParticipantIndex === golfHonorsHolderIndex ? 'text-yellow-300' : 'text-lime-300'}`}, getPlayerDisplayName(currentParticipant))\r\n                        ),\r\n                    )\r\n                ),\r\n\r\n                // Player Scorecards Area\r\n                React.createElement('div', { className: \"flex-grow overflow-auto custom-scrollbar pb-4\" }, // Added pb-4 for spacing if bottom controls were there\r\n                    participants.map((p, pIdx) => {\r\n                        const outScore = getHoleSubtotal(p.golfScores, 1, 9);\r\n                        const inScore = getHoleSubtotal(p.golfScores, 10, 18);\r\n                        const isCurrentTurnOverall = pIdx === currentOverallParticipantIndex;\r\n                        const hasHonorsCurrentTurn = pIdx === golfHonorsHolderIndex && !gameState.gameOver;\r\n\r\n                        // Card styling based on current turn and honors.\r\n                        let cardBg = 'bg-slate-800'; let cardRing = ''; let cardShadow = 'shadow-xl';\r\n                        if (isCurrentTurnOverall && !gameState.gameOver) {\r\n                            cardBg = 'bg-sky-700'; cardRing = 'ring-4 ring-yellow-400'; cardShadow = 'shadow-yellow-400/40 shadow-2xl';\r\n                        }\r\n\r\n                        const teamPlayersDisplay = getTeamPlayerOrderForDisplay(p);\r\n\r\n                        return (\r\n                            React.createElement('div', { key: p.id || pIdx, className: `participant-scorecard-block ${cardBg} ${cardRing} ${cardShadow} rounded-xl mb-3 sm:mb-4 p-3 sm:p-4 ${cellBorderClass} transition-all duration-300` },\r\n                                // Player Name and Team Members (if applicable)\r\n                                React.createElement('div', { className: `mb-2 ${playerNameFontSize} ${hasHonorsCurrentTurn ? 'text-yellow-300' : 'text-white'} flex items-center` },\r\n                                    hasHonorsCurrentTurn && React.createElement('span', { className: `mr-2 ${honorsEmojiSize} animate-bounce` }, \"🏆\"),\r\n                                    getPlayerDisplayName(p),\r\n                                    p.type === 'team' && teamPlayersDisplay.length > 0 && (\r\n                                        React.createElement('div', { className: `${teamPlayerListFontSize} text-gray-400 ml-3 mt-1` },\r\n                                            teamPlayersDisplay.map((playerName, playerIdx_display) => (\r\n                                                React.createElement('span', { key: `${p.id}-playerdisplay-${playerIdx_display}`, className: `block ${playerIdx_display === 0 ? 'font-semibold text-sky-300' : ''}` }, playerName)\r\n                                            ))\r\n                                        )\r\n                                    )\r\n                                ),\r\n                                // Scorecard Tables (Front 9 and Back 9)\r\n                                React.createElement('div', {className: \"space-y-3\"},\r\n                                    // Front 9 Table\r\n                                    React.createElement('table', { className: \"min-w-full table-fixed border-collapse\" },\r\n                                        React.createElement('colgroup', null, [...Array(9)].map((_, i) => React.createElement('col', { key: `f9-col-h${i+1}`, style: { width: '8.8%' } })), React.createElement('col', { style: { width: '10.8%' } }) ),\r\n                                        React.createElement('thead', { className: \"bg-slate-700\" }, React.createElement('tr', null, [...Array(9)].map((_, i) => React.createElement('th', { key: `f9-h${i+1}`, className: `${cellPaddingY} ${cellPaddingX} text-center ${headerFontSize} text-gray-300 ${holeNumberHeaderFontSize} ${cellBorderClass}` }, i+1)), React.createElement('th', { className: `${cellPaddingY} ${cellPaddingX} text-center ${headerFontSize} text-yellow-300 ${cellBorderClass} bg-slate-600` }, \"OUT\"))),\r\n                                        React.createElement('tbody', {className: \"bg-slate-800/[.5]\"}, React.createElement('tr', null, [...Array(9)].map((_, i) => { const holeIndex = i; const actualHoleNumber = holeIndex + 1; const score = p.golfScores[holeIndex]; let scoreColor = 'text-gray-100'; let scoreIcon = null; let scoreClasses = ''; if (score === 1) { scoreColor = 'text-red-400 font-extrabold'; scoreIcon = React.createElement('span', {className: `ml-1 ${scoreIconSize}`}, '🎉');} else if (score === PAR_FOR_HOLE - 1) { scoreColor = 'text-green-400 font-bold'; scoreIcon = React.createElement('span', {className: `ml-1 ${scoreIconSize}`}, '🐦');} else if (score === PAR_FOR_HOLE) { scoreColor = 'text-white';} else if (score === PAR_FOR_HOLE + 1) { scoreColor = 'text-sky-400'; scoreIcon = React.createElement('span', {className: `ml-1 ${scoreIconSize}`}, '😥');} else if (score > PAR_FOR_HOLE + 1) { scoreColor = 'text-orange-400 font-semibold'; scoreIcon = React.createElement('span', {className: `ml-1 ${scoreIconSize}`}, '😫');} if (currentHole === actualHoleNumber && isCurrentTurnOverall && !showKeypadForGolf && displayRole !== 'controller') { scoreClasses += 'bg-sky-600/50 ring-2 ring-sky-400'; } return (React.createElement('td', { key: `s${pIdx}-h${actualHoleNumber}-front`, className: `${cellPaddingY} ${cellPaddingX} text-center align-middle ${scoreCellFontSize} ${scoreColor} ${scoreClasses} ${cellBorderClass}` }, score !== null ? score : '-', scoreIcon)); }), React.createElement('td', { className: `${cellPaddingY} ${cellPaddingX} text-center align-middle ${totalCellFontSize} text-yellow-300 ${cellBorderClass} bg-slate-700` }, outScore)))\r\n                                    ),\r\n                                    // Back 9 Table\r\n                                    React.createElement('table', { className: \"min-w-full table-fixed border-collapse\" },\r\n                                        React.createElement('colgroup', null, [...Array(9)].map((_, i) => React.createElement('col', { key: `b9-col-h${i+10}`, style: { width: '8%' } })), React.createElement('col', { style: { width: '10%' } }), React.createElement('col', { style: { width: '10%' } }) ),\r\n                                        React.createElement('thead', { className: \"bg-slate-700\" }, React.createElement('tr', null, [...Array(9)].map((_, i) => React.createElement('th', { key: `b9-h${i+10}`, className: `${cellPaddingY} ${cellPaddingX} text-center ${headerFontSize} text-gray-300 ${holeNumberHeaderFontSize} ${cellBorderClass}` }, i+10)), React.createElement('th', { className: `${cellPaddingY} ${cellPaddingX} text-center ${headerFontSize} text-yellow-400 ${cellBorderClass} bg-slate-600` }, \"IN\"), React.createElement('th', { className: `${cellPaddingY} ${cellPaddingX} text-center ${headerFontSize} text-green-300 ${cellBorderClass} bg-slate-600` }, \"TOTAL\"))),\r\n                                        React.createElement('tbody', {className: \"bg-slate-800/[.5]\"}, React.createElement('tr', null, [...Array(9)].map((_, i) => { const holeIndex = i + 9; const actualHoleNumber = holeIndex + 1; const score = p.golfScores[holeIndex]; let scoreColor = 'text-gray-100'; let scoreIcon = null; let scoreClasses = ''; if (score === 1) { scoreColor = 'text-red-400 font-extrabold'; scoreIcon = React.createElement('span', {className: `ml-1 ${scoreIconSize}`}, '🎉');} else if (score === PAR_FOR_HOLE - 1) { scoreColor = 'text-green-400 font-bold'; scoreIcon = React.createElement('span', {className: `ml-1 ${scoreIconSize}`}, '🐦');} else if (score === PAR_FOR_HOLE) { scoreColor = 'text-white';} else if (score === PAR_FOR_HOLE + 1) { scoreColor = 'text-sky-400'; scoreIcon = React.createElement('span', {className: `ml-1 ${scoreIconSize}`}, '😥');} else if (score > PAR_FOR_HOLE + 1) { scoreColor = 'text-orange-400 font-semibold'; scoreIcon = React.createElement('span', {className: `ml-1 ${scoreIconSize}`}, '😫');} if (currentHole === actualHoleNumber && isCurrentTurnOverall && !showKeypadForGolf && displayRole !== 'controller') { scoreClasses += 'bg-sky-600/50 ring-2 ring-sky-400'; } return (React.createElement('td', { key: `s${pIdx}-h${actualHoleNumber}-back`, className: `${cellPaddingY} ${cellPaddingX} text-center align-middle ${scoreCellFontSize} ${scoreColor} ${scoreClasses} ${cellBorderClass}` }, score !== null ? score : '-', scoreIcon)); }), React.createElement('td', { className: `${cellPaddingY} ${cellPaddingX} text-center align-middle ${totalCellFontSize} text-yellow-400 ${cellBorderClass} bg-slate-700` }, inScore), React.createElement('td', { className: `${cellPaddingY} ${cellPaddingX} text-center align-middle ${totalCellFontSize} text-green-300 ${cellBorderClass} bg-slate-700` }, p.golfTotalScore)))\r\n                                    )\r\n                                )\r\n                            )\r\n                        );\r\n                    })\r\n                )\r\n            )\r\n        );\r\n    };\r\n\r\n    // --- 9. Controller View Rendering Function ---\r\n    const renderControllerViewGolf = () => {\r\n        // MODIFIED: Button styles for consistency and touch-friendliness\r\n        const largeButtonBase = \"w-full text-xl font-bold rounded-lg shadow-md my-2 transition-transform hover:scale-105 active:scale-95 flex items-center justify-center text-center leading-tight\";\r\n        const enterScoreButtonClass = `${largeButtonBase} py-6 bg-green-500 hover:bg-green-600 text-white`;\r\n        const undoButtonClass = `${largeButtonBase} py-4 text-lg bg-yellow-500 hover:bg-yellow-600 text-black`;\r\n        const closeControllerButtonClass = `${largeButtonBase} py-4 text-lg bg-slate-500 hover:bg-slate-600 text-white`;\r\n\r\n\r\n        const controllerInfoTextClass = \"text-base text-center text-slate-300 mb-1\";\r\n        const controllerPlayerNameClass = \"text-2xl game-title-font text-yellow-300 font-semibold text-center mb-1 leading-tight\";\r\n        const controllerHoleInfoClass = \"text-4xl font-black text-sky-300 my-2 text-center p-3 rounded bg-slate-700 shadow-lg\";\r\n        const ActualKeypadComponent = window.Keypad; \r\n\r\n        if (!currentParticipant && !gameState.gameOver) { \r\n            return React.createElement('div', { className: \"flex items-center justify-center h-full p-4 bg-slate-800 rounded-lg\" }, \r\n                React.createElement('p', { className: controllerInfoTextClass }, \"Waiting for player data...\")\r\n            );\r\n        }\r\n        \r\n        if (gameState.gameOver) {\r\n             return React.createElement('div', { className: \"flex flex-col items-center justify-center h-full p-4 bg-slate-800 rounded-lg space-y-3\" },\r\n                React.createElement('p', { className: `${controllerInfoTextClass} font-semibold text-2xl text-green-400` }, \"Game Over!\"),\r\n                React.createElement('button', {\r\n                    onClick: () => onGameEnd(false), \r\n                    className: closeControllerButtonClass\r\n                }, \"Close Controller\")\r\n            );\r\n        }\r\n\r\n\r\n        const isMyTurnForScorePrompt = promptForGolfScore && promptForGolfScore.participantIndex === currentOverallParticipantIndex;\r\n        const isMyTurnForKeypad = showKeypadForGolf && showKeypadForGolf.participantIndex === currentOverallParticipantIndex;\r\n        const honorsHolderName = participants[golfHonorsHolderIndex] ? getPlayerDisplayName(participants[golfHonorsHolderIndex], true) : \"N/A\";\r\n\r\n        return React.createElement('div', { className: \"flex flex-col items-center justify-around h-full p-3 space-y-3 bg-slate-800 rounded-lg\" }, \r\n            // Player and Hole Info\r\n            React.createElement('div', { className: \"text-center w-full\" },\r\n                React.createElement('h3', { className: controllerPlayerNameClass }, `Player: ${getPlayerDisplayName(currentParticipant, true)}`),\r\n                React.createElement('p', { className: controllerHoleInfoClass }, `Hole ${currentHole}`),\r\n                React.createElement('p', { className: `${controllerInfoTextClass} text-sm` },\r\n                    \"Honors: \", React.createElement('span', {className: \"font-semibold text-yellow-200\"}, honorsHolderName),\r\n                    currentOverallParticipantIndex === golfHonorsHolderIndex && React.createElement('span', {className: \"ml-1\"}, \"🏆\")\r\n                )\r\n            ),\r\n            // Action Buttons / Keypad Area\r\n            React.createElement('div', { className: \"w-full max-w-xs space-y-3\" }, // Increased spacing\r\n                isMyTurnForScorePrompt && !isMyTurnForKeypad && (\r\n                    React.createElement('button', {\r\n                        onClick: handleEnterScoreClick,\r\n                        className: enterScoreButtonClass\r\n                    }, `⛳ Enter Score for Hole ${currentHole}`)\r\n                ),\r\n                isMyTurnForKeypad && ActualKeypadComponent && (\r\n                    React.createElement(ActualKeypadComponent, {\r\n                        onSubmit: handleKeypadSubmit,\r\n                        onCancel: handleKeypadCancel,\r\n                        title: `Score - Hole ${currentHole}`,\r\n                        numericOnly: true,\r\n                        maxLength: 1,\r\n                        allowedChars: \"123456\" \r\n                    }, React.createElement('p', {className: \"text-xs text-center text-slate-400 mb-1\"}, `Enter strokes for ${getPlayerDisplayName(currentParticipant, true)} (1-6).`))\r\n                ),\r\n                !isMyTurnForScorePrompt && !isMyTurnForKeypad && !gameState.gameOver &&\r\n                    React.createElement('p', { className: `${controllerInfoTextClass} text-lg` }, \"Waiting for other players...\"),\r\n\r\n                // Undo button\r\n                canUndo && !isMyTurnForKeypad && React.createElement('button', { \r\n                    onClick: handleUndo,\r\n                    className: `${undoButtonClass} ${!canUndo ? 'opacity-50 cursor-not-allowed' : ''}`\r\n                }, \"↩️ Undo Last\")\r\n                // REMOVED: End Game button was here.\r\n            )\r\n        );\r\n    };\r\n\r\n    // --- 10. Conditional Rendering Based on displayRole ---\r\n    if (displayRole === 'controller') {\r\n        return renderControllerViewGolf();\r\n    } else {\r\n        return renderMainDisplayViewGolf(); \r\n    }\r\n};\r\n"],"names":["GolfGame","gameMode","onGameEnd","socket","gameState","displayRole","titleFontSize","holeInfoFontSize","turnIndicatorFontSize","scoreCellFontSize","totalCellFontSize","playerNameFontSize","teamPlayerListFontSize","headerFontSize","holeNumberHeaderFontSize","cellPaddingY","cellPaddingX","honorsEmojiSize","scoreIconSize","turnIndicatorSectionPadding","mode","Array","isArray","participants","currentHole","console","error","React","createElement","className","gameOver","winner","GameOverScreen","onDismiss","warn","name","numHoles","golfTurnOrder","golfCurrentTurnOrderIndex","promptForGolfScore","showKeypadForGolf","golfHonorsHolderIndex","history","currentOverallParticipantIndex","currentParticipant","canUndo","length","getPlayerDisplayName","participant","forController","type","players","id","teamPlayerOrderIndex","participantIndex","playerInTeamOrderIndex","teamPlayerName","getTeamPlayerOrderForDisplay","currentTeamPlayerIndex","undefined","golfCurrentPlayerInTeamDisplayIndex","orderedPlayers","golfPlayerOrderInternal","slice","getHoleSubtotal","scores","startHole","endHole","subtotal","i","handleEnterScoreClick","emit","handleKeypadSubmit","score","numericScore","parseInt","isNaN","alert","handleKeypadCancel","handleUndo","numActivePlayers","cellBorderClass","renderControllerViewGolf","largeButtonBase","enterScoreButtonClass","undoButtonClass","closeControllerButtonClass","controllerInfoTextClass","ActualKeypadComponent","window","Keypad","onClick","isMyTurnForScorePrompt","isMyTurnForKeypad","honorsHolderName","onSubmit","onCancel","title","numericOnly","maxLength","allowedChars","map","p","pIdx","outScore","golfScores","inScore","isCurrentTurnOverall","hasHonorsCurrentTurn","cardBg","cardRing","cardShadow","teamPlayersDisplay","key","playerName","playerIdx_display","_","style","width","actualHoleNumber","holeIndex","scoreColor","scoreIcon","scoreClasses","PAR_FOR_HOLE","golfTotalScore"],"version":3,"file":"DartDisplayV2.a81a46f7.js.map"}