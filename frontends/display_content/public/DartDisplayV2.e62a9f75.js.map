{"mappings":"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","sources":["<anon>","around_the_world.js"],"sourcesContent":["// around_the_world.js - Around The World Game Component (Updated Controller & Player Colors, Jazzed Up Progress Track)\n// Ensure React, GameOverScreen are available globally\n// Assuming Tailwind CSS is set up in the project.\n// Player specific background colors (consistent with 501)\nconst PLAYER_COLORS = [\n    'bg-red-700/70',\n    'bg-blue-700/70',\n    'bg-green-700/70',\n    'bg-cyan-700/70',\n    'bg-purple-700/70',\n    'bg-pink-700/70',\n    'bg-teal-700/70',\n    'bg-orange-600/70'\n];\n// Icons\nconst ICON_LEADER_ATW = \"\\uD83C\\uDFAF\";\nconst ICON_UNDO_ATW = \"\\u21A9\\uFE0F\";\nconst ICON_RECORD_HIT_ATW = \"\\u2714\\uFE0F\";\nconst ICON_END_TURN_ATW = \"\\u27A1\\uFE0F\";\nconst ICON_WINNER_ATW = \"\\uD83C\\uDFC6\";\nconst AroundTheWorldGame = ({ gameMode, onGameEnd, socket, gameState, displayRole/* NEW PROP */  })=>{\n    // --- 1. Initial Game State Validation ---\n    if (!gameState || typeof gameState !== 'object' || gameState.mode !== 'AROUND_THE_WORLD' || !Array.isArray(gameState.participants)) {\n        console.error(\"AroundTheWorldGame: Invalid or incomplete gameState\", gameState);\n        return React.createElement('div', {\n            className: \"p-10 text-center text-red-500 text-3xl sm:text-4xl\"\n        }, \"Loading ATW Game State or Invalid State...\");\n    }\n    // --- 2. Game Over Condition ---\n    if (displayRole !== 'controller' && gameState.gameOver && gameState.winner) {\n        if (typeof GameOverScreen !== 'undefined') return React.createElement(GameOverScreen, {\n            winner: gameState.winner,\n            onDismiss: ()=>onGameEnd(false)\n        });\n        else {\n            console.warn(\"GameOverScreen component not available to AroundTheWorldGame for main display.\");\n            return React.createElement('div', {\n                className: \"p-8 text-center text-green-400 text-4xl font-sans\"\n            }, `Game Over! Winner: ${gameState.winner.name}`);\n        }\n    }\n    // --- 3. Destructure Game State Properties ---\n    const { participants = [], currentPlayerIndex, currentPlayerTurnInTeam, showAroundTheWorldActionPrompt, showATWObjectiveSelectorModal, history, ATW_TARGET_QUALIFY_SB, ATW_TARGET_WIN_DB, ATW_LOGICAL_WIN_VIA_SB, ATW_LOGICAL_WIN_VIA_DB, ATW_OBJECTIVES_NUMBERS_MAX } = gameState;\n    // --- 4. Current Player and Undo Logic ---\n    const currentParticipant = participants[currentPlayerIndex];\n    const canUndo = history && Array.isArray(history) && history.length > 1 && !showATWObjectiveSelectorModal;\n    // --- 5. Helper Functions ---\n    const getDisplayTarget = (targetValue, isWinnerCard = false)=>{\n        if (targetValue >= 1 && targetValue <= ATW_OBJECTIVES_NUMBERS_MAX) return String(targetValue);\n        if (targetValue === ATW_TARGET_QUALIFY_SB) return 'SB';\n        if (targetValue === ATW_TARGET_WIN_DB) return 'DB';\n        if (targetValue === ATW_LOGICAL_WIN_VIA_SB || targetValue === ATW_LOGICAL_WIN_VIA_DB || isWinnerCard) return ICON_WINNER_ATW;\n        return 'N/A';\n    };\n    const getPlayerDisplayName = (participant, teamMemberIndexIfApplicable)=>{\n        if (!participant || typeof participant.name !== 'string') return \"Unknown Player\";\n        let name = participant.name;\n        if (participant.type === 'team' && participant.players && typeof teamMemberIndexIfApplicable === 'number' && participant.players[teamMemberIndexIfApplicable]) name += ` (${participant.players[teamMemberIndexIfApplicable]})`;\n        return name;\n    };\n    const ATW_REPORTED_VALUE_SB_CONST = 25;\n    const ATW_REPORTED_VALUE_DB_CONST = 50;\n    const ATW_REPORTED_VALUE_MISS_CONST = 0;\n    const MAX_SB_HITS_FOR_WIN = gameState.ATW_MAX_SB_HITS_FOR_WIN || 5;\n    // --- 6. Event Handlers ---\n    const handleRequestObjectiveEntry = ()=>{\n        if (socket && currentParticipant && !currentParticipant.atw_isWinner && showAroundTheWorldActionPrompt && showAroundTheWorldActionPrompt.participantIndex === currentPlayerIndex) socket.emit('aroundTheWorldClientRequestsObjectiveModal');\n    };\n    const handleObjectiveSelected = (reportedValue)=>{\n        if (socket && currentParticipant && !currentParticipant.atw_isWinner) socket.emit('aroundTheWorldTurnResult', {\n            reportedValue: reportedValue\n        });\n    };\n    const handleCancelObjectiveSelector = ()=>{\n        if (socket && showATWObjectiveSelectorModal) socket.emit('aroundTheWorldCancelObjectiveEntry');\n    };\n    const handlePlayerEndsTurn = ()=>{\n        if (socket && currentParticipant && !currentParticipant.atw_isWinner) socket.emit('aroundTheWorldPlayerEndsTurn');\n    };\n    const handleUndo = ()=>{\n        if (socket && canUndo) socket.emit('undoLastAction');\n    };\n    // --- 7. Dynamic Sizing Logic (from user's reverted code) ---\n    const numPlayers = participants.length;\n    let stylesConfig;\n    if (numPlayers <= 2) stylesConfig = {\n        cardPadding: 'p-5 sm:p-6 md:p-8',\n        playerNameSize: 'text-4xl sm:text-5xl md:text-6xl lg:text-7xl',\n        teamMemberSize: 'text-2xl sm:text-3xl md:text-4xl',\n        sbHitsSize: 'text-4xl sm:text-5xl md:text-5xl',\n        targetIconSize: 'text-7xl sm:text-8xl md:text-9xl',\n        targetTextSize: 'text-8xl sm:text-9xl md:text-[10rem] lg:text-[11rem]',\n        lastActionSize: 'text-xl sm:text-2xl md:text-3xl',\n        segmentFontSize: 'text-2xl sm:text-3xl md:text-3xl',\n        segmentSizeClasses: 'w-14 h-14 sm:w-16 sm:h-16 md:w-20 md:h-20',\n        progressTrackGap: 'gap-2 sm:gap-2.5',\n        actionButtonsColumnWidth: 'w-48 sm:w-60 md:w-72',\n        actionButtonColumnGap: 'space-y-2 sm:space-y-2.5',\n        aimingForSize: 'text-2xl sm:text-3xl md:text-4xl',\n        recordHitButtonPY: 'py-3 sm:py-4 md:py-5',\n        recordHitButtonText: 'text-xl sm:text-2xl md:text-3xl',\n        endTurnButtonPY: 'py-3 sm:py-4 md:py-5',\n        endTurnButtonText: 'text-xl sm:text-2xl md:text-3xl',\n        undoEndGameButtonPY: 'py-2 sm:py-3 md:py-3.5',\n        undoEndGameButtonText: 'text-lg sm:text-xl md:text-2xl',\n        undoEndGameIconSize: 'text-lg sm:text-xl md:text-2xl',\n        modalTitleSize: 'text-3xl sm:text-4xl md:text-5xl',\n        modalButtonPY: 'py-4 sm:py-5 md:py-6',\n        modalButtonText: 'text-2xl sm:text-3xl md:text-4xl',\n        modalBottomButtonPY: 'py-3 sm:py-4 md:py-5',\n        modalBottomButtonText: 'text-xl sm:text-2xl md:text-3xl',\n        gapBetweenCards: 'gap-4 sm:gap-5 md:gap-6',\n        mainTitleIconSize: 'text-3xl sm:text-4xl md:text-5xl',\n        mainTitleTextSize: 'text-4xl sm:text-5xl md:text-6xl',\n        mainTitleMarginBottom: 'mb-2 sm:mb-3 md:mb-4'\n    };\n    else if (numPlayers <= 4) stylesConfig = {\n        cardPadding: 'p-4 sm:p-5 md:p-6',\n        playerNameSize: 'text-3xl sm:text-4xl md:text-5xl',\n        teamMemberSize: 'text-xl sm:text-2xl md:text-3xl',\n        sbHitsSize: 'text-3xl sm:text-4xl md:text-4xl',\n        targetIconSize: 'text-6xl sm:text-7xl md:text-8xl',\n        targetTextSize: 'text-7xl sm:text-8xl md:text-9xl',\n        lastActionSize: 'text-lg sm:text-xl md:text-2xl',\n        segmentFontSize: 'text-xl sm:text-2xl md:text-2xl',\n        segmentSizeClasses: 'w-12 h-12 sm:w-14 sm:h-14 md:w-16 md:h-16',\n        progressTrackGap: 'gap-1.5 sm:gap-2',\n        actionButtonsColumnWidth: 'w-44 sm:w-52 md:w-60',\n        actionButtonColumnGap: 'space-y-1.5 sm:space-y-2',\n        aimingForSize: 'text-xl sm:text-2xl md:text-3xl',\n        recordHitButtonPY: 'py-2.5 sm:py-3 md:py-4',\n        recordHitButtonText: 'text-lg sm:text-xl md:text-2xl',\n        endTurnButtonPY: 'py-2.5 sm:py-3 md:py-4',\n        endTurnButtonText: 'text-lg sm:text-xl md:text-2xl',\n        undoEndGameButtonPY: 'py-2 sm:py-2.5 md:py-3',\n        undoEndGameButtonText: 'text-base sm:text-lg md:text-xl',\n        undoEndGameIconSize: 'text-base sm:text-lg md:text-xl',\n        modalTitleSize: 'text-2xl sm:text-3xl md:text-4xl',\n        modalButtonPY: 'py-3.5 sm:py-4.5 md:py-5.5',\n        modalButtonText: 'text-xl sm:text-2xl md:text-3xl',\n        modalBottomButtonPY: 'py-3 sm:py-3.5 md:py-4.5',\n        modalBottomButtonText: 'text-lg sm:text-xl md:text-2xl',\n        gapBetweenCards: 'gap-3 sm:gap-4 md:gap-5',\n        mainTitleIconSize: 'text-2xl sm:text-3xl md:text-4xl',\n        mainTitleTextSize: 'text-3xl sm:text-4xl md:text-5xl',\n        mainTitleMarginBottom: 'mb-1 sm:mb-2 md:mb-3'\n    };\n    else if (numPlayers <= 6) stylesConfig = {\n        cardPadding: 'p-3 sm:p-4 md:p-5',\n        playerNameSize: 'text-2xl sm:text-3xl md:text-4xl',\n        teamMemberSize: 'text-lg sm:text-xl md:text-2xl',\n        sbHitsSize: 'text-2xl sm:text-3xl md:text-3xl',\n        targetIconSize: 'text-5xl sm:text-6xl md:text-7xl',\n        targetTextSize: 'text-6xl sm:text-7xl md:text-8xl',\n        lastActionSize: 'text-base sm:text-lg md:text-xl',\n        segmentFontSize: 'text-base sm:text-lg md:text-xl',\n        segmentSizeClasses: 'w-10 h-10 sm:w-12 sm:h-12 md:w-14 md:h-14',\n        progressTrackGap: 'gap-1 sm:gap-1.5',\n        actionButtonsColumnWidth: 'w-40 sm:w-48 md:w-52',\n        actionButtonColumnGap: 'space-y-1 sm:space-y-1.5',\n        aimingForSize: 'text-lg sm:text-xl md:text-2xl',\n        recordHitButtonPY: 'py-2 sm:py-2.5 md:py-3',\n        recordHitButtonText: 'text-base sm:text-lg md:text-xl',\n        endTurnButtonPY: 'py-2 sm:py-2.5 md:py-3',\n        endTurnButtonText: 'text-base sm:text-lg md:text-xl',\n        undoEndGameButtonPY: 'py-1.5 sm:py-2 md:py-2.5',\n        undoEndGameButtonText: 'text-sm sm:text-base md:text-lg',\n        undoEndGameIconSize: 'text-sm sm:text-base md:text-lg',\n        modalTitleSize: 'text-xl sm:text-2xl md:text-3xl',\n        modalButtonPY: 'py-3 sm:py-4',\n        modalButtonText: 'text-lg sm:text-xl md:text-2xl',\n        modalBottomButtonPY: 'py-2.5 sm:py-3',\n        modalBottomButtonText: 'text-base sm:text-lg md:text-xl',\n        gapBetweenCards: 'gap-2 sm:gap-3 md:gap-4',\n        mainTitleIconSize: 'text-xl sm:text-2xl md:text-3xl',\n        mainTitleTextSize: 'text-2xl sm:text-3xl md:text-4xl',\n        mainTitleMarginBottom: 'mb-1 sm:mb-1.5 md:mb-2'\n    };\n    else stylesConfig = {\n        cardPadding: 'p-2 sm:p-2.5',\n        playerNameSize: 'text-lg sm:text-xl md:text-2xl',\n        teamMemberSize: 'text-sm sm:text-base md:text-lg',\n        sbHitsSize: 'text-xl sm:text-2xl md:text-2xl',\n        targetIconSize: 'text-3xl sm:text-4xl md:text-5xl',\n        targetTextSize: 'text-4xl sm:text-5xl md:text-6xl',\n        lastActionSize: 'text-xs sm:text-sm md:text-base',\n        segmentFontSize: 'text-xs sm:text-sm md:text-base',\n        segmentSizeClasses: 'w-6 h-6 sm:w-7 sm:h-7 md:w-8 md:h-8',\n        progressTrackGap: 'gap-0.5',\n        actionButtonsColumnWidth: 'w-32 sm:w-36 md:w-40',\n        actionButtonColumnGap: 'space-y-0.5 sm:space-y-1',\n        aimingForSize: 'text-sm sm:text-base md:text-lg',\n        recordHitButtonPY: 'py-1 sm:py-1.5 md:py-2',\n        recordHitButtonText: 'text-xs sm:text-sm md:text-base',\n        endTurnButtonPY: 'py-1 sm:py-1.5 md:py-2',\n        endTurnButtonText: 'text-xs sm:text-sm md:text-base',\n        undoEndGameButtonPY: 'py-0.5 sm:py-1 md:py-1.5',\n        undoEndGameButtonText: 'text-xs sm:text-sm',\n        undoEndGameIconSize: 'text-xs sm:text-sm',\n        modalTitleSize: 'text-lg sm:text-xl',\n        modalButtonPY: 'py-2 sm:py-2.5',\n        modalButtonText: 'text-base sm:text-lg',\n        modalBottomButtonPY: 'py-1.5 sm:py-2',\n        modalBottomButtonText: 'text-sm sm:text-base',\n        gapBetweenCards: 'gap-1 sm:gap-1.5 md:gap-2',\n        mainTitleIconSize: 'text-lg sm:text-xl md:text-2xl',\n        mainTitleTextSize: 'text-xl sm:text-2xl md:text-3xl',\n        mainTitleMarginBottom: 'mb-0.5 sm:mb-1 md:mb-1.5'\n    };\n    // --- 8. Objective Selector Modal ---\n    const AtwObjectiveSelectorModalSimplified = ({ onSelect, onCancel, currentTargetValueForDisplay })=>{\n        const objectivesToSelect = [];\n        for(let i = 1; i <= ATW_OBJECTIVES_NUMBERS_MAX; i++)objectivesToSelect.push({\n            display: String(i),\n            valueToSend: i\n        });\n        objectivesToSelect.push({\n            display: 'SB',\n            valueToSend: ATW_REPORTED_VALUE_SB_CONST\n        });\n        objectivesToSelect.push({\n            display: 'DB',\n            valueToSend: ATW_REPORTED_VALUE_DB_CONST\n        });\n        const modalStyles = displayRole === 'controller' ? {\n            titleSize: 'text-xl font-bold mb-2 game-title-font text-yellow-300 text-center',\n            objectiveButtonClasses: 'py-3.5 px-2 text-xl',\n            bottomButtonClasses: 'py-3 px-4 text-lg',\n            gridContainerClasses: 'grid grid-cols-4 gap-2',\n            padding: 'p-3',\n            maxWidth: 'max-w-xs sm:max-w-sm'\n        } : {\n            titleSize: `${stylesConfig.modalTitleSize} font-bold mb-4 sm:mb-6 game-title-font text-yellow-300 text-center`,\n            objectiveButtonClasses: `${stylesConfig.modalButtonPY} ${stylesConfig.modalButtonText} px-1 sm:px-2`,\n            bottomButtonClasses: `${stylesConfig.modalBottomButtonPY} ${stylesConfig.modalBottomButtonText} px-4 sm:px-6`,\n            gridContainerClasses: 'grid grid-cols-4 sm:grid-cols-5 gap-2',\n            padding: stylesConfig.cardPadding,\n            maxWidth: 'max-w-md sm:max-w-lg'\n        };\n        return React.createElement('div', {\n            className: \"fixed inset-0 bg-black bg-opacity-80 flex items-center justify-center z-50 p-2\"\n        }, React.createElement('div', {\n            className: `bg-gray-800 ${modalStyles.padding} rounded-xl shadow-2xl w-full ${modalStyles.maxWidth} max-h-[90vh] overflow-y-auto flex flex-col`\n        }, React.createElement('h3', {\n            className: modalStyles.titleSize\n        }, `Report Hit (Aiming: ${getDisplayTarget(currentTargetValueForDisplay)})`), React.createElement('div', {\n            className: `${modalStyles.gridContainerClasses} mb-3 flex-grow`\n        }, objectivesToSelect.map((obj)=>{\n            let btnClass = `text-white font-bold ${modalStyles.objectiveButtonClasses} rounded-md transition-all duration-150 ease-in-out transform hover:scale-105 focus:outline-none focus:ring-2 flex items-center justify-center`;\n            if (obj.display === 'SB') btnClass += ' bg-amber-500 hover:bg-amber-600 text-black focus:ring-amber-400';\n            else if (obj.display === 'DB') btnClass += ' bg-rose-500 hover:bg-rose-600 focus:ring-rose-400';\n            else btnClass += ' bg-sky-600 hover:bg-sky-700 focus:ring-sky-400';\n            return React.createElement('button', {\n                key: obj.valueToSend,\n                onClick: ()=>onSelect(obj.valueToSend),\n                className: btnClass\n            }, obj.display);\n        })), React.createElement('div', {\n            className: \"flex flex-col sm:flex-row justify-between items-center mt-auto pt-3 border-t border-gray-700 space-y-2 sm:space-y-0 sm:space-x-2\"\n        }, React.createElement('button', {\n            onClick: ()=>onSelect(ATW_REPORTED_VALUE_MISS_CONST),\n            className: `w-full sm:w-auto bg-red-700 hover:bg-red-800 text-white font-semibold ${modalStyles.bottomButtonClasses} rounded-md transition-colors focus:outline-none focus:ring-2 focus:ring-red-500`\n        }, \"Missed Target\"), React.createElement('button', {\n            onClick: onCancel,\n            className: `w-full sm:w-auto bg-gray-600 hover:bg-gray-700 text-white font-semibold ${modalStyles.bottomButtonClasses} rounded-md transition-colors focus:outline-none focus:ring-2 focus:ring-gray-400`\n        }, \"Cancel\"))));\n    };\n    const shouldShowModal = !!showATWObjectiveSelectorModal && showATWObjectiveSelectorModal.participantIndex === currentPlayerIndex && currentParticipant && !currentParticipant.atw_isWinner;\n    // --- 9. Controller View Rendering Function ---\n    const renderControllerViewAroundTheWorld = ()=>{\n        // Square button styles from BEERS/501\n        const controllerPrimaryButtonClass = \"w-36 h-36 text-xl sm:text-2xl font-bold rounded-lg shadow-md my-2 transition-transform hover:scale-105 active:scale-95 flex items-center justify-center text-center leading-tight\";\n        const controllerSecondaryButtonClass = \"w-32 h-32 text-lg font-bold rounded-lg shadow-md my-2 transition-transform hover:scale-105 active:scale-95 flex items-center justify-center text-center leading-tight\";\n        const controllerInfoTextClass = \"text-base text-center text-slate-300 mb-1\";\n        const controllerPlayerNameClass = \"text-xl game-title-font text-yellow-300 font-semibold text-center mb-1 leading-tight\";\n        const controllerTargetClass = \"text-6xl font-black text-sky-300 my-2 text-center\";\n        const controllerUndoButtonClass = `${controllerSecondaryButtonClass} bg-yellow-500 hover:bg-yellow-600 text-black`;\n        if (!currentParticipant) return React.createElement('div', {\n            className: \"flex items-center justify-center h-full p-4 bg-slate-800 rounded-lg\"\n        }, React.createElement('p', {\n            className: controllerInfoTextClass\n        }, \"Waiting for player data...\"));\n        const displayName = getPlayerDisplayName(currentParticipant, currentPlayerTurnInTeam);\n        const playerTargetDisplay = getDisplayTarget(currentParticipant.atw_currentTargetValue, currentParticipant.atw_isWinner);\n        const isWinner = currentParticipant.atw_isWinner === true;\n        const showPlayerActionButtons = !isWinner && showAroundTheWorldActionPrompt && showAroundTheWorldActionPrompt.participantIndex === currentPlayerIndex && !shouldShowModal;\n        return React.createElement('div', {\n            className: \"flex flex-col items-center justify-around h-full p-3 space-y-3 bg-slate-800 rounded-lg\"\n        }, React.createElement('div', {\n            className: \"text-center w-full\"\n        }, React.createElement('h3', {\n            className: controllerPlayerNameClass\n        }, `Turn: ${displayName}`), isWinner ? React.createElement('p', {\n            className: `${controllerTargetClass} text-emerald-400 animate-pulse`\n        }, ICON_WINNER_ATW) : React.createElement('p', {\n            className: controllerTargetClass\n        }, playerTargetDisplay), currentParticipant.atw_has_hit_sb_this_game && !isWinner && React.createElement('p', {\n            className: `${controllerInfoTextClass} text-orange-300`\n        }, \"\\uD83D\\uDD25 SB Qualified! Aim for DB!\")), React.createElement('div', {\n            className: \"w-full max-w-xs space-y-3 flex flex-col items-center\"\n        }, showPlayerActionButtons && React.createElement(React.Fragment, null, React.createElement('button', {\n            onClick: handleRequestObjectiveEntry,\n            className: `${controllerPrimaryButtonClass} bg-teal-500 hover:bg-teal-600 text-white`\n        }, ICON_RECORD_HIT_ATW + \" Record Hit\"), React.createElement('button', {\n            onClick: handlePlayerEndsTurn,\n            className: `${controllerSecondaryButtonClass} bg-slate-600 hover:bg-slate-700 text-white`\n        }, ICON_END_TURN_ATW + \" End Turn\")), canUndo && React.createElement('button', {\n            onClick: handleUndo,\n            className: controllerUndoButtonClass\n        }, ICON_UNDO_ATW + \" Undo\")), shouldShowModal && React.createElement(AtwObjectiveSelectorModalSimplified, {\n            onSelect: handleObjectiveSelected,\n            onCancel: handleCancelObjectiveSelector,\n            currentTargetValueForDisplay: showATWObjectiveSelectorModal.currentTargetValue\n        }));\n    };\n    // --- 10. Main Display View Rendering Function ---\n    const renderMainDisplayViewAroundTheWorld = ()=>{\n        // Updated baseSegmentClasses to make segments circular and add transitions\n        const baseSegmentClasses = `atw-progress-segment rounded-full text-center font-bold inline-flex items-center justify-center transition-all duration-300 ease-in-out leading-none ${stylesConfig.segmentFontSize} ${stylesConfig.segmentSizeClasses}`;\n        return React.createElement('div', {\n            className: \"around-the-world-game-area w-full px-0.5 sm:px-1 py-1 flex flex-col h-full bg-slate-900 text-slate-100\"\n        }, React.createElement('h2', {\n            className: `flex items-center justify-center font-bold game-title-font text-yellow-300 text-center ${stylesConfig.mainTitleMarginBottom}`\n        }, React.createElement('span', {\n            className: `${stylesConfig.mainTitleIconSize} mr-1 sm:mr-2`\n        }, \"\\uD83C\\uDF0D\"), React.createElement('span', {\n            className: stylesConfig.mainTitleTextSize\n        }, \"ATW\"), React.createElement('span', {\n            className: `${stylesConfig.mainTitleIconSize} ml-1 sm:ml-2`\n        }, \"\\uD83C\\uDFAF\")), React.createElement('div', {\n            className: `flex flex-col flex-grow min-h-0 overflow-y-auto custom-scrollbar ${stylesConfig.gapBetweenCards}`\n        }, participants.map((p, index)=>{\n            if (!p || typeof p !== 'object') return null;\n            const isCurrentTurnPlayer = index === currentPlayerIndex;\n            const playerTargetDisplay = getDisplayTarget(p.atw_currentTargetValue, p.atw_isWinner);\n            const isWinner = p.atw_isWinner === true;\n            const hitsLog = Array.isArray(p.atw_hitsLog) ? p.atw_hitsLog : [];\n            const sbHitCount = p.atw_sb_hit_count || 0;\n            const hasHitSbThisGame = p.atw_has_hit_sb_this_game === true;\n            let playerCardBg = PLAYER_COLORS[index % PLAYER_COLORS.length];\n            let nameAndTargetColor = 'text-white';\n            if (isCurrentTurnPlayer && !shouldShowModal) playerCardBg = 'bg-indigo-600';\n            if (isWinner) playerCardBg = \"bg-emerald-600\";\n            const assignedBg = PLAYER_COLORS[index % PLAYER_COLORS.length];\n            if (!isCurrentTurnPlayer && !isWinner && (assignedBg.includes('yellow') || assignedBg.includes('pink') || assignedBg.includes('orange'))) nameAndTargetColor = 'text-black';\n            let ringStyle = 'ring-1 ring-gray-700';\n            let scaleStyle = 'transform scale-100';\n            let extraShadow = 'shadow-lg';\n            if (isWinner) {\n                ringStyle = \"ring-2 sm:ring-4 ring-emerald-400\";\n                extraShadow = \"shadow-2xl shadow-emerald-500/50\";\n            } else if (isCurrentTurnPlayer && !shouldShowModal) {\n                ringStyle = \"ring-2 sm:ring-4 ring-yellow-400\";\n                extraShadow = \"shadow-xl sm:shadow-2xl shadow-yellow-500/50\";\n                scaleStyle = 'transform scale-100 sm:scale-102';\n            }\n            let cardClasses = `atw-player-card ${playerCardBg} ${ringStyle} ${scaleStyle} ${extraShadow} rounded-lg sm:rounded-xl flex flex-col justify-between transition-all duration-300 ease-in-out overflow-hidden ${stylesConfig.cardPadding}`;\n            const lastActionDisplayFromLog = hitsLog.length > 0 ? hitsLog[hitsLog.length - 1].display || 'N/A' : 'None';\n            // Updated getSegmentClasses for more visual appeal\n            const getSegmentClasses = (segmentCanonicalValue)=>{\n                const currentTargetValue = p.atw_currentTargetValue;\n                const isCurrentActualTargetSegment = !isWinner && currentTargetValue === segmentCanonicalValue;\n                let segmentStyle = '';\n                let pulseClass = isCurrentActualTargetSegment ? 'animate-pulse' : ''; // Pulse for current target\n                if (isWinner) {\n                    let greenUpTo = ATW_TARGET_WIN_DB; // Default to DB for full win\n                    if (currentTargetValue === ATW_LOGICAL_WIN_VIA_SB || currentTargetValue === ATW_TARGET_QUALIFY_SB) greenUpTo = ATW_TARGET_QUALIFY_SB;\n                    segmentStyle = segmentCanonicalValue <= greenUpTo ? `bg-emerald-500 text-white font-extrabold shadow-lg ring-1 ring-emerald-300 ${pulseClass}` : 'bg-gray-800 text-gray-600 opacity-50 shadow-inner';\n                } else if (hasHitSbThisGame) {\n                    if (segmentCanonicalValue >= 1 && segmentCanonicalValue <= ATW_OBJECTIVES_NUMBERS_MAX) segmentStyle = 'bg-teal-500 text-white font-bold shadow-md'; // All numbers hit after SB\n                    else if (segmentCanonicalValue === ATW_TARGET_QUALIFY_SB) segmentStyle = `bg-amber-400 text-black font-extrabold ring-2 ring-amber-200 scale-110 shadow-xl animate-bounce`; // Bounce SB when hit\n                    else if (segmentCanonicalValue === ATW_TARGET_WIN_DB) segmentStyle = isCurrentActualTargetSegment ? `bg-rose-500 text-white ring-2 ring-rose-300 scale-110 transform shadow-xl font-bold ${pulseClass}` : 'bg-rose-700 hover:bg-rose-600 text-white font-semibold shadow-md';\n                } else {\n                    if (isCurrentActualTargetSegment) segmentStyle = `bg-sky-500 text-white ring-2 ring-sky-300 scale-110 transform shadow-xl font-bold ${pulseClass}`;\n                    else if (segmentCanonicalValue < currentTargetValue && segmentCanonicalValue <= ATW_OBJECTIVES_NUMBERS_MAX) segmentStyle = 'bg-lime-500 text-white font-semibold shadow-md'; // Hit numbers\n                    else segmentStyle = 'bg-slate-600 text-slate-300 opacity-80 shadow-inner';\n                }\n                return `${baseSegmentClasses} ${segmentStyle}`;\n            };\n            const renderSbHitIcons = ()=>{\n                const icons = [];\n                for(let i = 0; i < MAX_SB_HITS_FOR_WIN; i++){\n                    const isHit = sbHitCount > i;\n                    // Using stars for SB hits\n                    const starClass = isHit ? `text-yellow-400 animate-bounce` // Bouncing filled star for hit\n                     : `text-gray-600 opacity-70`; // Dimmed outline star for no hit\n                    const starIcon = isHit ? \"\\u2605\" : \"\\u2606\";\n                    icons.push(React.createElement('span', {\n                        key: `sb-hit-${p.id}-${i}`,\n                        className: `mx-0.5 ${starClass} leading-none`,\n                        style: {\n                            fontSize: stylesConfig.sbHitsSize\n                        }\n                    }, starIcon));\n                }\n                return icons;\n            };\n            return React.createElement('div', {\n                key: p.id || index,\n                className: cardClasses\n            }, React.createElement('div', {\n                className: \"flex flex-row justify-between items-start w-full mb-0.5 sm:mb-1\"\n            }, React.createElement('div', {\n                className: \"flex-grow pr-1 flex flex-col items-start\"\n            }, React.createElement('div', {\n                className: `atw-player-name truncate font-bold ${nameAndTargetColor} ${stylesConfig.playerNameSize} flex items-center`,\n                style: {\n                    lineHeight: '1.1'\n                }\n            }, getPlayerDisplayName(p, p.type === 'team' ? currentPlayerTurnInTeam : undefined), hasHitSbThisGame && !isWinner && React.createElement('span', {\n                className: `ml-1 sm:ml-2 text-orange-300 ${stylesConfig.teamMemberSize} font-semibold`\n            }, \"\\uD83D\\uDD25 Qualified\")), p.type === 'team' && Array.isArray(p.players) && isCurrentTurnPlayer && React.createElement('span', {\n                className: `block ${nameAndTargetColor} opacity-80 ${stylesConfig.teamMemberSize} mt-0 leading-tight`\n            }, `(${p.players[currentPlayerTurnInTeam] || `P${currentPlayerTurnInTeam + 1}`})`), React.createElement('div', {\n                className: `${nameAndTargetColor} opacity-80 ${stylesConfig.sbHitsSize} mt-0 flex items-center`\n            }, React.createElement('span', {\n                className: \"mr-1 text-sm sm:text-base md:text-lg self-center leading-none\"\n            }, \"SB Hits:\"), renderSbHitIcons()), React.createElement('div', {\n                className: `${nameAndTargetColor} opacity-80 font-medium ${stylesConfig.lastActionSize} mt-0 leading-tight`\n            }, React.createElement('p', {\n                className: \"truncate\"\n            }, React.createElement('span', {\n                className: \"font-bold\"\n            }, \"Last: \"), lastActionDisplayFromLog))), React.createElement('div', {\n                className: `flex-shrink-0 ml-1 flex flex-row items-start`\n            }, React.createElement('div', {\n                className: `flex items-center text-right ${nameAndTargetColor} ${stylesConfig.targetTextSize} w-full justify-end`,\n                style: {\n                    lineHeight: '1'\n                }\n            }, React.createElement('span', {\n                className: `mr-1 sm:mr-2 ${stylesConfig.targetIconSize}`\n            }, \"\\uD83C\\uDFAF\"), ` ${playerTargetDisplay}`))), React.createElement('div', {\n                className: `atw-progress-track my-1 sm:my-1.5 flex flex-wrap items-center justify-center bg-slate-900/50 p-1.5 sm:p-2 md:p-2.5 rounded-md shadow-inner ${stylesConfig.progressTrackGap}`\n            }, [\n                ...Array(ATW_OBJECTIVES_NUMBERS_MAX)\n            ].map((_, i)=>React.createElement('span', {\n                    key: `prog-${p.id}-${i + 1}`,\n                    className: `${getSegmentClasses(i + 1)}`\n                }, i + 1)), React.createElement('span', {\n                key: `prog-${p.id}-sb`,\n                className: `${getSegmentClasses(ATW_TARGET_QUALIFY_SB)}`\n            }, \"SB\"), React.createElement('span', {\n                key: `prog-${p.id}-db`,\n                className: `${getSegmentClasses(ATW_TARGET_WIN_DB)}`\n            }, \"DB\")));\n        })), shouldShowModal && currentParticipant && React.createElement(AtwObjectiveSelectorModalSimplified, {\n            onSelect: handleObjectiveSelected,\n            onCancel: handleCancelObjectiveSelector,\n            currentTargetValueForDisplay: showATWObjectiveSelectorModal.currentTargetValue\n        }));\n    };\n    // --- 11. Conditional Rendering Based on displayRole ---\n    if (displayRole === 'controller') return renderControllerViewAroundTheWorld();\n    else return renderMainDisplayViewAroundTheWorld();\n};\n\n//# sourceMappingURL=DartDisplayV2.e62a9f75.js.map\n","// around_the_world.js - Around The World Game Component (Updated Controller & Player Colors, Jazzed Up Progress Track)\r\n\r\n// Ensure React, GameOverScreen are available globally\r\n// Assuming Tailwind CSS is set up in the project.\r\n\r\n// Player specific background colors (consistent with 501)\r\nconst PLAYER_COLORS = [\r\n    'bg-red-700/70', 'bg-blue-700/70', 'bg-green-700/70', 'bg-cyan-700/70',\r\n    'bg-purple-700/70', 'bg-pink-700/70', 'bg-teal-700/70', 'bg-orange-600/70'\r\n];\r\n\r\n// Icons\r\nconst ICON_LEADER_ATW = \"🎯\";\r\nconst ICON_UNDO_ATW = \"↩️\";\r\nconst ICON_RECORD_HIT_ATW = \"✔️\";\r\nconst ICON_END_TURN_ATW = \"➡️\";\r\nconst ICON_WINNER_ATW = \"🏆\";\r\n\r\n\r\nconst AroundTheWorldGame = ({ gameMode, onGameEnd, socket, gameState, displayRole /* NEW PROP */ }) => {\r\n    // --- 1. Initial Game State Validation ---\r\n    if (!gameState || typeof gameState !== 'object' || gameState.mode !== 'AROUND_THE_WORLD' ||\r\n        !Array.isArray(gameState.participants)) {\r\n        console.error(\"AroundTheWorldGame: Invalid or incomplete gameState\", gameState);\r\n        return React.createElement('div', { className: \"p-10 text-center text-red-500 text-3xl sm:text-4xl\" }, \"Loading ATW Game State or Invalid State...\");\r\n    }\r\n\r\n    // --- 2. Game Over Condition ---\r\n    if (displayRole !== 'controller' && gameState.gameOver && gameState.winner) {\r\n        if (typeof GameOverScreen !== 'undefined') {\r\n            return React.createElement(GameOverScreen, { winner: gameState.winner, onDismiss: () => onGameEnd(false) });\r\n        } else {\r\n            console.warn(\"GameOverScreen component not available to AroundTheWorldGame for main display.\");\r\n            return React.createElement('div', {className: \"p-8 text-center text-green-400 text-4xl font-sans\"}, `Game Over! Winner: ${gameState.winner.name}`);\r\n        }\r\n    }\r\n\r\n    // --- 3. Destructure Game State Properties ---\r\n    const {\r\n        participants = [],\r\n        currentPlayerIndex,\r\n        currentPlayerTurnInTeam,\r\n        showAroundTheWorldActionPrompt,\r\n        showATWObjectiveSelectorModal,\r\n        history,\r\n        ATW_TARGET_QUALIFY_SB,\r\n        ATW_TARGET_WIN_DB,\r\n        ATW_LOGICAL_WIN_VIA_SB,\r\n        ATW_LOGICAL_WIN_VIA_DB,\r\n        ATW_OBJECTIVES_NUMBERS_MAX,\r\n    } = gameState;\r\n\r\n    // --- 4. Current Player and Undo Logic ---\r\n    const currentParticipant = participants[currentPlayerIndex];\r\n    const canUndo = history && Array.isArray(history) && history.length > 1 && !showATWObjectiveSelectorModal;\r\n\r\n    // --- 5. Helper Functions ---\r\n    const getDisplayTarget = (targetValue, isWinnerCard = false) => {\r\n        if (targetValue >= 1 && targetValue <= ATW_OBJECTIVES_NUMBERS_MAX) return String(targetValue);\r\n        if (targetValue === ATW_TARGET_QUALIFY_SB) return 'SB';\r\n        if (targetValue === ATW_TARGET_WIN_DB) return 'DB';\r\n        if (targetValue === ATW_LOGICAL_WIN_VIA_SB || targetValue === ATW_LOGICAL_WIN_VIA_DB || isWinnerCard) return ICON_WINNER_ATW;\r\n        return 'N/A'; \r\n    };\r\n\r\n    const getPlayerDisplayName = (participant, teamMemberIndexIfApplicable) => {\r\n        if (!participant || typeof participant.name !== 'string') return \"Unknown Player\";\r\n        let name = participant.name;\r\n        if (participant.type === 'team' && participant.players && typeof teamMemberIndexIfApplicable === 'number' && participant.players[teamMemberIndexIfApplicable]) {\r\n            name += ` (${participant.players[teamMemberIndexIfApplicable]})`;\r\n        }\r\n        return name;\r\n    };\r\n\r\n    const ATW_REPORTED_VALUE_SB_CONST = 25;\r\n    const ATW_REPORTED_VALUE_DB_CONST = 50;\r\n    const ATW_REPORTED_VALUE_MISS_CONST = 0;\r\n    const MAX_SB_HITS_FOR_WIN = gameState.ATW_MAX_SB_HITS_FOR_WIN || 5;\r\n\r\n\r\n    // --- 6. Event Handlers ---\r\n    const handleRequestObjectiveEntry = () => {\r\n        if (socket && currentParticipant && !currentParticipant.atw_isWinner &&\r\n            showAroundTheWorldActionPrompt && showAroundTheWorldActionPrompt.participantIndex === currentPlayerIndex) {\r\n            socket.emit('aroundTheWorldClientRequestsObjectiveModal');\r\n        }\r\n    };\r\n    const handleObjectiveSelected = (reportedValue) => {\r\n        if (socket && currentParticipant && !currentParticipant.atw_isWinner) {\r\n            socket.emit('aroundTheWorldTurnResult', { reportedValue: reportedValue });\r\n        }\r\n    };\r\n    const handleCancelObjectiveSelector = () => {\r\n        if (socket && showATWObjectiveSelectorModal) {\r\n             socket.emit('aroundTheWorldCancelObjectiveEntry');\r\n        }\r\n    };\r\n    const handlePlayerEndsTurn = () => {\r\n        if (socket && currentParticipant && !currentParticipant.atw_isWinner) {\r\n            socket.emit('aroundTheWorldPlayerEndsTurn');\r\n        }\r\n    };\r\n    const handleUndo = () => { if (socket && canUndo) socket.emit('undoLastAction'); };\r\n\r\n    // --- 7. Dynamic Sizing Logic (from user's reverted code) ---\r\n    const numPlayers = participants.length;\r\n    let stylesConfig;\r\n    if (numPlayers <= 2) { stylesConfig = { cardPadding: 'p-5 sm:p-6 md:p-8', playerNameSize: 'text-4xl sm:text-5xl md:text-6xl lg:text-7xl', teamMemberSize: 'text-2xl sm:text-3xl md:text-4xl', sbHitsSize: 'text-4xl sm:text-5xl md:text-5xl', targetIconSize: 'text-7xl sm:text-8xl md:text-9xl', targetTextSize: 'text-8xl sm:text-9xl md:text-[10rem] lg:text-[11rem]', lastActionSize: 'text-xl sm:text-2xl md:text-3xl', segmentFontSize: 'text-2xl sm:text-3xl md:text-3xl', segmentSizeClasses: 'w-14 h-14 sm:w-16 sm:h-16 md:w-20 md:h-20', progressTrackGap: 'gap-2 sm:gap-2.5', actionButtonsColumnWidth: 'w-48 sm:w-60 md:w-72', actionButtonColumnGap: 'space-y-2 sm:space-y-2.5', aimingForSize: 'text-2xl sm:text-3xl md:text-4xl', recordHitButtonPY: 'py-3 sm:py-4 md:py-5', recordHitButtonText: 'text-xl sm:text-2xl md:text-3xl', endTurnButtonPY: 'py-3 sm:py-4 md:py-5', endTurnButtonText: 'text-xl sm:text-2xl md:text-3xl', undoEndGameButtonPY: 'py-2 sm:py-3 md:py-3.5', undoEndGameButtonText: 'text-lg sm:text-xl md:text-2xl', undoEndGameIconSize: 'text-lg sm:text-xl md:text-2xl', modalTitleSize: 'text-3xl sm:text-4xl md:text-5xl', modalButtonPY: 'py-4 sm:py-5 md:py-6', modalButtonText: 'text-2xl sm:text-3xl md:text-4xl', modalBottomButtonPY: 'py-3 sm:py-4 md:py-5', modalBottomButtonText: 'text-xl sm:text-2xl md:text-3xl', gapBetweenCards: 'gap-4 sm:gap-5 md:gap-6', mainTitleIconSize: 'text-3xl sm:text-4xl md:text-5xl', mainTitleTextSize: 'text-4xl sm:text-5xl md:text-6xl', mainTitleMarginBottom: 'mb-2 sm:mb-3 md:mb-4', };}\r\n    else if (numPlayers <= 4) { stylesConfig = { cardPadding: 'p-4 sm:p-5 md:p-6', playerNameSize: 'text-3xl sm:text-4xl md:text-5xl', teamMemberSize: 'text-xl sm:text-2xl md:text-3xl', sbHitsSize: 'text-3xl sm:text-4xl md:text-4xl', targetIconSize: 'text-6xl sm:text-7xl md:text-8xl', targetTextSize: 'text-7xl sm:text-8xl md:text-9xl', lastActionSize: 'text-lg sm:text-xl md:text-2xl', segmentFontSize: 'text-xl sm:text-2xl md:text-2xl', segmentSizeClasses: 'w-12 h-12 sm:w-14 sm:h-14 md:w-16 md:h-16', progressTrackGap: 'gap-1.5 sm:gap-2', actionButtonsColumnWidth: 'w-44 sm:w-52 md:w-60', actionButtonColumnGap: 'space-y-1.5 sm:space-y-2', aimingForSize: 'text-xl sm:text-2xl md:text-3xl', recordHitButtonPY: 'py-2.5 sm:py-3 md:py-4', recordHitButtonText: 'text-lg sm:text-xl md:text-2xl', endTurnButtonPY: 'py-2.5 sm:py-3 md:py-4', endTurnButtonText: 'text-lg sm:text-xl md:text-2xl', undoEndGameButtonPY: 'py-2 sm:py-2.5 md:py-3', undoEndGameButtonText: 'text-base sm:text-lg md:text-xl', undoEndGameIconSize: 'text-base sm:text-lg md:text-xl', modalTitleSize: 'text-2xl sm:text-3xl md:text-4xl', modalButtonPY: 'py-3.5 sm:py-4.5 md:py-5.5', modalButtonText: 'text-xl sm:text-2xl md:text-3xl', modalBottomButtonPY: 'py-3 sm:py-3.5 md:py-4.5', modalBottomButtonText: 'text-lg sm:text-xl md:text-2xl', gapBetweenCards: 'gap-3 sm:gap-4 md:gap-5', mainTitleIconSize: 'text-2xl sm:text-3xl md:text-4xl', mainTitleTextSize: 'text-3xl sm:text-4xl md:text-5xl', mainTitleMarginBottom: 'mb-1 sm:mb-2 md:mb-3', };}\r\n    else if (numPlayers <= 6) { stylesConfig = { cardPadding: 'p-3 sm:p-4 md:p-5', playerNameSize: 'text-2xl sm:text-3xl md:text-4xl', teamMemberSize: 'text-lg sm:text-xl md:text-2xl', sbHitsSize: 'text-2xl sm:text-3xl md:text-3xl', targetIconSize: 'text-5xl sm:text-6xl md:text-7xl', targetTextSize: 'text-6xl sm:text-7xl md:text-8xl', lastActionSize: 'text-base sm:text-lg md:text-xl', segmentFontSize: 'text-base sm:text-lg md:text-xl', segmentSizeClasses: 'w-10 h-10 sm:w-12 sm:h-12 md:w-14 md:h-14', progressTrackGap: 'gap-1 sm:gap-1.5', actionButtonsColumnWidth: 'w-40 sm:w-48 md:w-52', actionButtonColumnGap: 'space-y-1 sm:space-y-1.5', aimingForSize: 'text-lg sm:text-xl md:text-2xl', recordHitButtonPY: 'py-2 sm:py-2.5 md:py-3', recordHitButtonText: 'text-base sm:text-lg md:text-xl', endTurnButtonPY: 'py-2 sm:py-2.5 md:py-3', endTurnButtonText: 'text-base sm:text-lg md:text-xl', undoEndGameButtonPY: 'py-1.5 sm:py-2 md:py-2.5', undoEndGameButtonText: 'text-sm sm:text-base md:text-lg', undoEndGameIconSize: 'text-sm sm:text-base md:text-lg', modalTitleSize: 'text-xl sm:text-2xl md:text-3xl', modalButtonPY: 'py-3 sm:py-4', modalButtonText: 'text-lg sm:text-xl md:text-2xl', modalBottomButtonPY: 'py-2.5 sm:py-3', modalBottomButtonText: 'text-base sm:text-lg md:text-xl', gapBetweenCards: 'gap-2 sm:gap-3 md:gap-4', mainTitleIconSize: 'text-xl sm:text-2xl md:text-3xl', mainTitleTextSize: 'text-2xl sm:text-3xl md:text-4xl', mainTitleMarginBottom: 'mb-1 sm:mb-1.5 md:mb-2', };}\r\n    else { stylesConfig = { cardPadding: 'p-2 sm:p-2.5', playerNameSize: 'text-lg sm:text-xl md:text-2xl', teamMemberSize: 'text-sm sm:text-base md:text-lg', sbHitsSize: 'text-xl sm:text-2xl md:text-2xl', targetIconSize: 'text-3xl sm:text-4xl md:text-5xl', targetTextSize: 'text-4xl sm:text-5xl md:text-6xl', lastActionSize: 'text-xs sm:text-sm md:text-base', segmentFontSize: 'text-xs sm:text-sm md:text-base', segmentSizeClasses: 'w-6 h-6 sm:w-7 sm:h-7 md:w-8 md:h-8', progressTrackGap: 'gap-0.5', actionButtonsColumnWidth: 'w-32 sm:w-36 md:w-40', actionButtonColumnGap: 'space-y-0.5 sm:space-y-1', aimingForSize: 'text-sm sm:text-base md:text-lg', recordHitButtonPY: 'py-1 sm:py-1.5 md:py-2', recordHitButtonText: 'text-xs sm:text-sm md:text-base', endTurnButtonPY: 'py-1 sm:py-1.5 md:py-2', endTurnButtonText: 'text-xs sm:text-sm md:text-base', undoEndGameButtonPY: 'py-0.5 sm:py-1 md:py-1.5', undoEndGameButtonText: 'text-xs sm:text-sm', undoEndGameIconSize: 'text-xs sm:text-sm', modalTitleSize: 'text-lg sm:text-xl', modalButtonPY: 'py-2 sm:py-2.5', modalButtonText: 'text-base sm:text-lg', modalBottomButtonPY: 'py-1.5 sm:py-2', modalBottomButtonText: 'text-sm sm:text-base', gapBetweenCards: 'gap-1 sm:gap-1.5 md:gap-2', mainTitleIconSize: 'text-lg sm:text-xl md:text-2xl', mainTitleTextSize: 'text-xl sm:text-2xl md:text-3xl', mainTitleMarginBottom: 'mb-0.5 sm:mb-1 md:mb-1.5', };}\r\n\r\n\r\n    // --- 8. Objective Selector Modal ---\r\n    const AtwObjectiveSelectorModalSimplified = ({ onSelect, onCancel, currentTargetValueForDisplay }) => {\r\n        const objectivesToSelect = [];\r\n        for (let i = 1; i <= ATW_OBJECTIVES_NUMBERS_MAX; i++) objectivesToSelect.push({ display: String(i), valueToSend: i });\r\n        objectivesToSelect.push({ display: 'SB', valueToSend: ATW_REPORTED_VALUE_SB_CONST });\r\n        objectivesToSelect.push({ display: 'DB', valueToSend: ATW_REPORTED_VALUE_DB_CONST });\r\n\r\n        const modalStyles = displayRole === 'controller' ? {\r\n            titleSize: 'text-xl font-bold mb-2 game-title-font text-yellow-300 text-center',\r\n            objectiveButtonClasses: 'py-3.5 px-2 text-xl',\r\n            bottomButtonClasses: 'py-3 px-4 text-lg',\r\n            gridContainerClasses: 'grid grid-cols-4 gap-2',\r\n            padding: 'p-3',\r\n            maxWidth: 'max-w-xs sm:max-w-sm'\r\n        } : { \r\n            titleSize: `${stylesConfig.modalTitleSize} font-bold mb-4 sm:mb-6 game-title-font text-yellow-300 text-center`,\r\n            objectiveButtonClasses: `${stylesConfig.modalButtonPY} ${stylesConfig.modalButtonText} px-1 sm:px-2`,\r\n            bottomButtonClasses: `${stylesConfig.modalBottomButtonPY} ${stylesConfig.modalBottomButtonText} px-4 sm:px-6`,\r\n            gridContainerClasses: 'grid grid-cols-4 sm:grid-cols-5 gap-2',\r\n            padding: stylesConfig.cardPadding, \r\n            maxWidth: 'max-w-md sm:max-w-lg'\r\n        };\r\n\r\n        return (\r\n            React.createElement('div', { className: \"fixed inset-0 bg-black bg-opacity-80 flex items-center justify-center z-50 p-2\" },\r\n                React.createElement('div', { className: `bg-gray-800 ${modalStyles.padding} rounded-xl shadow-2xl w-full ${modalStyles.maxWidth} max-h-[90vh] overflow-y-auto flex flex-col` },\r\n                    React.createElement('h3', { className: modalStyles.titleSize }, `Report Hit (Aiming: ${getDisplayTarget(currentTargetValueForDisplay)})`),\r\n                    React.createElement('div', { className: `${modalStyles.gridContainerClasses} mb-3 flex-grow` },\r\n                        objectivesToSelect.map(obj => {\r\n                            let btnClass = `text-white font-bold ${modalStyles.objectiveButtonClasses} rounded-md transition-all duration-150 ease-in-out transform hover:scale-105 focus:outline-none focus:ring-2 flex items-center justify-center`;\r\n                            if (obj.display === 'SB') btnClass += ' bg-amber-500 hover:bg-amber-600 text-black focus:ring-amber-400';\r\n                            else if (obj.display === 'DB') btnClass += ' bg-rose-500 hover:bg-rose-600 focus:ring-rose-400';\r\n                            else btnClass += ' bg-sky-600 hover:bg-sky-700 focus:ring-sky-400';\r\n                            return React.createElement('button', { key: obj.valueToSend, onClick: () => onSelect(obj.valueToSend), className: btnClass }, obj.display);\r\n                        })\r\n                    ),\r\n                    React.createElement('div', { className: \"flex flex-col sm:flex-row justify-between items-center mt-auto pt-3 border-t border-gray-700 space-y-2 sm:space-y-0 sm:space-x-2\" },\r\n                        React.createElement('button', { onClick: () => onSelect(ATW_REPORTED_VALUE_MISS_CONST), className: `w-full sm:w-auto bg-red-700 hover:bg-red-800 text-white font-semibold ${modalStyles.bottomButtonClasses} rounded-md transition-colors focus:outline-none focus:ring-2 focus:ring-red-500` }, \"Missed Target\"),\r\n                        React.createElement('button', { onClick: onCancel, className: `w-full sm:w-auto bg-gray-600 hover:bg-gray-700 text-white font-semibold ${modalStyles.bottomButtonClasses} rounded-md transition-colors focus:outline-none focus:ring-2 focus:ring-gray-400` }, \"Cancel\")\r\n                    )\r\n                )\r\n            )\r\n        );\r\n    };\r\n\r\n    const shouldShowModal = !!showATWObjectiveSelectorModal &&\r\n                           showATWObjectiveSelectorModal.participantIndex === currentPlayerIndex &&\r\n                           currentParticipant && !currentParticipant.atw_isWinner;\r\n\r\n    // --- 9. Controller View Rendering Function ---\r\n    const renderControllerViewAroundTheWorld = () => {\r\n        // Square button styles from BEERS/501\r\n        const controllerPrimaryButtonClass = \"w-36 h-36 text-xl sm:text-2xl font-bold rounded-lg shadow-md my-2 transition-transform hover:scale-105 active:scale-95 flex items-center justify-center text-center leading-tight\";\r\n        const controllerSecondaryButtonClass = \"w-32 h-32 text-lg font-bold rounded-lg shadow-md my-2 transition-transform hover:scale-105 active:scale-95 flex items-center justify-center text-center leading-tight\";\r\n        \r\n        const controllerInfoTextClass = \"text-base text-center text-slate-300 mb-1\";\r\n        const controllerPlayerNameClass = \"text-xl game-title-font text-yellow-300 font-semibold text-center mb-1 leading-tight\";\r\n        const controllerTargetClass = \"text-6xl font-black text-sky-300 my-2 text-center\";\r\n        const controllerUndoButtonClass = `${controllerSecondaryButtonClass} bg-yellow-500 hover:bg-yellow-600 text-black`;\r\n\r\n        if (!currentParticipant) {\r\n            return React.createElement('div', { className: \"flex items-center justify-center h-full p-4 bg-slate-800 rounded-lg\" }, React.createElement('p', { className: controllerInfoTextClass }, \"Waiting for player data...\"));\r\n        }\r\n\r\n        const displayName = getPlayerDisplayName(currentParticipant, currentPlayerTurnInTeam);\r\n        const playerTargetDisplay = getDisplayTarget(currentParticipant.atw_currentTargetValue, currentParticipant.atw_isWinner);\r\n        const isWinner = currentParticipant.atw_isWinner === true;\r\n        const showPlayerActionButtons = !isWinner && showAroundTheWorldActionPrompt && showAroundTheWorldActionPrompt.participantIndex === currentPlayerIndex && !shouldShowModal;\r\n\r\n        return React.createElement('div', { className: \"flex flex-col items-center justify-around h-full p-3 space-y-3 bg-slate-800 rounded-lg\" }, \r\n            React.createElement('div', { className: \"text-center w-full\" }, \r\n                React.createElement('h3', { className: controllerPlayerNameClass }, `Turn: ${displayName}`),\r\n                isWinner ?\r\n                    React.createElement('p', { className: `${controllerTargetClass} text-emerald-400 animate-pulse` }, ICON_WINNER_ATW) :\r\n                    React.createElement('p', { className: controllerTargetClass }, playerTargetDisplay),\r\n                currentParticipant.atw_has_hit_sb_this_game && !isWinner && React.createElement('p', {className: `${controllerInfoTextClass} text-orange-300`}, \"🔥 SB Qualified! Aim for DB!\")\r\n            ),\r\n            React.createElement('div', { className: \"w-full max-w-xs space-y-3 flex flex-col items-center\" }, \r\n                showPlayerActionButtons && React.createElement(React.Fragment, null,\r\n                    React.createElement('button', {\r\n                        onClick: handleRequestObjectiveEntry,\r\n                        className: `${controllerPrimaryButtonClass} bg-teal-500 hover:bg-teal-600 text-white`\r\n                    }, ICON_RECORD_HIT_ATW + \" Record Hit\"),\r\n                    React.createElement('button', {\r\n                        onClick: handlePlayerEndsTurn,\r\n                        className: `${controllerSecondaryButtonClass} bg-slate-600 hover:bg-slate-700 text-white`\r\n                    }, ICON_END_TURN_ATW + \" End Turn\")\r\n                ),\r\n                canUndo && React.createElement('button', {\r\n                    onClick: handleUndo,\r\n                    className: controllerUndoButtonClass \r\n                }, ICON_UNDO_ATW + \" Undo\")\r\n            ),\r\n            shouldShowModal && React.createElement(AtwObjectiveSelectorModalSimplified, {\r\n                onSelect: handleObjectiveSelected,\r\n                onCancel: handleCancelObjectiveSelector,\r\n                currentTargetValueForDisplay: showATWObjectiveSelectorModal.currentTargetValue\r\n            })\r\n        );\r\n    };\r\n\r\n\r\n    // --- 10. Main Display View Rendering Function ---\r\n    const renderMainDisplayViewAroundTheWorld = () => {\r\n        // Updated baseSegmentClasses to make segments circular and add transitions\r\n        const baseSegmentClasses = `atw-progress-segment rounded-full text-center font-bold inline-flex items-center justify-center transition-all duration-300 ease-in-out leading-none ${stylesConfig.segmentFontSize} ${stylesConfig.segmentSizeClasses}`;\r\n        \r\n        return (\r\n            React.createElement('div', { className: \"around-the-world-game-area w-full px-0.5 sm:px-1 py-1 flex flex-col h-full bg-slate-900 text-slate-100\" }, \r\n            React.createElement('h2', { className: `flex items-center justify-center font-bold game-title-font text-yellow-300 text-center ${stylesConfig.mainTitleMarginBottom}` }, React.createElement('span', { className: `${stylesConfig.mainTitleIconSize} mr-1 sm:mr-2` }, \"🌍\"), React.createElement('span', { className: stylesConfig.mainTitleTextSize }, \"ATW\"), React.createElement('span', { className: `${stylesConfig.mainTitleIconSize} ml-1 sm:ml-2` }, \"🎯\")),\r\n            React.createElement('div', { className: `flex flex-col flex-grow min-h-0 overflow-y-auto custom-scrollbar ${stylesConfig.gapBetweenCards}` },\r\n                participants.map((p, index) => {\r\n                    if (!p || typeof p !== 'object') return null; \r\n                    const isCurrentTurnPlayer = index === currentPlayerIndex;\r\n                    const playerTargetDisplay = getDisplayTarget(p.atw_currentTargetValue, p.atw_isWinner);\r\n                    const isWinner = p.atw_isWinner === true;\r\n                    const hitsLog = Array.isArray(p.atw_hitsLog) ? p.atw_hitsLog : [];\r\n                    const sbHitCount = p.atw_sb_hit_count || 0;\r\n                    const hasHitSbThisGame = p.atw_has_hit_sb_this_game === true;\r\n\r\n                    let playerCardBg = PLAYER_COLORS[index % PLAYER_COLORS.length]; \r\n                    let nameAndTargetColor = 'text-white'; \r\n                    \r\n                    if (isCurrentTurnPlayer && !shouldShowModal) {\r\n                        playerCardBg = 'bg-indigo-600'; \r\n                    }\r\n                    if (isWinner) {\r\n                        playerCardBg = \"bg-emerald-600\";\r\n                    }\r\n                    \r\n                    const assignedBg = PLAYER_COLORS[index % PLAYER_COLORS.length];\r\n                    if (!isCurrentTurnPlayer && !isWinner && (assignedBg.includes('yellow') || assignedBg.includes('pink') || assignedBg.includes('orange'))) {\r\n                        nameAndTargetColor = 'text-black';\r\n                    }\r\n\r\n                    let ringStyle = 'ring-1 ring-gray-700'; \r\n                    let scaleStyle = 'transform scale-100'; \r\n                    let extraShadow = 'shadow-lg';\r\n                    if (isWinner) { ringStyle = \"ring-2 sm:ring-4 ring-emerald-400\"; extraShadow = \"shadow-2xl shadow-emerald-500/50\"; }\r\n                    else if (isCurrentTurnPlayer && !shouldShowModal) { ringStyle = \"ring-2 sm:ring-4 ring-yellow-400\"; extraShadow = \"shadow-xl sm:shadow-2xl shadow-yellow-500/50\"; scaleStyle = 'transform scale-100 sm:scale-102'; }\r\n                    \r\n                    let cardClasses = `atw-player-card ${playerCardBg} ${ringStyle} ${scaleStyle} ${extraShadow} rounded-lg sm:rounded-xl flex flex-col justify-between transition-all duration-300 ease-in-out overflow-hidden ${stylesConfig.cardPadding}`;\r\n                    const lastActionDisplayFromLog = hitsLog.length > 0 ? (hitsLog[hitsLog.length - 1].display || 'N/A') : 'None';\r\n\r\n                    // Updated getSegmentClasses for more visual appeal\r\n                    const getSegmentClasses = (segmentCanonicalValue) => {\r\n                        const currentTargetValue = p.atw_currentTargetValue;\r\n                        const isCurrentActualTargetSegment = !isWinner && currentTargetValue === segmentCanonicalValue;\r\n                        let segmentStyle = '';\r\n                        let pulseClass = isCurrentActualTargetSegment ? 'animate-pulse' : ''; // Pulse for current target\r\n\r\n                        if (isWinner) {\r\n                            let greenUpTo = ATW_TARGET_WIN_DB; // Default to DB for full win\r\n                            if (currentTargetValue === ATW_LOGICAL_WIN_VIA_SB || currentTargetValue === ATW_TARGET_QUALIFY_SB) {\r\n                                greenUpTo = ATW_TARGET_QUALIFY_SB;\r\n                            }\r\n                            segmentStyle = segmentCanonicalValue <= greenUpTo \r\n                                ? `bg-emerald-500 text-white font-extrabold shadow-lg ring-1 ring-emerald-300 ${pulseClass}` \r\n                                : 'bg-gray-800 text-gray-600 opacity-50 shadow-inner';\r\n                        } else if (hasHitSbThisGame) { // SB Qualified\r\n                            if (segmentCanonicalValue >= 1 && segmentCanonicalValue <= ATW_OBJECTIVES_NUMBERS_MAX) {\r\n                                segmentStyle = 'bg-teal-500 text-white font-bold shadow-md'; // All numbers hit after SB\r\n                            } else if (segmentCanonicalValue === ATW_TARGET_QUALIFY_SB) {\r\n                                segmentStyle = `bg-amber-400 text-black font-extrabold ring-2 ring-amber-200 scale-110 shadow-xl animate-bounce`; // Bounce SB when hit\r\n                            } else if (segmentCanonicalValue === ATW_TARGET_WIN_DB) { // DB Target\r\n                                segmentStyle = isCurrentActualTargetSegment \r\n                                    ? `bg-rose-500 text-white ring-2 ring-rose-300 scale-110 transform shadow-xl font-bold ${pulseClass}` \r\n                                    : 'bg-rose-700 hover:bg-rose-600 text-white font-semibold shadow-md';\r\n                            }\r\n                        } else { // Not SB Qualified yet\r\n                            if (isCurrentActualTargetSegment) {\r\n                                segmentStyle = `bg-sky-500 text-white ring-2 ring-sky-300 scale-110 transform shadow-xl font-bold ${pulseClass}`;\r\n                            } else if (segmentCanonicalValue < currentTargetValue && segmentCanonicalValue <= ATW_OBJECTIVES_NUMBERS_MAX) {\r\n                                segmentStyle = 'bg-lime-500 text-white font-semibold shadow-md'; // Hit numbers\r\n                            } else { // Future targets\r\n                                segmentStyle = 'bg-slate-600 text-slate-300 opacity-80 shadow-inner';\r\n                            }\r\n                        }\r\n                        return `${baseSegmentClasses} ${segmentStyle}`;\r\n                    };\r\n                    \r\n                    const renderSbHitIcons = () => { \r\n                        const icons = []; \r\n                        for (let i = 0; i < MAX_SB_HITS_FOR_WIN; i++) { \r\n                            const isHit = sbHitCount > i;\r\n                            // Using stars for SB hits\r\n                            const starClass = isHit \r\n                                ? `text-yellow-400 animate-bounce` // Bouncing filled star for hit\r\n                                : `text-gray-600 opacity-70`;    // Dimmed outline star for no hit\r\n                            const starIcon = isHit ? '★' : '☆';\r\n                            icons.push(React.createElement('span', { \r\n                                key: `sb-hit-${p.id}-${i}`, \r\n                                className: `mx-0.5 ${starClass} leading-none`, \r\n                                style:{fontSize: stylesConfig.sbHitsSize} \r\n                            }, starIcon)); \r\n                        } \r\n                        return icons; \r\n                    };\r\n\r\n                    return ( React.createElement('div', { key: p.id || index, className: cardClasses },\r\n                        React.createElement('div', { className: \"flex flex-row justify-between items-start w-full mb-0.5 sm:mb-1\" },\r\n                            React.createElement('div', { className: \"flex-grow pr-1 flex flex-col items-start\" },\r\n                                React.createElement('div', { className: `atw-player-name truncate font-bold ${nameAndTargetColor} ${stylesConfig.playerNameSize} flex items-center`, style: { lineHeight: '1.1' } }, getPlayerDisplayName(p, p.type === 'team' ? currentPlayerTurnInTeam : undefined), hasHitSbThisGame && !isWinner && React.createElement('span', { className: `ml-1 sm:ml-2 text-orange-300 ${stylesConfig.teamMemberSize} font-semibold` }, \"🔥 Qualified\")),\r\n                                p.type === 'team' && Array.isArray(p.players) && isCurrentTurnPlayer && (React.createElement('span', { className: `block ${nameAndTargetColor} opacity-80 ${stylesConfig.teamMemberSize} mt-0 leading-tight` }, `(${p.players[currentPlayerTurnInTeam] || `P${currentPlayerTurnInTeam + 1}`})`)),\r\n                                React.createElement('div', { className: `${nameAndTargetColor} opacity-80 ${stylesConfig.sbHitsSize} mt-0 flex items-center` }, React.createElement('span', { className: \"mr-1 text-sm sm:text-base md:text-lg self-center leading-none\" }, \"SB Hits:\"), renderSbHitIcons()),\r\n                                React.createElement('div', { className: `${nameAndTargetColor} opacity-80 font-medium ${stylesConfig.lastActionSize} mt-0 leading-tight` }, React.createElement('p', {className: \"truncate\"}, React.createElement('span', {className: \"font-bold\"}, \"Last: \"), lastActionDisplayFromLog))\r\n                            ),\r\n                            React.createElement('div', { className: `flex-shrink-0 ml-1 flex flex-row items-start` },\r\n                                React.createElement('div', { className: `flex items-center text-right ${nameAndTargetColor} ${stylesConfig.targetTextSize} w-full justify-end`, style: { lineHeight: '1' } },\r\n                                    React.createElement('span', { className: `mr-1 sm:mr-2 ${stylesConfig.targetIconSize}`}, \"🎯\"),\r\n                                    ` ${playerTargetDisplay}`)\r\n                            )\r\n                        ),\r\n                        React.createElement('div', { className: `atw-progress-track my-1 sm:my-1.5 flex flex-wrap items-center justify-center bg-slate-900/50 p-1.5 sm:p-2 md:p-2.5 rounded-md shadow-inner ${stylesConfig.progressTrackGap}` },\r\n                            [...Array(ATW_OBJECTIVES_NUMBERS_MAX)].map((_, i) => (React.createElement('span', { key: `prog-${p.id}-${i+1}`, className: `${getSegmentClasses(i+1)}` }, i+1))),\r\n                            React.createElement('span', { key: `prog-${p.id}-sb`, className: `${getSegmentClasses(ATW_TARGET_QUALIFY_SB)}` }, \"SB\"),\r\n                            React.createElement('span', { key: `prog-${p.id}-db`, className: `${getSegmentClasses(ATW_TARGET_WIN_DB)}` }, \"DB\")\r\n                        )\r\n                    ));\r\n                })\r\n            ),\r\n            shouldShowModal && currentParticipant && React.createElement(AtwObjectiveSelectorModalSimplified, {\r\n                onSelect: handleObjectiveSelected,\r\n                onCancel: handleCancelObjectiveSelector,\r\n                currentTargetValueForDisplay: showATWObjectiveSelectorModal.currentTargetValue\r\n            })\r\n        ));\r\n    };\r\n\r\n    // --- 11. Conditional Rendering Based on displayRole ---\r\n    if (displayRole === 'controller') {\r\n        return renderControllerViewAroundTheWorld();\r\n    } else {\r\n        return renderMainDisplayViewAroundTheWorld(); \r\n    }\r\n};\r\n"],"names":["PLAYER_COLORS","ICON_LEADER_ATW","ICON_UNDO_ATW","ICON_RECORD_HIT_ATW","ICON_END_TURN_ATW","ICON_WINNER_ATW","AroundTheWorldGame","gameMode","onGameEnd","socket","gameState","displayRole","stylesConfig","mode","Array","isArray","participants","console","error","React","createElement","className","gameOver","winner","GameOverScreen","onDismiss","warn","name","currentPlayerIndex","currentPlayerTurnInTeam","showAroundTheWorldActionPrompt","showATWObjectiveSelectorModal","history","ATW_TARGET_QUALIFY_SB","ATW_TARGET_WIN_DB","ATW_LOGICAL_WIN_VIA_SB","ATW_LOGICAL_WIN_VIA_DB","ATW_OBJECTIVES_NUMBERS_MAX","currentParticipant","canUndo","length","getDisplayTarget","targetValue","isWinnerCard","String","getPlayerDisplayName","participant","teamMemberIndexIfApplicable","type","players","MAX_SB_HITS_FOR_WIN","ATW_MAX_SB_HITS_FOR_WIN","handleRequestObjectiveEntry","atw_isWinner","participantIndex","emit","handleObjectiveSelected","reportedValue","handleCancelObjectiveSelector","handlePlayerEndsTurn","handleUndo","numPlayers","cardPadding","playerNameSize","teamMemberSize","sbHitsSize","targetIconSize","targetTextSize","lastActionSize","segmentFontSize","segmentSizeClasses","progressTrackGap","actionButtonsColumnWidth","actionButtonColumnGap","aimingForSize","recordHitButtonPY","recordHitButtonText","endTurnButtonPY","endTurnButtonText","undoEndGameButtonPY","undoEndGameButtonText","undoEndGameIconSize","modalTitleSize","modalButtonPY","modalButtonText","modalBottomButtonPY","modalBottomButtonText","gapBetweenCards","mainTitleIconSize","mainTitleTextSize","mainTitleMarginBottom","AtwObjectiveSelectorModalSimplified","onSelect","onCancel","currentTargetValueForDisplay","objectivesToSelect","i","push","display","valueToSend","modalStyles","titleSize","objectiveButtonClasses","bottomButtonClasses","gridContainerClasses","padding","maxWidth","map","obj","btnClass","key","onClick","shouldShowModal","renderControllerViewAroundTheWorld","controllerSecondaryButtonClass","controllerInfoTextClass","controllerTargetClass","controllerUndoButtonClass","displayName","playerTargetDisplay","atw_currentTargetValue","isWinner","showPlayerActionButtons","atw_has_hit_sb_this_game","Fragment","currentTargetValue","renderMainDisplayViewAroundTheWorld","baseSegmentClasses","p","index","isCurrentTurnPlayer","hitsLog","atw_hitsLog","sbHitCount","atw_sb_hit_count","hasHitSbThisGame","playerCardBg","nameAndTargetColor","assignedBg","includes","ringStyle","scaleStyle","extraShadow","cardClasses","lastActionDisplayFromLog","getSegmentClasses","segmentCanonicalValue","isCurrentActualTargetSegment","segmentStyle","pulseClass","greenUpTo","id","style","lineHeight","undefined","renderSbHitIcons","icons","isHit","starClass","starIcon","fontSize","_"],"version":3,"file":"DartDisplayV2.e62a9f75.js.map"}