<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Darts Scoring App</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;900&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            overscroll-behavior: none;
            background-color: #111827; /* Tailwind gray-900 */
            color: #f3f4f6; /* Tailwind gray-100 */
            margin: 0;
            padding: 0;
            height: 100vh;
            overflow: hidden; /* Prevent body scroll, main area will scroll */
        }
        #root {
            height: 100%;
            display: flex;
            flex-direction: column;
        }
        main {
            flex-grow: 1;
            overflow-y: auto; /* Allow main content to scroll */
            padding-top: 4rem; /* Adjust if header height changes */
            padding-bottom: 7rem; /* Increased padding for footer + action buttons */
        }
        header.fixed {
            height: auto; /* Let content define height */
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            z-index: 40;
        }
        footer.fixed {
            height: auto; /* Let content define height */
            position: fixed;
            bottom: 0;
            left: 0;
            right: 0;
            z-index: 30; /* Footer z-index */
        }

        .game-title-font {
            font-family: 'Press Start 2P', cursive;
        }
        /* Custom Scrollbar */
        ::-webkit-scrollbar { width: 8px; }
        ::-webkit-scrollbar-track { background: #2d3748; /* gray-700 */ }
        ::-webkit-scrollbar-thumb { background: #4a5568; /* gray-600 */ border-radius: 4px; }
        ::-webkit-scrollbar-thumb:hover { background: #718096; /* gray-500 */ }
        /* Focus visible for accessibility */
        *:focus-visible { outline: 2px solid #63b3ed; /* blue-400 */ outline-offset: 2px; }

        /* Modal Styles */
        .modal-overlay { position: fixed; inset: 0; background-color: rgba(0,0,0,0.8); display: flex; align-items: center; justify-content: center; z-index: 50; padding: 1rem;}
        .modal-content { background-color: #1f2937; /* gray-800 */ padding: 1.5rem; border-radius: 0.5rem; box-shadow: 0 25px 50px -12px rgba(0,0,0,0.25); max-height: 90vh; overflow-y: auto; width: 100%; max-width: 500px; }

        /* General Button Styling (can be overridden by Tailwind classes) */
        button, input[type="button"], input[type="submit"], .clickable { padding: 0.65rem 1.25rem; border-radius: 0.375rem; font-weight: 600; cursor: pointer; transition: background-color 0.2s ease-in-out, transform 0.1s ease-in-out; }
        button:active, .clickable:active { transform: scale(0.98); }
        .icon-placeholder { font-size: 64px; line-height: 1; } /* For game mode icons */

        /* Custom scrollbar for specific elements if needed */
        .custom-scrollbar::-webkit-scrollbar { width: 6px; }
        .custom-scrollbar::-webkit-scrollbar-track { background: #374151; /* gray-700 */ }
        .custom-scrollbar::-webkit-scrollbar-thumb { background: #6b7280; /* gray-500 */ border-radius: 3px; }
        .custom-scrollbar::-webkit-scrollbar-thumb:hover { background: #9ca3af; /* gray-400 */ }

        /* Keypad Styles */
        .keypad-overlay {
            position: fixed; inset: 0; background-color: rgba(0,0,0,0.85);
            display: flex; align-items: center; justify-content: center;
            z-index: 60; padding: 1rem;
        }
        .keypad {
            background-color: #1f2937; /* gray-800 */
            padding: 1rem; border-radius: 0.5rem;
            box-shadow: 0 10px 15px -3px rgba(0,0,0,0.1), 0 4px 6px -2px rgba(0,0,0,0.05);
            width: 90%; min-width: 300px; max-width: 360px; /* Responsive width */
            display: flex; flex-direction: column; align-items: center;
            gap: 0.75rem; max-height: 90vh; overflow-y: auto; box-sizing: border-box;
        }
        .keypad > h3 { width: 100%; max-width: 220px; text-align: center; } /* Ensure title is centered */
        .keypad-children-wrapper { width: 100%; max-width: 220px; }
        .keypad-display {
            background-color: #374151; /* gray-700 */ color: white;
            text-align: right; padding: 0.5rem 0.75rem; font-size: 1.75rem; /* Slightly smaller for very long numbers */
            border-radius: 0.375rem; min-height: 50px; box-sizing: border-box;
            word-break: break-all; width: 100%; max-width: 220px; /* Consistent width */
        }
        .keypad-grid {
            display: grid; grid-template-columns: repeat(3, 1fr); gap: 0.5rem;
            width: 100%; max-width: 220px; box-sizing: border-box; /* Consistent width */
        }
        .keypad-button {
            background-color: #4b5563; /* gray-600 */ color: white; font-size: 1rem; /* Adjusted for better fit */
            padding: 0.4rem; border-radius: 0.375rem; text-align: center;
            display: flex; align-items: center; justify-content: center;
            width: 100%; aspect-ratio: 1 / 1; /* Maintain square shape */
            box-sizing: border-box; cursor: pointer;
        }
        .keypad-button:hover { background-color: #6b7280; /* gray-500 */ }
        .keypad-button.action, .keypad-button.cancel {
            aspect-ratio: auto; /* Allow these to not be square */
            padding: 0.75rem 1rem; font-size: 1rem;
        }
        .keypad-button.action { background-color: #10B981; /* green-500 */ }
        .keypad-button.action:hover { background-color: #059669; /* green-600 */ }
        .keypad-button.cancel { background-color: #EF4444; /* red-500 */ }
        .keypad-button.cancel:hover { background-color: #DC2626; /* red-600 */ }
        .keypad-actions-container {
            display: flex; justify-content: space-between; gap: 0.5rem;
            width: 100%; max-width: 220px; margin-top: 0.5rem;
        }

        /* Cricket Styles */
        .cricket-game-area { padding:0.5rem; width:100%; display:flex; flex-direction:column; align-items:center; }
        .cricket-board-grid { display:grid; gap:0.5rem; width:100%; max-width:98vw; margin:auto; }
        .cricket-cell { padding:0.25rem; border-radius:0.5rem; text-align:center; font-weight:bold; display:flex; flex-direction:column; align-items:center; justify-content:center; box-sizing:border-box; overflow:hidden; }
        .cricket-player-header { background-color:#4A5568; color:white; min-height:190px; transition:box-shadow 0.3s ease-in-out, border-color 0.3s ease-in-out; }
        .leader-highlight { border-color:#FBBF24; box-shadow:0 0 15px rgba(251,191,36,0.7); }
        .cricket-player-header .player-name { font-size:2.5rem; margin-bottom:0.25rem; word-break:break-word; line-height:1.1; }
        .cricket-player-header .player-score { font-size:5.5rem; line-height:1; }
        .cricket-objective-label { background-color:#2D3748; color:#FBBF24; font-size:3.5rem; min-height:140px; }
        .cricket-player-mark-cell { background-color:#374151; color:white; cursor:pointer; transition:background-color 0.2s, border-color 0.2s; border:3px solid transparent; min-height:140px; }
        .cricket-player-mark-cell:hover { background-color:#4B5563; }
        .cricket-mark-display { font-size:5.5rem; color:#A0AEC0; line-height:1; min-width:80px; display:flex; justify-content:center; align-items:center; }
        .mark-display-closed { color:#c9202e; font-weight:900; } /* More vibrant red */
        .player-objective-closed-by-player { border-color:#48BB78; } /* Tailwind green-500 */
        .cricket-objective-fully-closed { opacity:0.6; cursor:default; }
        .cricket-objective-fully-closed.player-objective-closed-by-player { border-color:#EF4444; } /* Tailwind red-500 for emphasis */
        .cricket-blank-slot { min-height:140px; border:3px solid transparent; } /* Ensure consistent spacing */
        .cricket-blank-header-slot { min-height:190px; border:3px solid transparent; } /* Ensure consistent spacing */

        /* 501 Styles */
        .five01-game-area { padding:1rem; width:100%; display:flex; flex-direction:column; align-items:center; position:relative; }
        .five01-players-grid { width:100%; max-width:95vw; }
        .five01-player-card-portrait { background-color:#262626; /* neutral-800 */ color:white; border-radius:0.75rem; border:3px solid #404040; /* neutral-700 */ transition:border-color 0.3s, box-shadow 0.3s, transform 0.2s ease-out; display:flex; flex-direction:row; align-items:stretch; position:relative; }
        .five01-player-card-portrait.current-turn-participant { border-color:#FBBF24; /* amber-400 */ box-shadow:0 0 25px rgba(251,191,36,0.8), 0 0 12px rgba(255,220,100,0.6) inset; transform:scale(1.02); z-index:5; }
        .five01-player-card-portrait.leader-highlight:not(.current-turn-participant) { border-color:#34D399; /* green-400 */ box-shadow:0 0 18px rgba(52,211,153,0.55); }
        .five01-player-info-col { display:flex; flex-direction:column; justify-content:center; flex-basis:40%; text-align:left; padding-right:0.5rem; }
        .five01-player-checkout-col { display:flex; flex-direction:column; justify-content:center; align-items:center; flex-basis:30%; background-color:#171717; /* neutral-900 */ border-radius:0.5rem; text-align:center; }
        .five01-player-actions-col { display:flex; flex-direction:column; justify-content:space-around; align-items:stretch; flex-basis:30%; gap:0.5rem; padding-left:0.5rem; }
        .five01-player-name-portrait { line-height:1.1; font-weight:700; color:#e5e7eb; /* gray-200 */ margin-bottom:0.25rem; word-break:break-word; }
        .five01-player-team-member-portrait { color:#a1a1aa; /* neutral-400 */ margin-bottom:0.25rem; }
        .five01-player-score-portrait { line-height:1; font-weight:900; color:#facc15; /* yellow-400 */ }
        .five01-double-in-status-portrait { color:#fb923c; /* orange-400 */ margin-top:0.25rem; font-style:italic; }
        .five01-in-card-action-button { font-weight:600; border-radius:0.375rem; text-align:center; width:100%; flex-grow:1; display:flex; align-items:center; justify-content:center; min-height:40px; }
        .five01-player-checkout-title-portrait { font-weight:bold; color:#FBBF24; /* amber-400 */ margin-bottom:0.25rem; }
        .five01-player-checkout-suggestion-portrait { color:#6EE7B7; /* teal-300 */ font-weight:500; line-height:1.2; }
        .five01-player-checkout-none-portrait { color:#a1a1aa; /* neutral-400 */ }
        .five01-turn-actions-container { display:flex; flex-direction:column; align-items:center; gap:0.75rem; width:100%; max-width:400px; }
        .five01-action-button-portrait { font-weight:700; border-radius:0.5rem; width:100%; max-width:380px; text-align:center; box-shadow:0 4px 6px rgba(0,0,0,0.1); }
        .five01-bust-message { color:#f87171; /* red-400 */ font-weight:bold; text-align:center; }
        .five01-bottom-controls-area-portrait { position:fixed; bottom:4.5rem; /* Adjusted for footer */ right:1rem; display:flex; flex-direction:column; gap:0.75rem; pointer-events:auto; z-index:35; }
        .five01-control-button-portrait { padding:0.8rem 1.5rem; font-size:1.25rem; font-weight:bold; border-radius:0.5rem; box-shadow:0 2px 4px rgba(0,0,0,0.2); display:flex; align-items:center; justify-content:center; min-width:180px; }

        /* 3FF Styles */
        .threeff-game-area-grid { padding:0.5rem; width:100%; display:flex; flex-direction:column; align-items:center; }
        .threeff-board-grid { display:grid; gap:0.5rem; width:100%; max-width:98vw; margin:auto; }
        .threeff-cell { border-radius:0.5rem; text-align:center; font-weight:bold; display:flex; flex-direction:column; align-items:center; justify-content:center; box-sizing:border-box; overflow:hidden; }
        .threeff-player-header-cell { background-color:#4A5568; color:white; min-height:160px; padding:0.75rem; transition:box-shadow 0.3s ease-in-out, border-color 0.3s ease-in-out;}
        .threeff-player-header-cell.current-turn-participant { border:3px solid #FBBF24; box-shadow:0 0 15px rgba(251,191,36,0.6); }
        .threeff-player-name-display { font-size:2.25rem; line-height:1.1; margin-bottom:0.25rem; word-break:break-word; }
        .threeff-player-team-member-display { font-size:1.25rem; color:#d1d5db; margin-bottom:0.5rem; }
        .threeff-player-score-display { font-size:4.5rem; line-height:1; }
        .threeff-current-objective-header { min-height:110px; padding:1rem; margin-bottom:0.5rem; border-radius:0.5rem; display:flex; align-items:center; justify-content:center; }
        .threeff-current-objective-name { font-size:4rem; line-height:1.1; font-weight:900; }
        .threeff-objective-display-cell { padding:0.5rem; margin-bottom:0.25rem; border-radius:0.375rem; font-size:2rem; min-height:70px; display:flex; align-items:center; justify-content:center; transition:all 0.3s ease; border:2px solid #374151; }
        .threeff-obj-static_number { background-color:#0d9488; color:white; } .threeff-obj-random_challenge-3CNum { background-color:#be123c; color:white; } .threeff-obj-random_challenge-D { background-color:#16a34a; color:white; } .threeff-obj-random_challenge-EOE { background-color:#2563eb; color:white; } .threeff-obj-random_challenge-OEO { background-color:#7c3aed; color:white; } .threeff-obj-random_challenge-ASC { background-color:#ea580c; color:white; } .threeff-obj-random_challenge-3DC { background-color:#9333ea; color:white; } .threeff-obj-random_challenge-Holes { background-color:#475569; color:white; } .threeff-obj-random_challenge-T { background-color:#ca8a04; color:#1f2937; } .threeff-obj-hard_score { background-color:#4f46e5; color:white; font-weight:bold; } .threeff-obj-special_3ff { background-image:linear-gradient(to right, #db2777, #ef4444); color:white; font-weight:bold; }
        .threeff-objective-display-cell.active { border-color:#FBBF24 !important; font-weight:bold; transform:scale(1.03); box-shadow:0 0 15px rgba(251,191,36,0.5); }
        .threeff-objective-display-cell.threeff-obj-static_number.active { background-color:#0f766e; color:#FBBF24; } .threeff-objective-display-cell.threeff-obj-random_challenge-3CNum.active { background-color:#9f1239; } .threeff-objective-display-cell.threeff-obj-random_challenge-D.active { background-color:#15803d; } .threeff-objective-display-cell.threeff-obj-random_challenge-EOE.active { background-color:#1d4ed8; } .threeff-objective-display-cell.threeff-obj-random_challenge-OEO.active { background-color:#6d28d9; } .threeff-objective-display-cell.threeff-obj-random_challenge-ASC.active { background-color:#c2410c; } .threeff-objective-display-cell.threeff-obj-random_challenge-3DC.active { background-color:#7e22ce; } .threeff-objective-display-cell.threeff-obj-random_challenge-Holes.active { background-color:#334155; } .threeff-objective-display-cell.threeff-obj-random_challenge-T.active { background-color:#a16207; color:#f0f9ff; } .threeff-objective-display-cell.threeff-obj-hard_score.active { background-color:#4338ca; } .threeff-objective-display-cell.threeff-obj-special_3ff.active { background-image:linear-gradient(to right, #be185d, #dc2626); }
        .threeff-objective-display-cell.closed { opacity:0.5; text-decoration:line-through; border-color:#4b5563 !important; filter:grayscale(50%); }
        .threeff-objective-display-cell.threeff-obj-static_number.closed { background-color:#134e4a; } .threeff-objective-display-cell.threeff-obj-random_challenge-3CNum.closed { background-color:#881337; } .threeff-objective-display-cell.threeff-obj-random_challenge-D.closed { background-color:#14532d; } .threeff-objective-display-cell.threeff-obj-random_challenge-EOE.closed { background-color:#1e40af; } .threeff-objective-display-cell.threeff-obj-random_challenge-OEO.closed { background-color:#5b21b6; } .threeff-objective-display-cell.threeff-obj-random_challenge-ASC.closed { background-color:#9a3412; } .threeff-objective-display-cell.threeff-obj-random_challenge-3DC.closed { background-color:#6b21a8; } .threeff-objective-display-cell.threeff-obj-random_challenge-Holes.closed { background-color:#1e293b; } .threeff-objective-display-cell.threeff-obj-random_challenge-T.closed { background-color:#713f12; color:#a1a1aa; } .threeff-objective-display-cell.threeff-obj-hard_score.closed { background-color:#3730a3; } .threeff-objective-display-cell.threeff-obj-special_3ff.closed { background-image:linear-gradient(to right, #9d174d, #b91c1c); }
        .threeff-blank-header-slot { min-height:160px; border:3px solid transparent; }
        .threeff-turn-indicator { text-align:center; font-size:1.5rem; margin-bottom:1rem; color:#e5e7eb;}
        .threeff-bottom-actions-bar { width:100%; max-width:98vw; margin-top:1.5rem; padding:0 1rem; display:flex; justify-content:space-between; align-items:flex-end; box-sizing:border-box; z-index: 35; position: relative; }

        /* Around The World Styles - Simplified Input & Portrait Optimized */
        .around-the-world-game-area { /* padding-bottom is handled by main's padding-bottom now */ }
        .atw-player-card { /* Base styles in component */ }
        .atw-player-name { /* Base styles in component */ }
        .atw-player-target { /* Base styles in component */ }
        .atw-player-progress { /* Base styles in component */ }
        .atw-progress-track {
            display: flex; flex-wrap: wrap; gap: 3px;
            margin-top: 0.75rem;
            padding: 0.25rem; background-color: #1f2937; border-radius: 0.25rem;
        }
        .atw-progress-segment {
            font-size: 0.7rem;
            padding: 3px 5px;
            border: 1px solid #4b5563;
            border-radius: 0.25rem;
            background-color: #374151;
            color: #9ca3af;
            min-width: 22px;
            text-align: center;
            transition: all 0.2s ease-in-out;
        }
        .atw-progress-segment.hit {
            background-color: #10B981;
            color: white;
            border-color: #059669;
            font-weight: 500;
        }
        .atw-progress-segment.current {
            background-color: #FBBF24;
            color: #1f2937;
            border-color: #F59E0B;
            font-weight: bold;
            transform: scale(1.05);
        }
        .atw-turn-actions-container { /* Base styles in component, now used IN-CARD */ }
        .atw-bottom-controls { position:fixed; bottom:4.5rem; /* Adjusted for footer */ right:1rem; display:flex; flex-direction:column; gap:0.5rem; z-index:35; }

        /* BEERS Game Styles */
        .beers-game-area { /* padding-bottom handled by main */ }
        .beers-player-card { /* Base styles in component */ }
        .beers-player-name { /* Base styles in component */ }
        .beers-player-letters-container { /* Base styles in component */ }
        .beers-letter-button { /* Base styles in component */ }
        .beers-letter-button.given { background-color: #dc2626; color: white; border: 2px solid #ef4444; }
        .beers-action-prompt { /* Styles for current player action prompt */ }
        .beers-take-letter-prompt { /* Styles for prompt when player has failed and letter is assigned */ }
        .beers-bottom-controls { position:fixed; bottom:4.5rem; right:1rem; display:flex; flex-direction:column; space-y:0.5rem; z-index:35; }
        .beers-player-card-eliminated { opacity: 0.5; background-color: #374151 !important; filter: grayscale(70%);}
        .beers-elimination-text { text-shadow: 1px 1px 2px black; }

        /* Golf Game Styles */
        .golf-game-area { /* padding-bottom handled by main */ }
        .golf-bottom-controls { position:fixed; bottom:4.5rem; right:1rem; display:flex; flex-direction:column; space-y:0.5rem; z-index:35; }

        /* Killer Game Styles - Assassin Theme */
        .killer-game-area { padding-bottom: 7rem; /* Increased padding for footer + action buttons */ }
        .killer-player-card-assassin {
            background-color: #1e293b; /* slate-800 */
            border-radius: 0.75rem;
            padding: 1rem 1.5rem;
            margin-bottom: 1rem;
            box-shadow: 0 10px 15px -3px rgba(0,0,0, 0.4), 0 4px 6px -2px rgba(0,0,0, 0.2);
            transition: all 0.3s ease-in-out;
            display: flex;
            flex-direction: column;
            align-items: stretch;
            border: 2px solid #334155;
        }
        .killer-player-card-assassin.is-assassin {
            border-color: #ef4444; /* red-500 */
            box-shadow: 0 0 25px rgba(239, 68, 68, 0.7), 0 0 10px rgba(239, 68, 68, 0.5) inset;
            background-color: #4c0519; /* dark red */
        }
        .killer-player-card-assassin.is-eliminated {
            background-color: #1f2937; /* gray-800 */
            opacity: 0.4;
            filter: grayscale(90%);
            border-color: #4b5563; /* gray-600 */
        }
        .killer-player-info {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 0.5rem;
        }
        .killer-player-name-assassin {
            font-size: 2.5rem;
            line-height: 1.1;
            font-weight: 900;
            color: #e5e7eb; /* gray-200 */
            word-break: break-word;
            flex-grow: 1;
        }
        .killer-player-name-assassin.is-assassin-text {
            color: #fda4af; /* rose-300 */
            text-shadow: 0 0 10px #ef4444, 0 0 5px #ef4444;
        }
        .killer-player-number-assassin {
            font-size: 3.5rem; /* Increased font size */
            line-height: 1;    /* Adjusted line height */
            font-weight: 700;
            color: #93c5fd; /* blue-300 */
            margin-left: 1rem;
        }
        .killer-player-number-assassin.is-assassin-text {
            color: #fde047; /* yellow-300 */
        }
        .killer-player-status-assassin {
            font-size: 1.5rem;
            font-weight: 700;
            color: #a5f3fc; /* cyan-200 */
            text-transform: uppercase;
            letter-spacing: 0.075em;
            margin-bottom: 1rem;
            text-align: center;
            padding: 0.25rem 0;
            border-bottom: 1px solid #374151; /* gray-700 */
            border-top: 1px solid #374151; /* gray-700 */
        }
        .killer-player-status-assassin.is-assassin-text {
            color: #ef4444; /* red-500 */
            border-color: #ef4444;
            text-shadow: 0 0 5px #ef4444;
        }
        .killer-player-status-assassin.is-eliminated-text {
            color: #6b7280; /* gray-500 */
            border-color: #6b7280;
        }
        .killer-lives-container {
            display: flex;
            justify-content: space-around;
            align-items: center;
            margin-bottom: 1.25rem;
            padding: 0.75rem 0;
            background-color: rgba(0,0,0,0.3);
            border-radius: 0.5rem;
        }
        .killer-life-target {
            font-size: 4rem;
            line-height: 1;
            cursor: pointer;
            transition: all 0.3s ease-in-out;
            padding: 0.35rem;
            color: #f87171; /* red-400 (target icon color) */
            text-shadow: 0 0 8px rgba(248, 113, 113, 0.7);
        }
        .killer-life-target:hover:not(.is-lost):not(:disabled) {
            transform: scale(1.2) rotate(-5deg); /* Added slight rotation on hover */
            color: #ef4444; /* red-500 (hover color) */
            text-shadow: 0 0 12px rgba(239, 68, 68, 0.9);
        }
        .killer-life-target.is-lost {
            color: #6b7280; /* Skull color - gray-500 */
            cursor: default;
            opacity: 0.8;
            text-shadow: none;
            transform: scale(1.1) rotate(5deg); /* Slight pop and rotation for skull */
        }
        .killer-life-target:disabled:not(.is-lost) {
            cursor: not-allowed;
            opacity: 0.6;
        }
        .killer-action-button-assassin {
            font-size: 1.75rem;
            font-weight: 700;
            padding: 1rem 1.75rem;
            border-radius: 0.5rem;
            width: 100%;
            text-align: center;
            transition: all 0.2s ease-in-out;
            margin-top: 0.75rem;
            border: 2px solid transparent;
        }
        .killer-action-button-assassin.become-assassin {
            background-color: #a855f7; /* purple-500 */
            color: white;
            text-shadow: 0 0 8px rgba(255,255,255,0.6);
            border-color: #c084fc; /* purple-300 */
        }
        .killer-action-button-assassin.become-assassin:hover:not(:disabled) {
            background-color: #9333ea; /* purple-600 */
            transform: translateY(-2px) scale(1.02);
            box-shadow: 0 6px 15px rgba(168, 85, 247, 0.5);
            border-color: #e9d5ff; /* purple-100 */
        }
         .killer-action-button-assassin:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }
        .killer-number-chooser-modal-assassin .killer-number-button-assassin {
            font-size: 2rem;
            padding: 1rem;
        }
        .killer-bottom-controls { position:fixed; bottom:4.5rem; right:1rem; display:flex; flex-direction:column; gap:0.5rem; z-index:35; }


        /* Other general styles */
        .confetti-piece { position: absolute; border-radius: 50%; animation: fall linear infinite; }
        @keyframes fall { 0% { transform: translateY(-10vh) rotate(0deg); opacity: 1; } 100% { transform: translateY(110vh) rotate(720deg); opacity: 0; } }
        @keyframes pop-in { 0% { transform: scale(0.5) translateY(20px); opacity: 0; } 100% { transform: scale(1) translateY(0px); opacity: 1; } }
        .animate-pop-in { animation: pop-in 0.5s cubic-bezier(0.68, -0.55, 0.27, 1.55) forwards; }
        .player-management-area { padding: 1rem; max-width: 800px; margin: auto; }
        .player-list-item { background-color: #2d3748; padding: 0.75rem 1rem; border-radius: 0.375rem; margin-bottom: 0.5rem; display: flex; justify-content: space-between; align-items: center; }
        .player-list-item .team-members { font-size: 0.8rem; color: #9ca3af; margin-left: 1rem; }
        .player-list-item button { padding: 0.3rem 0.6rem; font-size: 0.8rem; margin-left: 0.5rem;}
    </style>
</head>
<body class="bg-gray-900 text-white">
    <div id="root"></div>

    <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <script src="https://cdn.socket.io/4.7.5/socket.io.min.js"></script>

    <script src="killer.js" type="text/babel"></script>
    <script src="cricket.js" type="text/babel"></script>
    <script src="501.js" type="text/babel"></script>
    <script src="three_friendly_flights.js" type="text/babel"></script>
    <script src="around_the_world.js" type="text/babel"></script>
    <script src="beers.js" type="text/babel"></script>
    <script src="golf.js" type="text/babel"></script>
    <script src="baseball.js" type="text/babel"></script>
    <script type="text/babel">
        // Ensure React is loaded before proceeding
        if (typeof React === 'undefined') {
            document.body.innerHTML = '<h1 style="color:red;text-align:center;margin-top:50px;">Error: React library not loaded.</h1>';
            throw new Error("React not loaded");
        }
        console.log('React version:', React.version);

        // --- Helper Functions & Constants ---
        const generateClientSideId = () => `client_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
        const IconPlaceholder = ({ emoji, size = 64, className = "" }) => (<span className={`icon-placeholder ${className}`} style={{ fontSize: `${size}px` }}>{emoji || "❓"}</span>);
        const SOCKET_SERVER_URL = 'http://' + window.location.hostname + ':8046'; // Dynamic hostname

        // --- Game Mode Definitions ---
        const GAME_MODES = {
            CRICKET: { id: 'CRICKET', name: 'Cricket', description: 'Close out B, T, D, 20-15. Score on open numbers.', iconEmoji: "🎯", component: 'CricketGame', maxPlayers: 8, maxTeams: 4, playersPerTeam: 4, supportsTeams: true, individualOnly: false },
            THREE_FF: { id: 'THREE_FF', name: '3 Friendly Flights', description: 'Hit objectives, score points, or get halved! Round-robin for teams.', iconEmoji: "🎲", component: 'ThreeFriendlyFlightsGame', maxPlayers: 8, maxTeams: 4, playersPerTeam: 4, supportsTeams: true, individualOnly: false },
            FIVE_ZERO_ONE: { id: 'FIVE_ZERO_ONE', name: '501', description: 'Race from 501 to 0. Double-in and Double-out required.', iconEmoji: "📊", component: 'FiveZeroOneGame', maxPlayers: 8, maxTeams: 4, playersPerTeam: 4, supportsTeams: true, individualOnly: false },
            AROUND_THE_WORLD: { id: 'AROUND_THE_WORLD', name: 'Around The World', description: 'Hit 1-20, SB, DB. Report highest number hit for current target.', iconEmoji: "🌍", component: 'AroundTheWorldGame', maxPlayers: 8, maxTeams: 4, playersPerTeam: 4, supportsTeams: true, individualOnly: false },
            BEERS: { id: 'BEERS', name: 'BEERS', description: 'Beat the previous player\'s score (High or Low).', iconEmoji: "🍺", component: 'BeersGame', maxPlayers: 8, supportsTeams: false, individualOnly: true },
            GOLF: { id: 'GOLF', name: 'Golf', description: 'Play 18 holes (numbers 1-18). Aim for the lowest score.', iconEmoji: "⛳", component: 'GolfGame', maxPlayers: 8, maxTeams: 4, playersPerTeam: 4, supportsTeams: true, individualOnly: false },
            BASEBALL: { id: 'BASEBALL', name: 'Baseball', description: 'Play 9 innings (numbers 1-9). Score "runs" in each inning.', iconEmoji: "⚾", component: 'BaseballGame', maxPlayers: 8, maxTeams: 4, playersPerTeam: 4, supportsTeams: true, individualOnly: false },
            KILLER: { id: 'KILLER', name: 'Killer', description: 'Claim your number, become a Killer, eliminate targets.', iconEmoji: "🔪", component: 'KillerGame', maxPlayers: 8, supportsTeams: false, individualOnly: true },
        };

        // --- Reusable UI Components ---

        // Keypad Component for score input
        const Keypad = ({ initialValue = '', onSubmit, onCancel, title = "Enter Score", children }) => {
            const [inputValue, setInputValue] = React.useState(initialValue);
            const inputRef = React.useRef(null);
            React.useEffect(() => { if (inputRef.current) inputRef.current.focus(); }, []);

            const handleInput = (char) => {
                if (char === 'DEL') setInputValue(prev => prev.slice(0, -1));
                else if (char === 'CLR') setInputValue('');
                else if (inputValue.length < 3) setInputValue(prev => prev + char);
            };

            const handleSubmit = () => {
                const score = parseInt(inputValue, 10);
                if (!isNaN(score)) {
                    onSubmit(score);
                } else if (inputValue === '' && onSubmit) {
                    onSubmit(0);
                } else {
                    const displayElement = inputRef.current?.querySelector('.keypad-display');
                    if (displayElement) {
                        const originalText = displayElement.textContent;
                        displayElement.textContent = "Invalid Input";
                        displayElement.style.color = "#EF4444";
                        setTimeout(() => {
                           displayElement.textContent = originalText;
                           displayElement.style.color = "white";
                           setInputValue('');
                        }, 1500);
                    }
                }
            };

            const handleKeyDown = (e) => { if (e.key === 'Enter') handleSubmit(); if (e.key === 'Escape') onCancel(); };

            const keypadButtonsConfig = [
                { display: '1', value: '1' }, { display: '2', value: '2' }, { display: '3', value: '3' },
                { display: '4', value: '4' }, { display: '5', value: '5' }, { display: '6', value: '6' },
                { display: '7', value: '7' }, { display: '8', value: '8' }, { display: '9', value: '9' },
                { display: 'CLR', value: 'CLR' }, { display: '0', value: '0' }, { display: 'DEL', value: 'DEL' }
            ];

            return (
                <div className="keypad-overlay" onKeyDown={handleKeyDown} tabIndex="-1" ref={inputRef}>
                    <div className="keypad">
                        <h3 className="text-2xl font-semibold text-white text-center mb-3">{title}</h3>
                        {children && <div className="keypad-children-wrapper">{children}</div>}
                        <div className="keypad-display" tabIndex="0">{inputValue || '0'}</div>
                        <div className="keypad-grid">
                            {keypadButtonsConfig.map(btn => (
                                <button key={btn.display} onClick={() => handleInput(btn.value)} className="keypad-button">
                                    {btn.display}
                                </button>
                            ))}
                        </div>
                        <div className="keypad-actions-container">
                            <button onClick={onCancel} className="keypad-button cancel flex-1">Cancel</button>
                            <button onClick={handleSubmit} className="keypad-button action flex-1">Submit</button>
                        </div>
                    </div>
                </div>
            );
        };

        // Placeholder for game modes not yet fully implemented or inlined
        const GameModePlaceholder = ({ gameMode, onGameEnd, gameState }) => ( <div className="flex flex-col items-center justify-center h-full p-8 bg-gray-800 rounded-lg shadow-xl"> <h2 className="text-5xl font-bold mb-8 game-title-font text-yellow-400">{gameMode.name}</h2> {gameState && (<div className="my-4 p-3 bg-gray-700 rounded w-full max-w-md text-left"><h3 className="text-lg font-semibold mb-2 text-yellow-300">Received Game State (Debug):</h3><pre className="text-xs text-gray-300 whitespace-pre-wrap break-all">{JSON.stringify(gameState, null, 2)}</pre></div>)} <p className="text-xl text-gray-300 mb-8">Placeholder for {gameMode.name}.</p> <button onClick={onGameEnd} className="bg-red-600 hover:bg-red-700 text-white font-bold py-3 px-6 rounded-lg text-2xl">❌ End Game</button> </div> );

        // Game Over Screen with Confetti
        const GameOverScreen = ({ winner, onDismiss }) => {
            if (!winner) return null;

            React.useEffect(() => {
                const confettiContainer = document.getElementById('confetti-container-main');
                if (!confettiContainer || confettiContainer.children.length > 0) return;

                const confettiCount = 100;
                for (let i = 0; i < confettiCount; i++) {
                    const confetti = document.createElement('div'); confetti.classList.add('confetti-piece');
                    confetti.style.left = Math.random() * 100 + 'vw'; confetti.style.animationDelay = (Math.random() * 3) + 's';
                    confetti.style.animationDuration = (Math.random() * 2 + 3) + 's'; confetti.style.backgroundColor = `hsl(${Math.random() * 360}, 100%, ${Math.random() * 30 + 50}%)`;
                    const size = (Math.random() * 8 + 4) + 'px'; confetti.style.width = size; confetti.style.height = size;
                    confetti.style.opacity = Math.random() * 0.7 + 0.3; confetti.style.transform = `rotate(${Math.random() * 360}deg)`;
                    confettiContainer.appendChild(confetti);
                }
                return () => { if (confettiContainer) confettiContainer.innerHTML = ''; };
            }, [winner]);

            const winnerDisplayName = winner.name || "Unknown Winner";
            // MODIFIED: Removed p-4 from the main overlay div, added w-screen h-screen
            return (<div className="fixed inset-0 w-screen h-screen bg-black bg-opacity-85 flex flex-col items-center justify-center z-[100]"><div id="confetti-container-main" style={{ position: 'absolute', top: 0, left: 0, width: '100%', height: '100%', overflow: 'hidden', pointerEvents: 'none' }}></div><div className="bg-gray-800 p-6 sm:p-10 md:p-12 rounded-xl shadow-2xl text-center relative animate-pop-in max-w-lg w-full"><h1 className="text-4xl sm:text-6xl md:text-7xl font-black game-title-font text-yellow-400 mb-4 sm:mb-6">GAME OVER!</h1><div className="mb-6 sm:mb-8"><IconPlaceholder emoji="🏆" size={80} className="text-yellow-300 mb-3 sm:mb-4 inline-block" /><p className="text-xl sm:text-2xl text-gray-200 mb-1 sm:mb-2">Winner:</p><p className="text-3xl sm:text-4xl md:text-5xl font-bold text-green-400 game-title-font break-words px-2 leading-tight">{winnerDisplayName}</p>{winner.score !== undefined && <p className="text-xl sm:text-2xl text-gray-200 mt-2 sm:mt-3">Score: <span className="font-bold text-white">{winner.score}</span></p>}</div><button onClick={onDismiss} className="bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 sm:py-4 px-8 sm:px-10 rounded-lg text-xl sm:text-2xl game-title-font shadow-lg transition-transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-blue-400 focus:ring-opacity-75">OK</button></div></div>);
        };

        // Screen for Managing Persistent Players & Teams
        const ManagePlayersScreen = ({ persistentPlayers, onSaveChanges, onBack, socket }) => {
            const [localPlayers, setLocalPlayers] = React.useState(() => JSON.parse(JSON.stringify(persistentPlayers || [])));
            const [showPlayerFormModal, setShowPlayerFormModal] = React.useState(false);
            const [editingPlayer, setEditingPlayer] = React.useState(null);
            const [isEditingTeam, setIsEditingTeam] = React.useState(false);

            React.useEffect(() => {
                setLocalPlayers(JSON.parse(JSON.stringify(persistentPlayers || [])));
            }, [persistentPlayers]);

            const handleAddNewPlayer = () => { setEditingPlayer(null); setIsEditingTeam(false); setShowPlayerFormModal(true); };
            const handleAddNewTeam = () => { setEditingPlayer(null); setIsEditingTeam(true); setShowPlayerFormModal(true); };
            const handleEdit = (playerToEdit) => { setEditingPlayer(playerToEdit); setIsEditingTeam(playerToEdit.type === 'team'); setShowPlayerFormModal(true); };

            const handleSavePlayerOrTeam = (playerOrTeamData) => {
                if (editingPlayer) {
                    setLocalPlayers(prev => prev.map(p => p.id === playerOrTeamData.id ? playerOrTeamData : p));
                } else {
                    const newEntry = { ...playerOrTeamData, id: playerOrTeamData.id || generateClientSideId() };
                    setLocalPlayers(prev => [...prev, newEntry]);
                }
                setShowPlayerFormModal(false); setEditingPlayer(null);
            };
            const handleDeletePlayer = (playerId) => { if (confirm('Are you sure you want to delete this player/team?')) { setLocalPlayers(prev => prev.filter(p => p.id !== playerId)); } };
            const handleSaveChangesToServer = () => { onSaveChanges(localPlayers); };

            const PlayerFormModal = ({ playerToEdit, isNewTeam, onSave, onCancel }) => {
                const isEffectivelyTeam = isNewTeam || (playerToEdit && playerToEdit.type === 'team');
                const [name, setName] = React.useState(playerToEdit ? playerToEdit.name : '');
                const initialTeamPlayers = playerToEdit && playerToEdit.type === 'team' && playerToEdit.players ? [...playerToEdit.players, ...Array(4 - playerToEdit.players.length).fill('')].slice(0,4) : Array(4).fill('');
                const [teamPlayerNames, setTeamPlayerNames] = React.useState(initialTeamPlayers);
                const handleTeamPlayerNameChange = (index, value) => { const updatedNames = [...teamPlayerNames]; updatedNames[index] = value; setTeamPlayerNames(updatedNames); };

                const handleSubmit = (e) => {
                    e.preventDefault();
                    if (isEffectivelyTeam) {
                        const finalTeamPlayers = teamPlayerNames.map(n => n.trim()).filter(n => n !== '');
                        if (name.trim() && finalTeamPlayers.length >= 1 && finalTeamPlayers.length <=4) {
                            onSave({ ...(playerToEdit || {}), name: name.trim(), type: 'team', players: finalTeamPlayers, id: playerToEdit ? playerToEdit.id : generateClientSideId() });
                        } else { alert("Team name and at least one player name (up to 4) are required."); }
                    } else {
                        if (name.trim()) { onSave({ ...(playerToEdit || {}), name: name.trim(), type: 'individual', id: playerToEdit ? playerToEdit.id : generateClientSideId() }); }
                        else { alert("Player name is required."); }
                    }
                };
                return (<div className="modal-overlay"><div className="modal-content max-w-md"><h3 className="text-2xl font-bold mb-6 game-title-font text-yellow-400">{playerToEdit ? (isEffectivelyTeam ? 'Edit Team' : 'Edit Player') : (isNewTeam ? 'Add New Team' : 'Add New Player')}</h3><form onSubmit={handleSubmit} className="space-y-4"><div><label htmlFor="entryName" className="block text-sm font-medium text-gray-300">{isEffectivelyTeam ? 'Team Name' : 'Player Name'}</label><input type="text" id="entryName" value={name} onChange={e => setName(e.target.value)} className="mt-1 block w-full bg-gray-700 border-gray-600 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" required /></div>{isEffectivelyTeam && (<>{[0, 1, 2, 3].map(index => (<div key={`team-player-${index}`}><label htmlFor={`teamPlayer${index+1}`} className="block text-sm font-medium text-gray-300">Player {index + 1} Name {(index < 1 && isEffectivelyTeam) ? '' : '(Optional)'}</label><input type="text" id={`teamPlayer${index+1}`} value={teamPlayerNames[index]} onChange={e => handleTeamPlayerNameChange(index, e.target.value)} className="mt-1 block w-full bg-gray-700 border-gray-600 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" required={index < 1 && isEffectivelyTeam} /></div>))}</>)}{<div className="flex justify-end space-x-3 pt-5"><button type="button" onClick={onCancel} className="bg-gray-600 hover:bg-gray-700 text-white">Cancel</button><button type="submit" className="bg-green-600 hover:bg-green-700 text-white">{playerToEdit ? 'Save Changes' : 'Add'}</button></div>}</form></div></div>);
            };
            return (<div className="player-management-area container mx-auto px-4 py-8"><h2 className="text-4xl font-bold mb-6 game-title-font text-yellow-400 text-center">Manage Players & Teams</h2><div className="mb-6 flex flex-col sm:flex-row justify-center items-center gap-3"><button onClick={handleAddNewPlayer} className="bg-blue-600 hover:bg-blue-700 text-white w-full sm:w-auto">➕ Add Player</button><button onClick={handleAddNewTeam} className="bg-indigo-600 hover:bg-indigo-700 text-white w-full sm:w-auto">➕ Add Team</button></div>{showPlayerFormModal && (<PlayerFormModal playerToEdit={editingPlayer} isNewTeam={!editingPlayer && isEditingTeam} onSave={handleSavePlayerOrTeam} onCancel={() => { setShowPlayerFormModal(false); setEditingPlayer(null);}} />)}<div className="bg-gray-800 p-4 rounded-lg shadow-lg max-h-[50vh] overflow-y-auto custom-scrollbar">{localPlayers.length === 0 && <p className="text-gray-400 text-center">No players or teams saved yet.</p>}{localPlayers.map(p => (<div key={p.id} className="player-list-item"><div className="flex-grow"><span className="font-semibold text-lg">{p.name}</span>{p.type === 'team' && p.players && (<span className="team-members">({p.players.join(', ')})</span>)}</div><div className="flex-shrink-0"><button onClick={() => handleEdit(p)} className="bg-yellow-500 hover:bg-yellow-600 text-black">✏️ Edit</button><button onClick={() => handleDeletePlayer(p.id)} className="bg-red-600 hover:bg-red-700 text-white">🗑️ Delete</button></div></div>))}</div><div className="mt-8 flex flex-col sm:flex-row justify-center items-center gap-4"><button onClick={onBack} className="bg-gray-600 hover:bg-gray-700 text-white py-3 px-6 text-lg w-full sm:w-auto">⬅️ Back to Menu</button><button onClick={handleSaveChangesToServer} className="bg-green-600 hover:bg-green-700 text-white py-3 px-6 text-lg w-full sm:w-auto">💾 Save All Changes</button></div></div>);
        };

        // Player Setup Screen for a selected game
        const PlayerSetup = ({ selectedGame, onSetupComplete, onCancel, persistentPlayers, socket }) => {
            const [setupMode, setSetupMode] = React.useState('manual');
            const [selectedPersistentIds, setSelectedPersistentIds] = React.useState([]);
            const defaultPlayersPerTeam = selectedGame.playersPerTeam || 2;
            const initialIsTeamMode = selectedGame.supportsTeams ? false : (selectedGame.individualOnly ? false : true);
            const [isTeamMode, setIsTeamMode] = React.useState(initialIsTeamMode);
            const [numPlayers, setNumPlayers] = React.useState(selectedGame.individualOnly ? 1 : (selectedGame.supportsTeams ? 2 : 2));
            const [numTeams, setNumTeams] = React.useState(2);
            const [playersPerTeamCount, setPlayersPerTeamCount] = React.useState(defaultPlayersPerTeam);
            const [beersRule, setBeersRule] = React.useState('HIGHER');

            const generateInitialManualPlayerDetails = React.useCallback(() => {
                if (isTeamMode && selectedGame.supportsTeams) {
                    return Array(numTeams).fill(null).map((_, teamIndex) => ({ type: 'team', id: `manual_team-${teamIndex}`, name: `Team ${teamIndex + 1}`, players: Array(playersPerTeamCount).fill('').map((_, playerIndex) => `Team ${teamIndex + 1} Player ${playerIndex + 1}`) }));
                } else {
                    return Array(numPlayers).fill(null).map((_, i) => ({ type: 'individual', id: `manual_player-${i}`, name: `Player ${i + 1}` }));
                }
            }, [isTeamMode, numPlayers, numTeams, playersPerTeamCount, selectedGame.supportsTeams]);

            const [manualPlayerDetails, setManualPlayerDetails] = React.useState(generateInitialManualPlayerDetails);

            React.useEffect(() => {
                setManualPlayerDetails(generateInitialManualPlayerDetails());
            }, [isTeamMode, numPlayers, numTeams, playersPerTeamCount, generateInitialManualPlayerDetails]);

            React.useEffect(() => {
                if (selectedGame.individualOnly) setIsTeamMode(false);
                if (isTeamMode) {
                    setNumPlayers( (selectedGame.maxTeams || 2) * (selectedGame.playersPerTeam || 2) );
                } else {
                    setNumTeams(2); setPlayersPerTeamCount(defaultPlayersPerTeam);
                    if (selectedGame.individualOnly) setNumPlayers(selectedGame.maxPlayers || 1);
                    else setNumPlayers(2);
                }
            }, [selectedGame.individualOnly, isTeamMode, defaultPlayersPerTeam, selectedGame.maxTeams, selectedGame.playersPerTeam, selectedGame.maxPlayers]);

            const handleManualPlayerNameChange = (playerIndex, newName) => { const updated = [...manualPlayerDetails]; if(updated[playerIndex] && typeof updated[playerIndex].name !== 'undefined') updated[playerIndex].name = newName; setManualPlayerDetails(updated); };
            const handleManualTeamPlayerNameChange = (teamIndex, pIdx, newName) => {
                 const updated = JSON.parse(JSON.stringify(manualPlayerDetails));
                 if(updated[teamIndex] && updated[teamIndex].type === 'team' && updated[teamIndex].players && typeof updated[teamIndex].players[pIdx] !== 'undefined') {
                    updated[teamIndex].players[pIdx] = newName;
                 } else if (updated[teamIndex] && updated[teamIndex].type === 'team' && updated[teamIndex].players) {
                    updated[teamIndex].players[pIdx] = newName;
                 }
                 setManualPlayerDetails(updated);
            };
            const handleManualTeamNameChange = (teamIndex, newName) => {
                const updated = JSON.parse(JSON.stringify(manualPlayerDetails));
                if(updated[teamIndex] && updated[teamIndex].type === 'team') updated[teamIndex].name = newName;
                setManualPlayerDetails(updated);
            };
            const handlePersistentPlayerToggle = (playerId) => { setSelectedPersistentIds(prev => prev.includes(playerId) ? prev.filter(id => id !== playerId) : [...prev, playerId]); };

            const handleSubmit = (e) => {
                e.preventDefault();
                let finalParticipants = [];
                if (setupMode === 'manual') {
                    finalParticipants = manualPlayerDetails.map((pDetail, index) => {
                        const participantId = pDetail.id || generateClientSideId();
                        if (isTeamMode && pDetail.type === 'team' && pDetail.players) {
                            const teamName = (pDetail.name || `Team ${index + 1}`).trim();
                            const playerNamesForTeam = pDetail.players.map((nameStr, pIdx) => (nameStr.trim() || `T${index + 1}P${pIdx + 1}`)).filter(nameStr => nameStr);
                            if (playerNamesForTeam.length === 0) return null;
                            return { id: participantId, type: 'team', name: teamName, players: playerNamesForTeam };
                        } else if (!isTeamMode && pDetail.type === 'individual') {
                            const playerName = (pDetail.name || '').trim();
                            if (!playerName) return null;
                            return { id: participantId, type: 'individual', name: playerName };
                        }
                        return null;
                    }).filter(p => p);
                } else {
                    finalParticipants = persistentPlayers.filter(p => selectedPersistentIds.includes(p.id))
                        .map((p) => {
                            const participantData = {...p, id: p.id || generateClientSideId()};
                            if (p.type === 'team') {
                                const teamPlayers = (p.players || []).map(name => String(name).trim()).filter(name => name !== "");
                                if (teamPlayers.length === 0) return null;
                                participantData.players = teamPlayers;
                            }
                            return participantData;
                        }).filter(p => p);
                }

                const totalSelectedPlayers = finalParticipants.reduce((acc, p) => acc + (p.type === 'team' ? (p.players ? p.players.length : 0) : 1), 0);
                const totalSelectedTeams = finalParticipants.filter(p => p.type === 'team').length;

                if (finalParticipants.length === 0) { alert("Please add or select at least one player or team."); return; }
                if (selectedGame.individualOnly && totalSelectedTeams > 0) { alert(`Game "${selectedGame.name}" is for individual players only.`); return; }
                if (!selectedGame.supportsTeams && totalSelectedTeams > 0) { alert(`Game "${selectedGame.name}" does not support teams.`); return; }

                if (isTeamMode || finalParticipants.some(p => p.type === 'team')) {
                    if (totalSelectedTeams > (selectedGame.maxTeams || 4) ) { alert(`Maximum ${selectedGame.maxTeams || 4} teams allowed. You selected ${totalSelectedTeams}.`); return; }
                    for (const team of finalParticipants.filter(p => p.type === 'team')) {
                        const teamPlayerCount = team.players ? team.players.length : 0;
                        if (teamPlayerCount > (selectedGame.playersPerTeam || 4)) { alert(`Team "${team.name}" has ${teamPlayerCount} players. The limit is ${selectedGame.playersPerTeam || 4} per team.`); return; }
                        if (teamPlayerCount === 0) { alert(`Team "${team.name}" must have at least one player.`); return; }
                    }
                }
                if (totalSelectedPlayers > (selectedGame.maxPlayers || 8)) { alert(`Total number of players exceeds the limit of ${selectedGame.maxPlayers || 8}. You have ${totalSelectedPlayers}.`); return; }
                if (totalSelectedPlayers === 0 && finalParticipants.length > 0 ) { alert("Please ensure all selected players/teams have names."); return; }

                let gameSpecificOptions = {};
                if (selectedGame.id === 'BEERS') gameSpecificOptions.beersRule = beersRule;

                const firstPlayerGameId = (selectedGame.id === 'KILLER' && finalParticipants.length > 0) ? finalParticipants[0].id : null;
                onSetupComplete(finalParticipants, gameSpecificOptions, firstPlayerGameId);
            };

            const maxIndividualPlayers = selectedGame.maxPlayers || 8;
            const maxTeamsPossible = selectedGame.maxTeams || 4;
            const maxPlayersPerTeamPossible = selectedGame.playersPerTeam || 4;
            const teamOptions = []; const minTeams = selectedGame.individualOnly ? 0 : (selectedGame.supportsTeams ? 2 : 0) ;
            for (let i = Math.max(1, minTeams); i <= Math.min(maxTeamsPossible, 8); i++) teamOptions.push(<option key={'team-c-' + i} value={i}>{i}</option>);
            const pptManualOptions = []; for (let i = 1; i <= Math.min(maxPlayersPerTeamPossible, 4); i++) { pptManualOptions.push(<option key={'ppt-manual-c-' + i} value={i}>{i}</option>); }
            const numPOptions = [];
            const startNumP = 1;
            const endNumP = selectedGame.individualOnly && selectedGame.maxPlayers === 1 ? 1 : maxIndividualPlayers;
            for (let i = startNumP; i <= endNumP; i++) numPOptions.push(<option key={'p-c-' + i} value={i}>{i}</option>);

            return (<div className="modal-overlay"><div className="modal-content w-full max-w-3xl text-white"><div className="flex justify-between items-center mb-6"><h2 className="text-3xl sm:text-4xl font-bold game-title-font text-yellow-400">{selectedGame.name} Setup</h2><button onClick={onCancel} className="text-gray-400 hover:text-white p-2 rounded-full focus:outline-none focus:ring-2 focus:ring-gray-500"><svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12" /></svg></button></div><div className="mb-4 border-b border-gray-700"><nav className="flex space-x-4" aria-label="Tabs"><button onClick={() => setSetupMode('manual')} className={`px-3 py-2 font-medium text-sm rounded-t-md ${setupMode === 'manual' ? 'bg-blue-600 text-white' : 'text-gray-400 hover:text-gray-200 hover:bg-gray-700'}`}>Manual Entry</button><button onClick={() => setSetupMode('selectList')} className={`px-3 py-2 font-medium text-sm rounded-t-md ${setupMode === 'selectList' ? 'bg-blue-600 text-white' : 'text-gray-400 hover:text-gray-200 hover:bg-gray-700'}`}>Select from List</button></nav></div>
            {selectedGame && selectedGame.id === 'BEERS' && (<div className="my-4 p-3 bg-gray-800 rounded-md"><label htmlFor="beersRule" className="block text-lg text-gray-300 mb-1">Game Rule:</label><select id="beersRule" value={beersRule} onChange={(e) => setBeersRule(e.target.value)} className="w-full sm:w-1/2 bg-gray-700 border-gray-600 text-lg p-2 rounded-md focus:ring-blue-500 focus:border-blue-500"><option value="HIGHER">Must Score HIGHER</option><option value="LOWER">Must Score LOWER</option></select></div>)}
            <form onSubmit={handleSubmit} className="space-y-6">
                {setupMode === 'manual' && (<>{selectedGame.supportsTeams && !selectedGame.individualOnly && (<div className="flex items-center space-x-4 bg-gray-800 p-3 rounded-md"><label className="text-lg sm:text-xl text-gray-300">Play Mode:</label><button type="button" onClick={() => setIsTeamMode(false)} className={`px-4 py-2 rounded-md text-md sm:text-lg ${!isTeamMode ? 'bg-blue-600 text-white shadow-md' : 'bg-gray-700 hover:bg-gray-600'}`}>Individual</button><button type="button" onClick={() => setIsTeamMode(true)} className={`px-4 py-2 rounded-md text-md sm:text-lg ${isTeamMode ? 'bg-blue-600 text-white shadow-md' : 'bg-gray-700 hover:bg-gray-600'}`}>Teams</button></div>)}{isTeamMode && selectedGame.supportsTeams && !selectedGame.individualOnly ? (<><div className="grid grid-cols-1 sm:grid-cols-2 gap-4"><div><label htmlFor="numTeams" className="text-lg text-gray-300 block mb-1">Teams:</label><select id="numTeams" value={numTeams} onChange={(e) => setNumTeams(parseInt(e.target.value))} className="w-full bg-gray-700 border-gray-600 text-lg p-2 rounded-md focus:ring-blue-500 focus:border-blue-500">{teamOptions}</select></div><div><label htmlFor="playersPerTeam" className="text-lg text-gray-300 block mb-1">Players per Team:</label><select id="playersPerTeam" value={playersPerTeamCount} onChange={(e) => setPlayersPerTeamCount(parseInt(e.target.value))} className="w-full bg-gray-700 border-gray-600 text-lg p-2 rounded-md focus:ring-blue-500 focus:border-blue-500">{pptManualOptions}</select></div></div><div className="space-y-3 max-h-60 overflow-y-auto pr-2 custom-scrollbar">{manualPlayerDetails.map((teamData, teamIndex) => {if (teamData.type !== 'team') return null; return (<div key={teamData.id} className="p-3 bg-gray-800 rounded-md space-y-2"><input type="text" value={teamData.name || ''} onChange={(e) => handleManualTeamNameChange(teamIndex, e.target.value)} className="w-full bg-gray-700 p-2 rounded-md placeholder-gray-500 focus:ring-blue-500 focus:border-blue-500 font-semibold" placeholder={`Team ${teamIndex + 1} Name`} />{teamData.players && teamData.players.map((playerName, pIdx) => (<input key={`${teamData.id}-p${pIdx}`} type="text" value={playerName || ''} onChange={(e) => handleManualTeamPlayerNameChange(teamIndex, pIdx, e.target.value)} className="w-full bg-gray-700 p-2 rounded-md placeholder-gray-500 focus:ring-blue-500 focus:border-blue-500 ml-2" placeholder={`Player ${pIdx + 1} Name`} />))}</div>);})}</div></>) : (<><div><label htmlFor="numPlayers" className="text-lg text-gray-300 block mb-1">Players:</label><select id="numPlayers" value={numPlayers} onChange={(e) => setNumPlayers(parseInt(e.target.value))} className="w-full sm:w-1/2 bg-gray-700 border-gray-600 text-lg p-2 rounded-md focus:ring-blue-500 focus:border-blue-500" disabled={selectedGame.individualOnly && selectedGame.maxPlayers === 1}>{numPOptions}</select></div><div className="space-y-2 max-h-60 overflow-y-auto pr-2 custom-scrollbar">{manualPlayerDetails.map((playerData, index) => {if (playerData.type !== 'individual') return null; return (<div key={playerData.id} className="flex items-center space-x-2"><label htmlFor={`p-${index}`} className="w-28 text-sm text-gray-400">Player {index + 1}:</label><input type="text" id={`p-${index}`} value={playerData.name || ''} onChange={(e)=>handleManualPlayerNameChange(index,e.target.value)} className="flex-grow bg-gray-700 p-2 rounded-md placeholder-gray-500 focus:ring-blue-500 focus:border-blue-500" placeholder={`Player ${index+1} Name`}/></div>);})}</div></>)}</>)}
                {setupMode === 'selectList' && (<div className="space-y-2 max-h-72 overflow-y-auto pr-2 custom-scrollbar">{persistentPlayers.length === 0 && <p className="text-gray-400 text-center py-4">No saved players/teams. Add some in "Manage Players".</p>}{persistentPlayers.map(p => (<div key={p.id} className={`p-3 rounded-md cursor-pointer transition-colors flex items-center justify-between ${selectedPersistentIds.includes(p.id) ? 'bg-blue-600 text-white ring-2 ring-blue-400' : 'bg-gray-800 hover:bg-gray-700'}`} onClick={() => handlePersistentPlayerToggle(p.id)}><div><span className="font-semibold">{p.name}</span>{p.type === 'team' && p.players && <span className="text-sm text-gray-300 ml-2">({p.players.join(', ')})</span>}</div>{selectedPersistentIds.includes(p.id) && <span className="text-xl">✔️</span>}</div>))}</div>)}
                <div className="flex justify-end space-x-4 pt-4 border-t border-gray-700"><button type="button" onClick={onCancel} className="bg-gray-600 hover:bg-gray-700 py-2 px-6 rounded-lg text-lg sm:text-xl">Cancel</button><button type="submit" className="bg-green-600 hover:bg-green-700 py-2 px-6 rounded-lg text-lg sm:text-xl flex items-center"><span className="mr-2 text-xl">▶️</span> Start Game</button></div>
            </form></div></div>);
        };

        // Game Selection Screen
        const GameSelection = ({ onSelectGame, onManagePlayers }) => {
            return (<div className="flex flex-col items-center justify-center min-h-screen p-4 sm:p-8"><h1 className="text-5xl sm:text-6xl md:text-7xl font-black mb-10 sm:mb-12 game-title-font text-center text-yellow-400 tracking-wider">Darts Arena</h1><div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-5 sm:gap-6 w-full max-w-7xl">{Object.values(GAME_MODES).map(mode => (<button key={mode.id} onClick={() => onSelectGame(mode)} className="bg-gray-800 hover:bg-blue-700 text-white rounded-xl p-5 sm:p-6 shadow-2xl transition-all duration-300 ease-in-out transform hover:scale-105 focus:outline-none focus:ring-4 ring-blue-500 ring-opacity-50" style={{ minHeight: '180px', display: 'flex', flexDirection: 'column', justifyContent: 'space-between' }} ><div className="flex flex-col items-center text-center"><IconPlaceholder emoji={mode.iconEmoji} className="mb-3 text-blue-400" size={50}/><h2 className="text-2xl sm:text-3xl font-bold mb-1 game-title-font">{mode.name}</h2></div><p className="text-xs sm:text-sm text-gray-400 text-center mt-auto">{mode.description}</p></button>))}{<button onClick={onManagePlayers} className="bg-gray-800 hover:bg-teal-600 text-white rounded-xl p-5 sm:p-6 shadow-2xl transition-all duration-300 ease-in-out transform hover:scale-105 focus:outline-none focus:ring-4 ring-teal-500 ring-opacity-50" style={{ minHeight: '180px', display: 'flex', flexDirection: 'column', justifyContent: 'space-between' }} ><div className="flex flex-col items-center text-center"><IconPlaceholder emoji="👥" className="mb-3 text-teal-400" size={50}/><h2 className="text-2xl sm:text-3xl font-bold mb-1 game-title-font">Manage Players</h2></div><p className="text-xs sm:text-sm text-gray-400 text-center mt-auto">Add, edit, or delete saved players and teams.</p></button>}</div></div>);
        };

        // Registry for dynamically loading game components
        const gameComponentRegistry = { /* Populated in App's useEffect */ };

        // --- START OF INLINED GAME COMPONENTS ---
        // CricketGame component is now loaded from cricket.js
        // FiveZeroOneGame component is now loaded from 501.js
        // ThreeFriendlyFlightsGame component is now loaded from three_friendly_flights.js
        // AroundTheWorldGame component is now loaded from around_the_world.js
        // BeersGame component is now loaded from beers.js
        // GolfGame component is now loaded from golf.js
        // BaseballGame component is now loaded from baseball.js


        // --- KillerGame component is now loaded from killer.js ---
        // --- CricketGame component is now loaded from cricket.js ---


        // --- Main App Component ---
        const App = () => {
            const [currentView, setCurrentView] = React.useState('gameSelection');
            const [selectedGame, setSelectedGame] = React.useState(null);
            const [socket, setSocket] = React.useState(null);
            const [connectionStatus, setConnectionStatus] = React.useState('Initializing...');
            const [gameState, setGameState] = React.useState(null);
            const [persistentPlayers, setPersistentPlayers] = React.useState([]);
            const [clientPlayerId, setClientPlayerId] = React.useState(null);

            React.useEffect(() => {
                // Populate gameComponentRegistry
                if (typeof CricketGame !== 'undefined') gameComponentRegistry.CricketGame = CricketGame;
                if (typeof ThreeFriendlyFlightsGame !== 'undefined') gameComponentRegistry.ThreeFriendlyFlightsGame = ThreeFriendlyFlightsGame;
                if (typeof FiveZeroOneGame !== 'undefined') gameComponentRegistry.FiveZeroOneGame = FiveZeroOneGame;
                if (typeof AroundTheWorldGame !== 'undefined') gameComponentRegistry.AroundTheWorldGame = AroundTheWorldGame;
                if (typeof BeersGame !== 'undefined') gameComponentRegistry.BeersGame = BeersGame;
                if (typeof GolfGame !== 'undefined') gameComponentRegistry.GolfGame = GolfGame;
                if (typeof BaseballGame !== 'undefined') gameComponentRegistry.BaseballGame = BaseballGame;
                if (typeof KillerGame !== 'undefined') gameComponentRegistry.KillerGame = KillerGame;
                if (typeof ManagePlayersScreen !== 'undefined') gameComponentRegistry.ManagePlayersScreen = ManagePlayersScreen;

                Object.values(GAME_MODES).forEach(mode => {
                    if (mode.component && !gameComponentRegistry[mode.component]) {
                         console.warn(`Game component ${mode.component} not found in registry. Will use placeholder.`);
                    }
                });

                const sessionSpecificId = generateClientSideId();
                console.log("Generated Session ID for socket:", sessionSpecificId);

                const newSocket = io(SOCKET_SERVER_URL, { query: { clientSessionId: sessionSpecificId } });
                setSocket(newSocket);

                newSocket.on('connect', () => {
                    console.log('Socket Connected! ID:', newSocket.id);
                    setConnectionStatus('Connected');
                    newSocket.emit('requestGameState');
                    newSocket.emit('getPersistentPlayersList');
                });
                newSocket.on('disconnect', (reason) => { console.log('Socket Disconnected:', reason); setConnectionStatus('Disconnected'); if (reason === 'io server disconnect') newSocket.connect(); });
                newSocket.on('connect_error', (error) => { console.error('Socket Connection Error:', error); setConnectionStatus(`Error: ${error.message.substring(0,30)}...`); });

                const handleGameStateReceived = (s, eventName) => {
                    console.log(`CLIENT Received ${eventName}:`, s ? JSON.stringify(s).substring(0,300) : "null");
                    setGameState(s);
                    if (s && s.mode) {
                        const gameModeDetails = Object.values(GAME_MODES).find(g => g.id === s.mode.toUpperCase());
                        if(gameModeDetails){
                            setSelectedGame(gameModeDetails);
                            setCurrentView('activeGame');
                            if (s.mode === 'KILLER' && !clientPlayerId && s.participants && s.participants.length > 0) {
                                setClientPlayerId(s.participants[0].id);
                                console.log("Killer game active, clientPlayerId set to:", s.participants[0].id);
                            }

                        } else {
                            console.warn(`Unknown game mode from server via '${eventName}':`, s.mode);
                            setCurrentView('gameSelection');
                        }
                    } else if (s === null && currentView === 'activeGame') {
                        handleGameEnd(false);
                    }
                };

                newSocket.on('gameState', (s) => handleGameStateReceived(s, 'gameState'));
                newSocket.on('gameStateUpdate', (s) => handleGameStateReceived(s, 'gameStateUpdate'));


                newSocket.on('noGameActive', () => {
                    console.log("CLIENT: Received noGameActive");
                    if (currentView === 'activeGame' || gameState !== null) {
                        setSelectedGame(null);
                        setGameState(null);
                        setCurrentView('gameSelection');
                        setClientPlayerId(null);
                    }
                });
                newSocket.on('persistentPlayersList', (list) => { console.log('CLIENT RECEIVED persistentPlayersList:', list); setPersistentPlayers(list || []); });
                newSocket.on('persistentPlayersUpdateStatus', (status) => { if(status.success) alert(status.message || 'Player list updated!'); else alert(`Error: ${status.message || 'Failed to update.'}`); });
                newSocket.on('gameStartError', (errorMessage) => { console.error('Server failed to start game:', errorMessage); alert(`Error starting game: ${errorMessage}\nPlease try again or check server logs.`); if(selectedGame && selectedGame.id !== GAME_MODES.KILLER.id) setCurrentView('playerSetup'); else if (selectedGame && selectedGame.id === GAME_MODES.KILLER.id) setCurrentView('playerSetup'); });
                newSocket.on('killerError', (errorMessage) => { alert(`Killer Game Error: ${errorMessage}`); });

                return () => { if (newSocket) newSocket.disconnect(); };
            }, []);

            React.useEffect(() => {
                if (gameState && gameState.mode === 'KILLER' && !clientPlayerId && gameState.participants && gameState.participants.length > 0) {
                    setClientPlayerId(gameState.participants[0].id);
                    console.log("GameState changed, clientPlayerId (re)set for Killer game to:", gameState.participants[0].id);
                } else if (gameState && gameState.mode !== 'KILLER') {
                    setClientPlayerId(null);
                }
            }, [gameState]);


            const handleGameSelect = (gameMode) => { setSelectedGame(gameMode); setCurrentView('playerSetup'); setGameState(null); setClientPlayerId(null); };
            const handleManagePlayersNav = () => setCurrentView('managePlayers');

            const handlePlayerSetupComplete = (participantsForGame, gameSpecificOpts = {}, controlledIdForKiller = null) => {
                if (socket && selectedGame) {
                    if (selectedGame.id === GAME_MODES.KILLER.id) {
                        if (participantsForGame && participantsForGame.length > 0) {
                            const firstPlayerForClientControl = participantsForGame[0].id;
                            setClientPlayerId(firstPlayerForClientControl);
                            console.log(`[App] Emitting startKillerGame. Client-controlled ID: ${firstPlayerForClientControl}. Participants:`, participantsForGame);
                            socket.emit('startKillerGame', { players: participantsForGame });
                        } else {
                            console.error("Killer game setup: No participants provided.");
                            alert("Error: Cannot start Killer game without players.");
                        }
                    } else {
                        setClientPlayerId(null);
                        console.log(`[App] Emitting startGame for ${selectedGame.id}`);
                        socket.emit('startGame', selectedGame.id, { names: participantsForGame, ...gameSpecificOpts });
                    }
                } else {
                    console.error("Socket not connected or game not selected for setup completion.");
                    alert("Error: Not connected to server or no game selected. Cannot start game.");
                }
            };

            const handlePlayerSetupCancel = () => { setSelectedGame(null); setCurrentView('gameSelection'); setClientPlayerId(null);};

            const handleGameEnd = (emitToServer = true) => {
                if (emitToServer && socket && gameState && gameState.mode) {
                    socket.emit('endGame');
                }
                setSelectedGame(null);
                setCurrentView('gameSelection');
                setGameState(null);
                setClientPlayerId(null);
            };
            const handleSavePersistentPlayers = (updatedList) => { if (socket) { socket.emit('updatePersistentPlayersList', updatedList); } else { alert("Not connected to server to save players."); } };

            const renderCurrentView = () => {
                switch (currentView) {
                    case 'playerSetup':
                        return selectedGame ? <PlayerSetup selectedGame={selectedGame} onSetupComplete={handlePlayerSetupComplete} onCancel={handlePlayerSetupCancel} persistentPlayers={persistentPlayers} socket={socket} /> : <GameSelection onSelectGame={handleGameSelect} onManagePlayers={handleManagePlayersNav} />;
                    case 'activeGame':
                        if (!selectedGame) {
                            console.warn("ActiveGame view with no selectedGame. Resetting.");
                            handleGameEnd(false);
                            return <div className="p-8 text-center text-red-500">No game selected. Returning to menu...</div>;
                        }
                        if (gameState && gameState.mode === selectedGame.id) {
                            const SpecificGameView = gameComponentRegistry[selectedGame.component];
                            if (SpecificGameView) {
                                try {
                                    return <SpecificGameView gameMode={selectedGame} onGameEnd={handleGameEnd} socket={socket} gameState={gameState} clientPlayerId={clientPlayerId} />;
                                } catch (error) {
                                    console.error("Error rendering SpecificGameView:", error, "GameState:", gameState, "SelectedGame:", selectedGame);
                                    return <div className="p-8 text-center text-red-500">Error rendering game. Check console.</div>;
                                }
                            } else {
                                console.warn(`Game component ${selectedGame.component} not found in registry. Using placeholder.`);
                                return <GameModePlaceholder gameMode={selectedGame} onGameEnd={() => handleGameEnd(true)} gameState={gameState} />;
                            }
                        } else {
                            let loadingMessage = `Waiting for server to start ${selectedGame.name}...`;
                            if (gameState && gameState.mode && gameState.mode !== selectedGame.id) {
                                loadingMessage = `Syncing... Current server mode: ${gameState.mode}, expected: ${selectedGame.id}`;
                            } else if (!gameState) {
                                loadingMessage = `Waiting for ${selectedGame.name} game data...`;
                            }
                            return <div className="text-yellow-400 p-8 text-center animate-pulse">{loadingMessage}</div>;
                        }
                    case 'managePlayers':
                        return <ManagePlayersScreen persistentPlayers={persistentPlayers} onSaveChanges={handleSavePersistentPlayers} onBack={() => setCurrentView('gameSelection')} socket={socket} />;
                    case 'gameSelection':
                    default:
                        return <GameSelection onSelectGame={handleGameSelect} onManagePlayers={handleManagePlayersNav} />;
                }
            };

            let statusIndicatorColor = 'bg-yellow-500';
            if (connectionStatus === 'Connected') statusIndicatorColor = 'bg-green-600';
            else if (connectionStatus.startsWith('Disconnected') || connectionStatus.startsWith('Error')) statusIndicatorColor = 'bg-red-600';

            return (
                <div id="root-container" className="min-h-screen w-full flex flex-col bg-gray-900">
                    <header className="p-3 bg-gray-800 shadow-md fixed top-0 left-0 right-0 z-40">
                        <div className="container mx-auto flex justify-between items-center px-2 sm:px-4">
                            <div className="text-xl sm:text-2xl font-bold text-yellow-400 game-title-font flex items-center">
                                <span
                                    className="mr-2 sm:mr-3 text-blue-400 cursor-pointer hover:text-blue-300 p-1 transition-colors"
                                    onClick={() => { if (currentView === 'activeGame' && gameState && !gameState.gameOver) { if (!confirm('Leave current game?')) return; } handleGameEnd(currentView === 'activeGame' && gameState?.mode); if(currentView !== 'gameSelection') setCurrentView('gameSelection'); }}
                                    title="Home / End Game"
                                    style={{fontSize:'24px', lineHeight: '1'}}
                                >
                                    🏠
                                </span>
                                Darts Scorer
                            </div>
                            <div
                                title={connectionStatus}
                                className={`text-xs sm:text-sm px-2 sm:px-3 py-1 rounded-full ${statusIndicatorColor} text-white truncate max-w-[100px] sm:max-w-[150px] transition-colors`}
                            >
                                {connectionStatus === 'Connected' ? 'Online' : (connectionStatus.startsWith('Error') ? 'Error' : 'Offline')}
                            </div>
                        </div>
                    </header>
                    <main className="flex-grow w-full">
                        {renderCurrentView()}
                    </main>
                    <footer className="p-3 sm:p-4 bg-gray-800 text-center text-gray-400 text-xs sm:text-sm border-t border-gray-700 fixed bottom-0 left-0 right-0 z-30">
                        &copy; {new Date().getFullYear()} Darts Scoring App. Client ID (Session/Game): {clientPlayerId || "N/A"}
                    </footer>
                </div>
            );
        };

        // Render the App component to the DOM
        const rootElement = document.getElementById('root');
        if (rootElement) { ReactDOM.createRoot(rootElement).render(<App />); }
        else {
            console.error("Root element #root not found in HTML. App cannot be mounted.");
            document.body.innerHTML = '<div style="color: red; text-align: center; margin-top: 50px; font-size: 24px;">Critical Error: App Root (#root) Missing.</div>';
        }
    </script>
</body>
</html>
