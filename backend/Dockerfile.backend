# Dockerfile.backend

# Use a specific, production-ready Node.js Alpine image for efficiency and reproducibility.
FROM node:18-alpine

# --- USER/GROUP SETUP ---
# Define build arguments for host UID/GID. This allows the container user
# to have the correct permissions to write to bind-mounted volumes from the host.
ARG HOST_UID=1000
ARG HOST_GID=1000

# Modify the existing 'node' user and group to match the host's UID/GID.
# This is the correct way to handle permissions for Alpine-based Node images,
# as it avoids conflicts with the pre-existing 'node' user (UID 1000).
# We add the 'shadow' package which contains the 'usermod' and 'groupmod' tools.
RUN apk add --no-cache shadow && \
    groupmod -o -g ${HOST_GID} node && \
    usermod -o -u ${HOST_UID} -g node node

# --- APPLICATION SETUP ---
# Set the working directory. All subsequent commands will run from this path.
WORKDIR /usr/src/app

# Copy package.json and package-lock.json first to leverage Docker's layer caching.
COPY package.json ./
COPY package-lock.json ./

# Before running npm install, set the ownership of the project files
# that are already copied. This can prevent permission errors during npm install.
RUN chown -R node:node .

# Switch to the non-root 'node' user *before* running npm install.
# This ensures that packages and cache are created with the correct permissions.
USER node

# Install production dependencies. `npm ci` is used for deterministic builds.
RUN npm ci --only=production --no-cache

# As the 'node' user, copy the rest of your application source code.
# The files will automatically have the correct ownership because we are the 'node' user.
COPY . .

# Copy the entrypoint script and ensure it's executable.
# This runs as the root user temporarily because we copied it before the final USER directive.
# We will switch back to root to change its ownership.
USER root
COPY docker-entrypoint.sh /usr/local/bin/docker-entrypoint.sh
RUN chmod +x /usr/local/bin/docker-entrypoint.sh && \
    chown node:node /usr/local/bin/docker-entrypoint.sh

# Expose the port that the application will run on. This is documentation.
# The actual port mapping happens in the docker-compose.yml file.
EXPOSE 8046

# Switch back to the non-root user for running the application.
USER node

# Set the entrypoint. This script will run first when the container starts.
ENTRYPOINT ["/usr/local/bin/docker-entrypoint.sh"]

# Set the default command. This is passed as arguments to the entrypoint script.
CMD [ "node", "server_v2.js" ]
